<template>
  
</template>

<script>
export default {
    methods: {
         populateSchedule(){
            // initial schedule when its empty for testing
            for (let card of this.reviewDeck.cards) {
                this.$store.commit('addCardToSchedule', card.card_id)
                // console.log('   addCardToSchedule',card.card_id)
            }
        },
        resetSchedule(){
            // reset schedule for testing
            for (let card of this.reviewDeck.cards) {
                this.$store.commit('resetCardSchedule', card.card_id)
                // console.log('   resetCardSchedule',card.card_id)
            }
        },
        plaintextToRichtext () {
            for (let deck of this.$store.state.decks) {
                console.log('checking a deck')
                for (let oldCard of deck.cards) {
                    if (oldCard.front_rich_text !== oldCard.front_text || oldCard.back_rich_text !== oldCard.back_text){
                       oldCard.front_rich_text = JSON.parse(JSON.stringify(oldCard.front_text))
                        oldCard.back_rich_text = JSON.parse(JSON.stringify(oldCard.back_text))
                        let cardUpdateData = { deck_id: deck.deck_id, card: oldCard }
                        this.$store.commit('updateCard', cardUpdateData) 
                    }
                }
            }
        },
        duplicateChecker () {
            for (let deck of this.$store.state.decks) {
                for (let dupDeck of this.$store.state.decks) {
                    let dupCount = 0
                    if (deck.deck_id === dupDeck.deck_id) {
                        dupCount ++
                        console.log("    dupCount", dupCount)    
                        if (dupCount > 1) {
                            console.log("    duplicate deck  detected", dupDeck)
                            this.$store.commit('deleteDeck', dupDeck.deck_id)
                        }
                    }
                }
            }
            for (let deck of this.$store.state.decks) {
                for (let card of deck.cards) {
                    let dupCount = 0
                    for (let cardDup of deck.cards) {
                        if (card.card_id === cardDup.card_id) {
                            dupCount ++
                            console.log("    dupCount", dupCount)    
                            if (dupCount > 1) {
                                console.log("    duplicate card  detected", cardDup)
                                let deleteData = { deck_id: deck.deck_id, card_id:  cardDup.card_id,}
                                this.$store.commit('deleteCard', deleteData)
                            }
                        }
                    }
                }
            }
        },
        generateRandomHslaColor (){
            // round to an interval of 20, 0-360
            let hue = Math.round(Math.random() * 360 / 20) * 20
            let color = `hsla(${hue}, 100%, 50%, 1)`
            return color
        },
        setAllDeckColors () {
            let decks = this.$store.state.decks
            for (let deck of decks) {
                if (!deck.icon_color) {
                // console.log("setting deck icons")
                 deck.icon_color = this.generateRandomHslaColor()
                    deck.edited = Math.round(new Date().getTime());
            this.$store.commit('updateDeck', deck)
                }
            }
        }
    }
}
</script>

<style>

</style>
// Quill/ in component. to do on change, check contents.
                    <!-- @change="onBackCardEditorChange($event)" -->
        // onFrontCardEditorChange() {
        //     // ( quill, html, text)
        //     // console.log('front editor change!', quill, html, text)
        //     // console.log(JSON.stringify(delta))
        //     // let justHtml = this.$refs.myQuillEditorFront.quill.root.innerHTML;
        //     // console.log(justHtml)
        //     return null
        // },
        // onBackCardEditorChange() {
        //     return null
        // },

    // store.mutations:
    // updateDeckEdited(state, deck_id) {
    //   for (let deck of state.decks) {
    //     if (deck.deck_id === deck_id) {
    //       deck.edited = new Date().getTime() 
    //       break
    //     }
    //   }
    // },
    // cleanSchedule(state) {
    //   let schedule = state.userCollection.schedule.list
    //   for (let scheduleItem of schedule) {
    //     let counter = 0
    //     for (let scheduleItemInner of schedule){
    //       if (scheduleItem.card_id === scheduleItemInner.card_id ) {
    //         counter ++
    //         if (counter > 1) {
    //           schedule.splice(schedule.indexOf(scheduleItem), 1)
    //         }
    //       }
    //     }
    //   }
    // },
    store.getter
        dataChanged (state) {
      if(!_.isEqual(state.userCollection, state.lastSyncsData.userCollection) || !_.isEqual(state.decks, state.lastSyncsData.decks)) {
        if(!_.isEqual(state.userCollection, state.lastSyncsData.userCollection)) {
          // console.log('       collection unequal')
        //   for (let item in state.userCollection) {
        //     for (let key of Object.keys(state.userCollection)){
        //       for (let otherItem in state.lastSyncsData.userCollection){
        //         for (let otherKey of Object.keys(state.lastSyncsData.userCollection)){
        //               // console.log('   key', key)
        //               // console.log('   otherKey', otherKey)
        //             if (key == otherKey &&  !_.isEqual(item, otherItem))
        //             console.log('   unequal items')
        //             console.log('        state', item)
        //             console.log(state.userCollection[item])
        //             console.log('       last sync,', otherItem)
        //             console.log(state.lastSyncsData.userCollection[otherItem])

        //         }
        //       }
        //     }
        //   }
        // }
        // if(!_.isEqual(state.decks, state.lastSyncsData.decks)) {
        //   for(let deck of state.decks){
        //     for (let syncdeck of state.lastSyncsData.decks){
        //       if (deck.deck_id === syncdeck.deck_id && deck.edited !== syncdeck.edited){
        //         console.log(deck.title)
        //       }
        //     }
        //   }
        //   console.log('       decks unequal')
        }
        return true
      } else {
        return false
      }
    }
    // to turn off bundle analyzer
    //config.js
    pluginOptions: {
    webpackBundleAnalyzer: {
        analyzerMode: "disabled"
    }
  configureWebpack: {
    devtool: 'source-map',
    plugins: [new BundleAnalyzerPlugin()] // delete this
  },


      async oldsync(context) {
      console.log('    sync called')
      if (context.state.syncing || context.state.userCollection.user_id === 'Tutorial') {
        // console.log('    syncing blocked')
        return null
      }
      else if(!context.state.online || context.state.lastSyncsData === null){
        context.commit('toggleSyncing', true)
        context.commit('toggleSyncFailed', true)
        // toggle sync to show we tried, this makes sure initial sync will always be incremented at startup
        context.commit('toggleSyncing', false)
        return null
      }
      else{
        context.commit('toggleSyncing', true)
        context.commit('toggleSyncFailed', false)
        while (!context.state.syncFailed && context.state.syncing ) {
          try {
            // console.log("    starting sync")
            let serverCollection     
            let localDecksMeta = JSON.parse(JSON.stringify(context.getters.decksMeta)) 
            // console.log('    localDecksMeta ', localDecksMeta)
            let decks = JSON.parse(JSON.stringify(context.state.decks)) //reload decks, cause they might be changed by above user collection section
            let userCollection = JSON.parse(JSON.stringify(context.state.userCollection))
            let serverDecksMeta = null
            let getMetaAndCollectionURL = context.state.serverURL + '/get_meta_and_collection' 
            await fetch(getMetaAndCollectionURL, {
              headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
              method: 'GET',
              })
              .then(response => response.json())
              .then((responseData) => {
                  // console.log("    Get Meta and Collection ",responseData)
                  serverCollection = responseData['user_collection']
                  serverDecksMeta = responseData['decks_meta']
              })
              .catch(function() {  
                context.commit('toggleSyncFailed', true)
                // console.log(err); 
                return null
              });
            // user collections comparisons
            if (!isEqual(serverCollection, userCollection)){
              for (let server_deleted_deck_id of serverCollection.deleted_deck_ids) {        
                // if server deleted, but local deleted isn't, delete locally
                if (!userCollection.deleted_deck_ids.includes(server_deleted_deck_id)) {
                  // add to local usercollection deleted list
                  userCollection.deleted_deck_ids.push(server_deleted_deck_id)
                  // remove from usercollection included list
                  let deck_idIndex = userCollection.deck_ids.indexOf(server_deleted_deck_id)
                  // if its actually in local
                  if (deck_idIndex !== -1)  {
                    userCollection.deck_ids.splice(deck_idIndex, 1);
                    // remove the deck from 'decks'  // note this is only for 'lastsyncsdata' purposes.
                    let deckToDeleteLst = decks.filter(function (deckToCheck) {
                      return deckToCheck.deck_id === server_deleted_deck_id
                      }) 
                    let deckToDelete = deckToDeleteLst[0]
                    let deckIndex = decks.indexOf(deckToDelete)
                    if (deckIndex !== -1) { //just in case its not there alraady
                      decks.splice(deckIndex, 1);
                    }
                    // actually remove from store, decks and user collection
                    context.commit('deleteDeck', server_deleted_deck_id)
                  }
                }
              }
              // if local deleted, but server deleted isn't, add to server deleted list
              let decksToDeleteOnServer= []  
              for (let client_deleted_deck_id of userCollection.deleted_deck_ids) { 
                if (!serverCollection.deleted_deck_ids.includes(client_deleted_deck_id)) {
                  decksToDeleteOnServer.push(client_deleted_deck_id)
                }
                }// call delete decks (server will update it's deleted decks list on its end)
              if (decksToDeleteOnServer.length > 0) {
                let deleteDeckURL = context.state.serverURL + '/delete_decks' 
                let deleteDecksData = {'deck_ids': decksToDeleteOnServer}
                await fetch(deleteDeckURL, {
                  headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
                  body: JSON.stringify(deleteDecksData),
                  method: 'DELETE'
                  })
                  .then(response => response.json())
                  .then(() => {
                      // console.log("    decks deleted: ", responseData)
                  })
                  .catch(function() {  
                    context.commit('toggleSyncFailed', true)
                    // console.log(err); 
                    return null
                  });
              }

              // if there are new decks from server, add their IDs, download the deck.
              let decksToDownload = []
              for (let server_deck_id of serverCollection.deck_ids) { 
                if (!userCollection.deck_ids.includes(server_deck_id)) {
                  decksToDownload.push(server_deck_id)
                }
              }
              let getDecksURL = context.state.serverURL + '/get_decks'
              if (decksToDownload.length > 0) {
                await fetch(getDecksURL, {
                  headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
                  body: JSON.stringify(decksToDownload),
                  method: 'POST'
                  })
                  .then(response => response.json())
                  .then((responseData) => {
                      // console.log("    decks downloaded", responseData)
                      for (let downloadedDeck of responseData) {
                        decks.unshift(downloadedDeck)
                        userCollection.deck_ids.push(downloadedDeck.deck_id)
                        context.commit('addDeck', downloadedDeck)
                      }
                  })
                  .catch(function() {  
                    context.commit('toggleSyncFailed', true)
                    // console.log(err); 
                    return null
                  });
              }
              
              // if there are new decks locally, add their IDs, post the deck.
              let decksToPost = []
              for (let client_deck_id of userCollection.deck_ids ) { 
                if (!serverCollection.deck_ids.includes(client_deck_id)) {
                  let deckToPostLst = decks.filter(function (deckToCheck) {
                    return deckToCheck.deck_id === client_deck_id
                    }) 
                  if (deckToPostLst.length > 0) {
                    let deckToPost = deckToPostLst[0]
                    decksToPost.push(deckToPost)
                  }  
                }
              }
              if (decksToPost.length > 0) {
                // console.log('    posting decks ', decksToPost)
                let postDecksURL = context.state.serverURL + '/post_decks';
                await fetch(postDecksURL, { 
                  headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
                  body: JSON.stringify(decksToPost),
                  method: 'POST',
                  })
                  .then(response => response.json())
                  //responseData
                  .then(() => {
                      // console.log("    POSTed decks ", responseData);
                      //err
                  }).catch(function() {
                    context.commit('toggleSyncFailed', true)
                    // console.log(err);
                    return null
                  });
              }
              // sync settings changes
              if (serverCollection.webapp_settings !== userCollection.webapp_settings) {
                if (serverCollection.webapp_settings.edited > userCollection.webapp_settings.edited){
                  context.commit('updateSettings', serverCollection.webapp_settings)
                }
                if (serverCollection.webapp_settings.edited < userCollection.webapp_settings.edited){
                  let putUserCollectionURL = context.state.serverURL + '/put_user_collection';
                  let putUserCollectionData = {'webapp_settings': userCollection.webapp_settings }
                  await fetch(putUserCollectionURL, { 
                    headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
                    body: JSON.stringify(putUserCollectionData),
                    method: 'PUT',
                    })
                    .then(response => response.json())
                    //responseData
                    .then(() => {
                        // console.log("    Put webapp settings ", responseData);
                        //err
                    }).catch(function() {
                      context.commit('toggleSyncFailed', true)
                      // console.log(err);
                      return null
                    });
                }
              }
              // sync schedule changes
              if (serverCollection.schedule !== userCollection.schedule) {
                if (serverCollection.schedule.edited > userCollection.schedule.edited){
                  context.commit('updateSchedule', serverCollection.schedule)
                }
                if (serverCollection.schedule.edited < userCollection.schedule.edited){
                  let putUserCollectionURL = context.state.serverURL + '/put_user_collection';
                  let putUserCollectionData = {'schedule': userCollection.schedule }
                  await fetch(putUserCollectionURL, { 
                    headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
                    body: JSON.stringify(putUserCollectionData),
                    method: 'PUT',
                    })
                    .then(response => response.json())
                    //responseData
                    .then(() => {
                        // console.log("    Put schedule changes", responseData);
                        //err
                    }).catch(function() {
                      context.commit('toggleSyncFailed', true)
                      // console.log(err);
                      return null
                    });
                }
              }
            }
            // decks meta comparisons
            let decksToPut = []
            let decksToUpdateLocally = []
            // compare the edited dates for each deck in local and server decks meta
            for (let localDeckMeta of localDecksMeta) {
              for (let serverDeckMeta of serverDecksMeta){
                if (localDeckMeta.deck_id === serverDeckMeta.deck_id){
                  // if the local version is newer, upload it
                  //  console.log('    localDeckMeta.edited',localDeckMeta.edited)
                  //  console.log('    serverDeckMeta.edited',serverDeckMeta.edited)
                  if (localDeckMeta.edited > serverDeckMeta.edited) {
                    for(let deckToPut of decks ) {
                      if (deckToPut.deck_id === localDeckMeta.deck_id){
                        decksToPut.push(deckToPut)
                        break
                      }
                    }
                  }
                  // if the server version is newer, downlaod it
                  else if (localDeckMeta.edited < serverDeckMeta.edited) {
                    decksToUpdateLocally.push(serverDeckMeta.deck_id)
                  } 
                }
              }
            }
            // upload all the decks to put
            if (decksToPut.length > 0) {
              let putDecksURL = context.state.serverURL + '/put_decks';
              await fetch(putDecksURL, { 
                headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
                body: JSON.stringify(decksToPut),
                method: 'PUT',
                })
                .then(response => response.json())
                //responseData
                .then(() => {
                    // console.log("    PUT decks ", responseData);
                }).catch(function() {
                  context.commit('toggleSyncFailed', true)
                  // console.log(err);
                });
            }
          
            // get all newer server decks
            if (decksToUpdateLocally.length > 0) {
              let getDecksURL = context.state.serverURL + '/get_decks'
              await fetch(getDecksURL, {
              headers: { 'Content-Type': 'application/json', 'x-access-token': context.state.jwt},
              body: JSON.stringify(decksToUpdateLocally),
              method: 'POST'
              })
              .then(response => response.json())
              .then((responseData) => {
                  // console.log("    decks downloaded", responseData)
                  for (let newerDeck of responseData) {
                    let oldDeckLst = decks.filter(function(deckToCheck) {
                      return deckToCheck.deck_id === newerDeck.deck_id
                    })
                    if (oldDeckLst.length > 0) {
                      let oldDeck = oldDeckLst[0]
                      let oldDeckIndex = decks.indexOf(oldDeck)
                      decks.splice(oldDeckIndex, 1);
                      decks.push(newerDeck)
                      context.commit('updateDeck', { deck: newerDeck, fromSync: true})
                    }
                  }
              })
              .catch(function() {  
                context.commit('toggleSyncFailed', true)
                // console.log(err); 
                return null
              }); 
            }
          context.commit('updateLastSyncsData', {
            decks: decks,
            userCollection: userCollection
          })
          // console.log('    set last sync data',{
          //   decks: decks,
          //   userCollection: userCollection
          // } )
          context.commit('toggleSyncing', false)
          }catch{
            context.commit('toggleSyncFailed', true)
          } 
          finally{
              context.commit('toggleSyncing', false)
              // console.log('    failed or not',context.state.syncFailed)
        }
        }          

      } 
    }


    // dataChanged (state) {
    //   if(!isEqual(state.userCollection, state.lastSyncsData.userCollection) || !isEqual(state.decks, state.lastSyncsData.decks)) {
    //     if(!isEqual(state.userCollection, state.lastSyncsData.userCollection)) {
    //       // console.log('       collection unequal')
    //     //   for (let item in state.userCollection) {
    //     //     for (let key of Object.keys(state.userCollection)){
    //     //       for (let otherItem in state.lastSyncsData.userCollection){
    //     //         for (let otherKey of Object.keys(state.lastSyncsData.userCollection)){
    //     //               // console.log('   key', key)
    //     //               // console.log('   otherKey', otherKey)
    //     //             if (key == otherKey &&  !isEqual(item, otherItem))
    //     //             console.log('   unequal items')
    //     //             console.log('        state', item)
    //     //             console.log(state.userCollection[item])
    //     //             console.log('       last sync,', otherItem)
    //     //             console.log(state.lastSyncsData.userCollection[otherItem])

    //     //         }
    //     //       }
    //     //     }
    //     //   }
    //     // }
    //     // if(!isEqual(state.decks, state.lastSyncsData.decks)) {
    //     //   for(let deck of state.decks){
    //     //     for (let syncdeck of state.lastSyncsData.decks){
    //     //       if (deck.deck_id === syncdeck.deck_id && deck.edited !== syncdeck.edited){
    //     //         console.log(deck.title)
    //     //       }
    //     //     }
    //     //   }
    //       // console.log('       decks unequal')
    //     }
    //     return true
    //   } else {
    //     return false
    //   }
    // }