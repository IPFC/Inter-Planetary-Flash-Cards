{
    "!=": "not equal",
    "\"": "Every time you put \" (double-quotes) around a piece of text you have been making a string. A string is how you make something that your program might give to a human. You print strings, save strings to files, send strings to web servers, and many other things.\n' (single-quotes) also work for this purpose.",
    "\"\"\"": "Use to make a string that needs multiple lines for the string text.",
    "\"\"\" .............\"\"\"": "String for multiple lines of text; can be multi-line comment",
    "\"mutable\"": "can be changed after created",
    "#": "Octothorpe\nuse for comments on the code, use to disable code\nplacing a # at the beginning of a line or in the middle of a line tells python to ignore whatever is written on the line after the #",
    "$": "matches the end of a string",
    "%": "Percent: used for modulus.\n\nThe modulus operation finds the remainder after division of one number after another.\n\nExample: 75 % 4 = 3, because 4 * 18 is 72, with 3 remaining",
    "%=": "Modulus AND. Takes modulus using two operands and assigns the result to left operand\nA%=B ~ A = A%B",
    "%E": "Floating point exponential format (uppercase)",
    "%F": "Floating point decimal format (UPPERCASE)",
    "%G": "Same as \"E\" if exponent is greater than -4 or less than precision",
    "%x": "Signed hexidecimal",
    "''',\"\"\"": "Free-form strings",
    "(a|b|c|)": "matches either a or b or c",
    "(x)": "in general is a remembered group. You can get the value of what matched by using the groups() method of the object returned by re.search",
    "*": "Asterisk: used for miltiplication",
    "**": "exponent",
    "**%d": "Converts a signed integer decimal",
    "**=": "Exponent AND. Performs exponential calculation on operators and assigns value to left operand.\nA**=B ~ A = A**B",
    "**In a print statement, you can set the _____ argument to a space or empty string to stop the output from advancing to a new line.": "end",
    "**variables can be reassigned?": "True",
    "*=": "Multiply AND. Multiplies left operand by right and assigns product to left operand\nA*=B ~ A = A*B",
    "*\\t": "tab character",
    "*sort()": "sorts a list from smallest to greatest",
    "+=": "Add AND. Adds right operand to the left and assigns the result to the left.\nA += B ~ A = A + B",
    ",": "We put a , (comma) at the end of each print line. This is so print doesn't end the line with a newline character and go to the next line",
    "-=": "Subtract AND. Subtracts right operand from left and assigns the result to the left.\nA-=B ~ A = A - b",
    ".index(item)": "Find the index of an item",
    ".insert(index, item)": "insert a certain item into a list at a certain index",
    "x*": "matches x zero or more times",
    "x+": "matches x one or more times",
    "x?": "matches an option x character (in other words, it matches an x wero or one times)",
    "xargs": "execute arguments",
    "x{n,m}": "matches an x character at least n times, but not more than m times",
    "yield": "is used with generators",
    "zip()": "Combines two or 3 lists to return all values in for loops",
    "{}.format(something)": "Is the new string.format in Python 3. This is how indexing works: \"My first name is {0} and my last name is {1}. You can call me {0}\".format(\"John\",\"Doe\").",
    "~88": "Bitwise NOT\nflips all bits in a number\nfor integers, effectively adds 1 and makes negative"
}