{"remainingRequest":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/src/views/Login.vue?vue&type=style&index=0&id=26084dc2&scoped=true&lang=css&","dependencies":[{"path":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/src/views/Login.vue","mtime":1575389963195},{"path":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenlu/Documents/GitHub/Inter-Planetary-Flash-Cards/ipfc_webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2JvZHkgewogICAgcGFkZGluZzogMjBweDsKfQojZm9ybS1zaWduaW4gewogICAgbWF4LXdpZHRoOiAzMzBweDsKfQojc2lnbi11cC1hIHsKICAgIG1hcmdpbjogMTBweDsKfQojbG9naW4tc2lnbnVwLWJ1dHRvbnN7CiAgICBtYXJnaW4tdG9wOiAxMHB4Owp9CiNidXR0b24tZ2V0LXBpbmF0YSB7CiAgICBtYXJnaW4tdG9wOiAxMHB4Owp9CmxhYmVsIHsKICAgIG1hcmdpbi10b3A6IDVweDsKfQo="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["\n<template>\n<div id=\"body\">\n    <b-alert\n      :show=\"dismissCountDown\"\n      dismissible\n      fade\n      variant=\"warning\"\n      @dismiss-count-down=\"countDownChanged\"\n    >\n    {{ apiErrorMsg }}\n    </b-alert>\n    <h1>IPFC Login</h1>\n    <b-form @submit.stop.prevent id=\"form-signin\">\n        <label for=\"feedback-email\">Email</label>\n        <b-input v-model=\"input.email\" :state=\"emailValidation\" id=\"feedback-email\"></b-input>\n        <b-form-invalid-feedback v-if=\"input.email\" :state=\"emailValidation\">{{ emailValidationErrorMsg }}</b-form-invalid-feedback>\n        <!-- <b-form-valid-feedback :state=\"emailValidation\">Looks Good.</b-form-valid-feedback> -->\n        \n        <label for=\"feedback-password\">Password</label>\n        <b-input v-model=\"input.password\" :state=\"passwordValidation\" type=\"password\" id=\"feedback-password\"></b-input>\n        <b-form-invalid-feedback v-if=\"input.password\" :state=\"passwordValidation\">{{ passwordValidationErrorMsg }}</b-form-invalid-feedback>\n        <!-- <b-form-valid-feedback :state=\"passwordValidation\">Looks Good.</b-form-valid-feedback> -->\n        \n        <b-button v-if=\"signingUp\" id=\"button-get-pinata\" type=\"submit\" @click=\"OpenPinata()\" variant=\"warning\">Get Pinata</b-button>\n        <br>\n        \n        <label v-if=\"signingUp\" for=\"feedback-pinata-api\">Pinata API key</label>\n        <b-input v-if=\"signingUp\" v-model=\"input.pinataApi\" :state=\"pinataApiValidation\" id=\"feedback-pinata-api\"></b-input>\n        <b-form-invalid-feedback v-if=\"signingUp\" :state=\"pinataApiValidation\">{{ pinataApiValidationErrorMsg }}</b-form-invalid-feedback>\n        <!-- <b-form-valid-feedback v-if=\"signingUp\" :state=\"pinataApiValidation\">Looks Good.</b-form-valid-feedback> -->\n       \n        <label v-if=\"signingUp\" for=\"feedback-pinata-secret\">Pinata secret API key</label>\n        <b-input v-if=\"signingUp\" v-model=\"input.pinataSecret\" :state=\"pinataSecretValidation\" type=\"password\" id=\"feedback-pinata-secret\"></b-input>\n        <b-form-invalid-feedback v-if=\"signingUp\" :state=\"pinataSecretValidation\">{{ pinataSecretValidationErrorMsg }}</b-form-invalid-feedback>\n        <!-- <b-form-valid-feedback v-if=\"signingUp\" :state=\"pinataSecretValidation\">Looks Good.</b-form-valid-feedback> -->\n        \n        <div id=\"login-signup-buttons\">\n        <span>\n            <b-button v-if=\"signingUp\" :disabled=\"invalidSignUp\" type=\"submit\" @click=\"SignUp()\" variant=\"warning\">Sign up</b-button>\n            <b-button v-else :disabled=\"invalidLogin\" type=\"submit\" @click=\"login()\" variant=\"warning\">Log in</b-button>\n            \n            <a v-if=\"signingUp\" type=\"submit\" id=\"sign-up-a\" @click=\"toggleSigningUp()\" variant=\"warning\">Returning user? Log in now!</a>\n            <a v-else type=\"submit\" id=\"sign-up-a\" @click=\"toggleSigningUp()\" variant=\"warning\">New account? Sign up now!</a>\n        </span>\n        </div>\n    </b-form>\n</div>\n</template>\n<script>\nexport default {\n    name: 'Login',\n    data() {\n        return {\n            input: {\n                email: '',\n                password: '',\n                pinataApi: '',\n                pinataSecret: '',\n                signingUp: false\n            },\n            apiErrorMsg: '',\n            failedLogin: false,\n            dismissSecs: 5,\n            dismissCountDown: 0,\n        }\n    },\n    computed: {\n        signingUp () {\n            return this.input.signingUp\n        },\n        emailValidation () {\n            let email = this.input.email\n            if (email.length < 4 || email.length > 25) {\n                return false\n            }\n            if (!email.includes('@') || !email.includes('.')) {\n                return false\n            }\n            else {\n                return true\n            }            \n        },\n        emailValidationErrorMsg () {\n            let email = this.input.email\n            if (email.length < 4 || email.length > 25) {\n                return \"Email must be 5-25 characters long\"\n            }\n            if (!email.includes('@') || !email.includes('.')) {\n                return \"Invalid email\"\n            }\n             else {\n                return null\n            }    \n        },\n        passwordValidation () {\n            let password = this.input.password\n            if (password.length < 8 || password.length > 20) {\n                return false\n            }\n            else {\n                return true\n            }            \n        },\n        passwordValidationErrorMsg () {\n            let password = this.input.password\n            if (password.length < 8 || password.length > 20) {\n                return \"Password must be 8-20 characters long\"\n            }\n             else {\n                return null\n            }    \n        },\n        pinataApiValidation () {\n            let pinataApi = this.input.pinataApi\n            if (pinataApi.length < 20 || pinataApi.length > 20) {\n                return false\n            }\n            else {\n                return true\n            }            \n        },\n        pinataApiValidationErrorMsg () {\n            let pinataApi = this.input.pinataApi\n            if (pinataApi.length < 20 || pinataApi.length > 20) {\n                return \"Invalid pinata api key. In pinata, click the profile icon, then 'account'\"\n            }\n             else {\n                return null\n            }    \n        },\n        pinataSecretValidation () {\n            let pinataSecret = this.input.pinataSecret\n            if (pinataSecret.length < 64 || pinataSecret.password > 64) {\n                return false\n            }\n            else {\n                return true\n            }            \n        },\n        pinataSecretValidationErrorMsg () {\n            let pinataSecret = this.input.pinataSecret\n            if (pinataSecret.length < 64 || pinataSecret.length > 64) {\n                return \"Invalid pinata api secret key. In pinata, click the profile icon, then 'account'\"\n            }\n             else {\n                return null\n            }\n        },\n        invalidSignUp () {\n           if (!this.emailValidation || !this.passwordValidation || !this.pinataApiValidation || !this.pinataSecretValidation) {\n               return true\n           }else {\n               return false\n           }\n        },\n        invalidLogin () {\n           if (!this.emailValidation || !this.passwordValidation) {\n               return true\n           }else {\n               return false\n           }\n        }\n    },\n    watch: {\n        failedLogin: function () {\n            if (this.failedLogin === true) {\n                this.showAlert()\n            }   \n        }\n    },\n    methods: {\n        login () {\n            this.failedLogin = false\n            let loginURL = \"https://ipfc-midware.herokuapp.com/login\";\n            let headers = new Headers();\n            let username = this.input.email;\n            let password = this.input.password;\n            headers.append('Content-Type', 'application/json');\n            headers.append('Authorization', 'Basic ' + btoa(username + \":\" + password));                            \n            fetch(loginURL, { headers: headers })\n                .then(response => response.json())\n                .then((data) => {\n                    console.log(data);\n                    if (!data['token']) {\n                        this.failedLogin = true\n                        this.apiErrorMsg = data['error']\n                    }\n                    else {\n                        this.$store.commit('updateJwt', data['token']);\n                        this.$store.dispatch('checkJwt')\n                        this.$store.commit('updateUserCollection', data['user_collection'])\n                        this.$store.commit('updateDecksMeta', data['decks_meta'])\n                        this.$router.push('deck-selection');\n                    }\n                    })\n                    .catch(function(error) {\n                        console.log(error);\n                        // this returns an error\n                        this.failedLogin = true\n                        this.apiErrorMsg = 'Server error'\n                    });\n                    \n        },\n        SignUp () {\n            this.failedLogin = false\n            let signupURL = \"https://ipfc-midware.herokuapp.com/sign_up\";\n            let data = {\n                'email': this.input.email,\n                'password': this.input.password,\n                'pinata_api': this.input.pinataApi,\n                'pinata_key': this.input.pinataSecret\n            }\n            fetch(signupURL, { \n                headers: { 'Content-Type': 'application/json'},\n                body: JSON.stringify(data),\n                method: 'POST',\n                })\n                .then(response => response.json())\n                .then((data) => {\n                    console.log(data);\n                    if (!data['message  ']) {\n                        this.failedLogin = true\n                        this.apiErrorMsg = data['error']\n                    }\n                    else {\n                        this.login ();\n                    }\n                    }).catch(function(error) {\n                        this.failedLogin = true\n                        this.apiErrorMsg = 'Server error'\n                        console.log(error);\n                    });\n        },\n        toggleSigningUp () {\n            this.input.signingUp = !this.input.signingUp\n        },\n        changeErrorMsg (msg) {\n            this.emailValidationErrorMsg = msg\n        },\n        OpenPinata () {\n            window.open(\"https://pinata.cloud/signup\", \"_blank\")\n        },\n        countDownChanged(dismissCountDown) {\n        this.dismissCountDown = dismissCountDown\n        },\n        showAlert() {\n        this.dismissCountDown = this.dismissSecs\n        }\n    }\n}\n\n</script>\n\n<style scoped>\n#body {\n    padding: 20px;\n}\n#form-signin {\n    max-width: 330px;\n}\n#sign-up-a {\n    margin: 10px;\n}\n#login-signup-buttons{\n    margin-top: 10px;\n}\n#button-get-pinata {\n    margin-top: 10px;\n}\nlabel {\n    margin-top: 5px;\n}\n</style>    "]}]}