{
  "b-alert/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-alert/dismissible": {
    "description": "When set, enables the dismiss close button",
    "type": "boolean"
  },
  "b-alert/dismiss-label": {
    "description": "Value for the 'aria-label' attribute on the dismiss button",
    "type": "string"
  },
  "b-alert/show": {
    "description": "When set, shows the alert. Set to a number (seconds) to show and automatically dismiss the alert after the number of seconds has elapsed",
    "type": "boolean|number|string"
  },
  "b-alert/fade": {
    "description": "When set to 'true', enables the fade animation/transition on the component",
    "type": "boolean"
  },
  "b-badge/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-badge/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-badge/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-badge/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-badge/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-badge/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-badge/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-badge/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-badge/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-badge/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-badge/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-badge/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-badge/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-badge/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-badge/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-badge/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-badge/pill": {
    "description": "When set to 'true', renders the badge in pill style",
    "type": "boolean"
  },
  "b-breadcrumb/items": {
    "description": "Array of breadcrumb items to render",
    "type": "any[]"
  },
  "b-breadcrumb-item/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-breadcrumb-item/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-breadcrumb-item/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-breadcrumb-item/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-breadcrumb-item/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-breadcrumb-item/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-breadcrumb-item/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-breadcrumb-item/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-breadcrumb-item/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-breadcrumb-item/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-breadcrumb-item/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-breadcrumb-item/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-breadcrumb-item/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-breadcrumb-item/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-breadcrumb-item/text": {
    "description": "Text to render in the breadcrumb item",
    "type": "string"
  },
  "b-breadcrumb-item/html": {
    "description": "HTML string to render in the breadcrumb item. Use with caution",
    "type": "string"
  },
  "b-breadcrumb-item/aria-current": {
    "description": "Sets the value of the 'aria-current' attribute (when the item is the active item). Supported string values are 'location', 'page', or 'true'",
    "type": "string"
  },
  "b-button/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-button/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-button/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-button/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-button/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-button/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-button/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-button/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-button/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-button/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-button/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-button/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-button/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-button/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-button/block": {
    "description": "Renders a 100% width button (expands to the width of it's parent container)",
    "type": "boolean"
  },
  "b-button/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-button/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-button/type": {
    "description": "The value to set the button's 'type' attribute to. Can be one of 'button', 'submit', or 'reset'",
    "type": "string"
  },
  "b-button/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-button/pill": {
    "description": "Renders the button with the pill style appearance when set to 'true'",
    "type": "boolean"
  },
  "b-button/squared": {
    "description": "Renders the button with non-rounded corners when set to 'true'",
    "type": "boolean"
  },
  "b-button/pressed": {
    "description": "When set to 'true', gives the button the appearance of being pressed. Syncable with the .sync modifier",
    "type": "boolean"
  },
  "b-btn/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-btn/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-btn/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-btn/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-btn/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-btn/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-btn/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-btn/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-btn/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-btn/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-btn/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-btn/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-btn/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-btn/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-btn/block": {
    "description": "Renders a 100% width button (expands to the width of it's parent container)",
    "type": "boolean"
  },
  "b-btn/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-btn/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-btn/type": {
    "description": "The value to set the button's 'type' attribute to. Can be one of 'button', 'submit', or 'reset'",
    "type": "string"
  },
  "b-btn/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-btn/pill": {
    "description": "Renders the button with the pill style appearance when set to 'true'",
    "type": "boolean"
  },
  "b-btn/squared": {
    "description": "Renders the button with non-rounded corners when set to 'true'",
    "type": "boolean"
  },
  "b-btn/pressed": {
    "description": "When set to 'true', gives the button the appearance of being pressed. Syncable with the .sync modifier",
    "type": "boolean"
  },
  "b-button-close/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-button-close/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-button-close/text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the text",
    "type": "string"
  },
  "b-btn-close/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-btn-close/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-btn-close/text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the text",
    "type": "string"
  },
  "b-button-group/vertical": {
    "description": "When set, rendered the button group in vertical mode",
    "type": "boolean"
  },
  "b-button-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-button-group/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-button-group/aria-role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-btn-group/vertical": {
    "description": "When set, rendered the button group in vertical mode",
    "type": "boolean"
  },
  "b-btn-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-btn-group/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-btn-group/aria-role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-button-toolbar/justify": {
    "description": "Make the toolbar span the maximum available width, by increasing spacing between the button groups, input groups and dropdowns",
    "type": "boolean"
  },
  "b-button-toolbar/key-nav": {
    "description": "When set, enabled keyboard navigation mode for the toolbar. Do not set this prop when the toolbar has inputs",
    "type": "boolean"
  },
  "b-btn-toolbar/justify": {
    "description": "Make the toolbar span the maximum available width, by increasing spacing between the button groups, input groups and dropdowns",
    "type": "boolean"
  },
  "b-btn-toolbar/key-nav": {
    "description": "When set, enabled keyboard navigation mode for the toolbar. Do not set this prop when the toolbar has inputs",
    "type": "boolean"
  },
  "b-card/body-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the body",
    "type": "string"
  },
  "b-card/body-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body background",
    "type": "string"
  },
  "b-card/body-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body border",
    "type": "string"
  },
  "b-card/body-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body text",
    "type": "string"
  },
  "b-card/body-class": {
    "description": "CSS class (or classes) to apply to the body",
    "type": "string|object|any[]"
  },
  "b-card/title": {
    "description": "Text content to place in the title",
    "type": "string"
  },
  "b-card/title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the title",
    "type": "string"
  },
  "b-card/sub-title": {
    "description": "Text content to place in the sub title",
    "type": "string"
  },
  "b-card/sub-title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the sub title",
    "type": "string"
  },
  "b-card/sub-title-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the sub title text",
    "type": "string"
  },
  "b-card/overlay": {
    "description": "When set, will overlay the card body on top of the image (if the card has an image)",
    "type": "boolean"
  },
  "b-card/header-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the header",
    "type": "string"
  },
  "b-card/header-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header background",
    "type": "string"
  },
  "b-card/header-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header border",
    "type": "string"
  },
  "b-card/header-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header text",
    "type": "string"
  },
  "b-card/header": {
    "description": "Text content to place in the header",
    "type": "string"
  },
  "b-card/header-html": {
    "description": "HTML string content to place in the header. Use with caution",
    "type": "string"
  },
  "b-card/header-class": {
    "description": "CSS class (or classes) to apply to the header",
    "type": "string|object|any[]"
  },
  "b-card/footer-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the footer",
    "type": "string"
  },
  "b-card/footer-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer background",
    "type": "string"
  },
  "b-card/footer-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer border",
    "type": "string"
  },
  "b-card/footer-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer text",
    "type": "string"
  },
  "b-card/footer": {
    "description": "Text content to place in the footer",
    "type": "string"
  },
  "b-card/footer-html": {
    "description": "HTML string content to place in the footer. Use with caution",
    "type": "string"
  },
  "b-card/footer-class": {
    "description": "CSS class (or classes) to apply to the footer",
    "type": "string|object|any[]"
  },
  "b-card/img-src": {
    "description": "URL for the optional image",
    "type": "string"
  },
  "b-card/img-alt": {
    "description": "Value to set the image attribute 'alt'",
    "type": "string"
  },
  "b-card/img-top": {
    "description": "Set if the image should appear at the top of the card",
    "type": "boolean"
  },
  "b-card/img-bottom": {
    "description": "Set if the image should appear at the bottom of the card",
    "type": "boolean"
  },
  "b-card/img-start": {
    "description": "Set if the image should appear at the start (left) of the card",
    "type": "boolean"
  },
  "b-card/img-left": {
    "description": "Set if the image should appear at the start (left) of the card. Synonym for the 'left' prop",
    "type": "boolean"
  },
  "b-card/img-end": {
    "description": "Set if the image should appear at the end (right) of the card",
    "type": "boolean"
  },
  "b-card/img-right": {
    "description": "Set if the image should appear at the end (right) of the card. Synonym for the 'right' prop",
    "type": "boolean"
  },
  "b-card/img-height": {
    "description": "The value to set on the image's 'height' attribute",
    "type": "number|string"
  },
  "b-card/img-width": {
    "description": "The value to set on the image's 'width' attribute",
    "type": "number|string"
  },
  "b-card/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-card/bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the background",
    "type": "string"
  },
  "b-card/border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the border",
    "type": "string"
  },
  "b-card/text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the text",
    "type": "string"
  },
  "b-card/align": {
    "description": "Text alignment for the card's content: 'left', 'center' or 'right'",
    "type": "string"
  },
  "b-card/no-body": {
    "description": "Disable rendering of the default inner card-body element",
    "type": "boolean"
  },
  "b-card-header/header-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the header",
    "type": "string"
  },
  "b-card-header/header-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header background",
    "type": "string"
  },
  "b-card-header/header-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header border",
    "type": "string"
  },
  "b-card-header/header-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header text",
    "type": "string"
  },
  "b-card-header/header": {
    "description": "Text content to place in the header",
    "type": "string"
  },
  "b-card-header/header-html": {
    "description": "HTML string content to place in the header. Use with caution",
    "type": "string"
  },
  "b-card-header/header-class": {
    "description": "CSS class (or classes) to apply to the header",
    "type": "string|object|any[]"
  },
  "b-card-footer/footer-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the footer",
    "type": "string"
  },
  "b-card-footer/footer-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer background",
    "type": "string"
  },
  "b-card-footer/footer-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer border",
    "type": "string"
  },
  "b-card-footer/footer-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer text",
    "type": "string"
  },
  "b-card-footer/footer": {
    "description": "Text content to place in the footer",
    "type": "string"
  },
  "b-card-footer/footer-html": {
    "description": "HTML string content to place in the footer. Use with caution",
    "type": "string"
  },
  "b-card-footer/footer-class": {
    "description": "CSS class (or classes) to apply to the footer",
    "type": "string|object|any[]"
  },
  "b-card-body/body-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the body",
    "type": "string"
  },
  "b-card-body/body-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body background",
    "type": "string"
  },
  "b-card-body/body-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body border",
    "type": "string"
  },
  "b-card-body/body-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body text",
    "type": "string"
  },
  "b-card-body/body-class": {
    "description": "CSS class (or classes) to apply to the body",
    "type": "string|object|any[]"
  },
  "b-card-body/title": {
    "description": "Text content to place in the title",
    "type": "string"
  },
  "b-card-body/title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the title",
    "type": "string"
  },
  "b-card-body/sub-title": {
    "description": "Text content to place in the sub title",
    "type": "string"
  },
  "b-card-body/sub-title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the sub title",
    "type": "string"
  },
  "b-card-body/sub-title-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the sub title text",
    "type": "string"
  },
  "b-card-body/overlay": {
    "description": "When set, will overlay the card body on top of the image (if the card has an image)",
    "type": "boolean"
  },
  "b-card-title/title": {
    "description": "Text content to place in the title",
    "type": "string"
  },
  "b-card-title/title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the title",
    "type": "string"
  },
  "b-card-sub-title/sub-title": {
    "description": "Text content to place in the sub title",
    "type": "string"
  },
  "b-card-sub-title/sub-title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the sub title",
    "type": "string"
  },
  "b-card-sub-title/sub-title-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the sub title text",
    "type": "string"
  },
  "b-card-img/src": {
    "description": "URL to set for the 'src' attribute",
    "type": "string"
  },
  "b-card-img/alt": {
    "description": "Value to set for the 'alt' attribute",
    "type": "string"
  },
  "b-card-img/top": {
    "description": "Set if the image will be placed at the top of the card",
    "type": "boolean"
  },
  "b-card-img/bottom": {
    "description": "Set if the image will be placed at the bottom of the card",
    "type": "boolean"
  },
  "b-card-img/start": {
    "description": "Set if the image will be placed at the start (left) of the card",
    "type": "boolean"
  },
  "b-card-img/left": {
    "description": "Set if the image will be placed at the start (left) of the card. Synonym for the 'left' prop",
    "type": "boolean"
  },
  "b-card-img/end": {
    "description": "Set if the image will be placed at the end (right) of the card",
    "type": "boolean"
  },
  "b-card-img/right": {
    "description": "Set if the image will be placed at the end (right) of the card. Synonym for the 'right' prop",
    "type": "boolean"
  },
  "b-card-img/height": {
    "description": "The value to set on the image's 'height' attribute",
    "type": "number|string"
  },
  "b-card-img/width": {
    "description": "The value to set on the image's 'width' attribute",
    "type": "number|string"
  },
  "b-card-img-lazy/src": {
    "description": "URL to set for the 'src' attribute",
    "type": "string"
  },
  "b-card-img-lazy/srcset": {
    "description": "One of: string or any[]",
    "type": "string|any[]"
  },
  "b-card-img-lazy/sizes": {
    "description": "One of: string or any[]",
    "type": "string|any[]"
  },
  "b-card-img-lazy/alt": {
    "description": "Value to set for the 'alt' attribute",
    "type": "string"
  },
  "b-card-img-lazy/width": {
    "description": "The value to set on the image's 'width' attribute",
    "type": "number|string"
  },
  "b-card-img-lazy/height": {
    "description": "The value to set on the image's 'height' attribute",
    "type": "number|string"
  },
  "b-card-img-lazy/blank-src": {
    "description": "URL of placeholder image. If not set, an SVG placeholder placeholder will be used",
    "type": "string"
  },
  "b-card-img-lazy/blank-color": {
    "description": "CSS color of the blank SVG placeholder image. Has no effect if 'blank-src' is set",
    "type": "string"
  },
  "b-card-img-lazy/blank-width": {
    "description": "Value of the 'width' attribute for the placeholder image",
    "type": "number|string"
  },
  "b-card-img-lazy/blank-height": {
    "description": "Value of the 'height' attribute for the placeholder image",
    "type": "number|string"
  },
  "b-card-img-lazy/show": {
    "description": "If set to true, will force show the image specified via the 'src' prop",
    "type": "boolean"
  },
  "b-card-img-lazy/offset": {
    "description": "Number of pixels away from the viewport edge before the lazy image is loaded",
    "type": "number|string"
  },
  "b-card-img-lazy/top": {
    "description": "Set if the image will be placed at the top of the card",
    "type": "boolean"
  },
  "b-card-img-lazy/bottom": {
    "description": "Set if the image will be placed at the bottom of the card",
    "type": "boolean"
  },
  "b-card-img-lazy/start": {
    "description": "Set if the image will be placed at the start (left) of the card",
    "type": "boolean"
  },
  "b-card-img-lazy/left": {
    "description": "Set if the image will be placed at the start (left) of the card. Synonym for the 'left' prop",
    "type": "boolean"
  },
  "b-card-img-lazy/end": {
    "description": "Set if the image will be placed at the end (right) of the card",
    "type": "boolean"
  },
  "b-card-img-lazy/right": {
    "description": "Set if the image will be placed at the end (right) of the card. Synonym for the 'right' prop",
    "type": "boolean"
  },
  "b-card-text/text-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the text content",
    "type": "string"
  },
  "b-card-group/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-card-group/deck": {
    "description": "When set renders the card group with gutters between cards",
    "type": "boolean"
  },
  "b-card-group/columns": {
    "description": "When set, renders the card group in a masonry-like columnar style",
    "type": "boolean"
  },
  "b-carousel/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-carousel/label-prev": {
    "description": "Sets the 'aria-label' value for the previous slide control",
    "type": "string"
  },
  "b-carousel/label-next": {
    "description": "Sets the 'aria-label' value for the next slide control",
    "type": "string"
  },
  "b-carousel/label-goto-slide": {
    "description": "Sets the prefix for the 'aria-label' on the slide indicator controls. Will be suffixed with the slide number (1 indexed)",
    "type": "string"
  },
  "b-carousel/label-indicators": {
    "description": "Sets the 'aria-label' on the indicator controls wrapper",
    "type": "string"
  },
  "b-carousel/interval": {
    "description": "Set the delay time (in milliseconds) between slides",
    "type": "number"
  },
  "b-carousel/indicators": {
    "description": "Enable the indicator buttons for jumping to specific slides",
    "type": "boolean"
  },
  "b-carousel/controls": {
    "description": "Enable the previous and next controls",
    "type": "boolean"
  },
  "b-carousel/no-animation": {
    "description": "When set, disables animation when transitioning between slides",
    "type": "boolean"
  },
  "b-carousel/fade": {
    "description": "When set, changes the slide animation to a crossfade instead of a sliding effect",
    "type": "boolean"
  },
  "b-carousel/no-wrap": {
    "description": "Do not restart the slide show when then end is reached",
    "type": "boolean"
  },
  "b-carousel/no-touch": {
    "description": "Disable controlling the slides via touch swipes",
    "type": "boolean"
  },
  "b-carousel/no-hover-pause": {
    "description": "When set, disables the pausing of hte slide show when the current slide is hovered",
    "type": "boolean"
  },
  "b-carousel/img-width": {
    "description": "Set the default image 'width' attribute for all b-tab children",
    "type": "number|string"
  },
  "b-carousel/img-height": {
    "description": "Set the default image 'height' attribute for all b-tab children",
    "type": "number|string"
  },
  "b-carousel/background": {
    "description": "Set the CSS color of the carousel's background",
    "type": "string"
  },
  "b-carousel/value": {
    "description": "The currently active slide (zero-indexed)",
    "type": "number"
  },
  "b-carousel-slide/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-carousel-slide/img-src": {
    "description": "Sets the URL of the image",
    "type": "string"
  },
  "b-carousel-slide/img-alt": {
    "description": "Sets the value of the 'alt' attribute on the image",
    "type": "string"
  },
  "b-carousel-slide/img-width": {
    "description": "Set the default image 'width' attribute for all b-tab children",
    "type": "number|string"
  },
  "b-carousel-slide/img-height": {
    "description": "Set the default image 'height' attribute for all b-tab children",
    "type": "number|string"
  },
  "b-carousel-slide/img-blank": {
    "description": "If set, will render a blank image instead of the img-src",
    "type": "boolean"
  },
  "b-carousel-slide/img-blank-color": {
    "description": "Set the CSS color to use as the fill of the blank image",
    "type": "string"
  },
  "b-carousel-slide/content-visible-up": {
    "description": "Specify the breakpoint that the textual content will start to be shown. Leave at default to always show the textual content",
    "type": "string"
  },
  "b-carousel-slide/content-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the content wrapper",
    "type": "string"
  },
  "b-carousel-slide/caption": {
    "description": "Text content to place in the caption",
    "type": "string"
  },
  "b-carousel-slide/caption-html": {
    "description": "HTML string content to place in the caption. Use with caution",
    "type": "string"
  },
  "b-carousel-slide/caption-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the caption wrapper",
    "type": "string"
  },
  "b-carousel-slide/text": {
    "description": "Text content to place in the text of the slide",
    "type": "string"
  },
  "b-carousel-slide/text-html": {
    "description": "HTML string content to place in the text of the slide. Use with caution",
    "type": "string"
  },
  "b-carousel-slide/text-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the text content",
    "type": "string"
  },
  "b-carousel-slide/background": {
    "description": "CSS color to use as the slide's background color",
    "type": "string"
  },
  "b-collapse/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-collapse/is-nav": {
    "description": "When set, signifies that hte collapse is bart of a navbar, enabling certain features for navbar support",
    "type": "boolean"
  },
  "b-collapse/accordion": {
    "description": "The name of the accordion group that this collapse belongs to",
    "type": "string"
  },
  "b-collapse/visible": {
    "description": "When 'true', expands the collapse",
    "type": "boolean"
  },
  "b-collapse/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dropdown/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dropdown/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dropdown/text": {
    "description": "Text to place in the toggle button, or in the split button is split mode",
    "type": "string"
  },
  "b-dropdown/html": {
    "description": "HTML string to place in the toggle button, or in the split button is split mode. Use with caution",
    "type": "string"
  },
  "b-dropdown/dropup": {
    "description": "When set, positions the menu on the top of the button",
    "type": "boolean"
  },
  "b-dropdown/dropright": {
    "description": "When set, positions the menu to the right of the button",
    "type": "boolean"
  },
  "b-dropdown/dropleft": {
    "description": "When set, positions the menu to the left of the button",
    "type": "boolean"
  },
  "b-dropdown/right": {
    "description": "Align the right edge of the menu with the right of the button",
    "type": "boolean"
  },
  "b-dropdown/offset": {
    "description": "Specify the number of pixels to shift the menu by. Negative values supported",
    "type": "number|string"
  },
  "b-dropdown/no-flip": {
    "description": "Prevent the menu from auto flipping positions",
    "type": "boolean"
  },
  "b-dropdown/lazy": {
    "description": "When set, will only mount the menu content into the DOM when the menu is open",
    "type": "boolean"
  },
  "b-dropdown/popper-opts": {
    "description": "Additional configuration to pass to Popper.js",
    "type": "any"
  },
  "b-dropdown/toggle-text": {
    "description": "ARIA label (sr-only) to set on the toggle when in split mode",
    "type": "string"
  },
  "b-dropdown/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-dropdown/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dropdown/block": {
    "description": "Renders a 100% width toggle button (expands to the width of it's parent container)",
    "type": "boolean"
  },
  "b-dropdown/menu-class": {
    "description": "CSS class (or classes) to add to the menu container",
    "type": "string|any[]"
  },
  "b-dropdown/toggle-tag": {
    "description": "Specify the HTML tag to render instead of the default tag. Use with caution",
    "type": "string"
  },
  "b-dropdown/toggle-class": {
    "description": "CSS class (or classes) to add to the toggle button",
    "type": "string|any[]"
  },
  "b-dropdown/no-caret": {
    "description": "Hide the caret indicator on the toggle button",
    "type": "boolean"
  },
  "b-dropdown/split": {
    "description": "When set, renders a split button dropdown",
    "type": "boolean"
  },
  "b-dropdown/split-href": {
    "description": "Denotes the target URL of the link for the split button",
    "type": "string"
  },
  "b-dropdown/split-to": {
    "description": "router-link prop: Denotes the target route of the split button. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-dropdown/split-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the split button. Defaults to the 'variant' prop value",
    "type": "string"
  },
  "b-dropdown/split-button-type": {
    "description": "Value to place in the 'type' attribute on the split button: 'button', 'submit', 'reset'",
    "type": "string"
  },
  "b-dropdown/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-dropdown/boundary": {
    "description": "The boundary constraint of the menu: 'scrollParent', 'window', 'viewport', or a reference to an HTMLElement",
    "type": "string|HTMLElement"
  },
  "b-dd/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dd/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dd/text": {
    "description": "Text to place in the toggle button, or in the split button is split mode",
    "type": "string"
  },
  "b-dd/html": {
    "description": "HTML string to place in the toggle button, or in the split button is split mode. Use with caution",
    "type": "string"
  },
  "b-dd/dropup": {
    "description": "When set, positions the menu on the top of the button",
    "type": "boolean"
  },
  "b-dd/dropright": {
    "description": "When set, positions the menu to the right of the button",
    "type": "boolean"
  },
  "b-dd/dropleft": {
    "description": "When set, positions the menu to the left of the button",
    "type": "boolean"
  },
  "b-dd/right": {
    "description": "Align the right edge of the menu with the right of the button",
    "type": "boolean"
  },
  "b-dd/offset": {
    "description": "Specify the number of pixels to shift the menu by. Negative values supported",
    "type": "number|string"
  },
  "b-dd/no-flip": {
    "description": "Prevent the menu from auto flipping positions",
    "type": "boolean"
  },
  "b-dd/lazy": {
    "description": "When set, will only mount the menu content into the DOM when the menu is open",
    "type": "boolean"
  },
  "b-dd/popper-opts": {
    "description": "Additional configuration to pass to Popper.js",
    "type": "any"
  },
  "b-dd/toggle-text": {
    "description": "ARIA label (sr-only) to set on the toggle when in split mode",
    "type": "string"
  },
  "b-dd/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-dd/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dd/block": {
    "description": "Renders a 100% width toggle button (expands to the width of it's parent container)",
    "type": "boolean"
  },
  "b-dd/menu-class": {
    "description": "CSS class (or classes) to add to the menu container",
    "type": "string|any[]"
  },
  "b-dd/toggle-tag": {
    "description": "Specify the HTML tag to render instead of the default tag. Use with caution",
    "type": "string"
  },
  "b-dd/toggle-class": {
    "description": "CSS class (or classes) to add to the toggle button",
    "type": "string|any[]"
  },
  "b-dd/no-caret": {
    "description": "Hide the caret indicator on the toggle button",
    "type": "boolean"
  },
  "b-dd/split": {
    "description": "When set, renders a split button dropdown",
    "type": "boolean"
  },
  "b-dd/split-href": {
    "description": "Denotes the target URL of the link for the split button",
    "type": "string"
  },
  "b-dd/split-to": {
    "description": "router-link prop: Denotes the target route of the split button. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-dd/split-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the split button. Defaults to the 'variant' prop value",
    "type": "string"
  },
  "b-dd/split-button-type": {
    "description": "Value to place in the 'type' attribute on the split button: 'button', 'submit', 'reset'",
    "type": "string"
  },
  "b-dd/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-dd/boundary": {
    "description": "The boundary constraint of the menu: 'scrollParent', 'window', 'viewport', or a reference to an HTMLElement",
    "type": "string|HTMLElement"
  },
  "b-dropdown-item/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-dropdown-item/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-dropdown-item/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-dropdown-item/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-dropdown-item/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dropdown-item/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-dropdown-item/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-dropdown-item/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-dropdown-item/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-dropdown-item/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dropdown-item/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-dropdown-item/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dropdown-item/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-dropdown-item/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-dropdown-item/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dd-item/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-dd-item/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-dd-item/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-dd-item/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-dd-item/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dd-item/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-dd-item/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-dd-item/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-dd-item/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-dd-item/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dd-item/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-dd-item/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dd-item/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-dd-item/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-dd-item/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dropdown-item-button/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-dropdown-item-button/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dropdown-item-button/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dropdown-item-button/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dropdown-item-btn/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-dropdown-item-btn/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dropdown-item-btn/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dropdown-item-btn/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dd-item-button/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-dd-item-button/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dd-item-button/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dd-item-button/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dd-item-btn/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-dd-item-btn/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-dd-item-btn/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dd-item-btn/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dropdown-divider/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dd-divider/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dropdown-form/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dropdown-form/inline": {
    "description": "When set, the form will be in inline mode which display labels, form controls, and buttons on a single horizontal row",
    "type": "boolean"
  },
  "b-dropdown-form/novalidate": {
    "description": "When set, disables browser native HTML5 validation on controls in the form",
    "type": "boolean"
  },
  "b-dropdown-form/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' on the form, triggering the native browser validation states",
    "type": "boolean"
  },
  "b-dropdown-form/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dd-form/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dd-form/inline": {
    "description": "When set, the form will be in inline mode which display labels, form controls, and buttons on a single horizontal row",
    "type": "boolean"
  },
  "b-dd-form/novalidate": {
    "description": "When set, disables browser native HTML5 validation on controls in the form",
    "type": "boolean"
  },
  "b-dd-form/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' on the form, triggering the native browser validation states",
    "type": "boolean"
  },
  "b-dd-form/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-dropdown-text/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dropdown-text/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dd-text/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dd-text/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dropdown-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dropdown-group/header": {
    "description": "Text content to place in the header",
    "type": "string"
  },
  "b-dropdown-group/header-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the header",
    "type": "string"
  },
  "b-dropdown-group/header-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header",
    "type": "string"
  },
  "b-dropdown-group/header-classes": {
    "description": "CSS class (or classes) to add to the header",
    "type": "string|any[]|object"
  },
  "b-dropdown-group/aria-describedby": {
    "description": "The ID of the element that provides additional context for this component. Used as the value for the 'aria-describedby' attribute",
    "type": "string"
  },
  "b-dd-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dd-group/header": {
    "description": "Text content to place in the header",
    "type": "string"
  },
  "b-dd-group/header-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the header",
    "type": "string"
  },
  "b-dd-group/header-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header",
    "type": "string"
  },
  "b-dd-group/header-classes": {
    "description": "CSS class (or classes) to add to the header",
    "type": "string|any[]|object"
  },
  "b-dd-group/aria-describedby": {
    "description": "The ID of the element that provides additional context for this component. Used as the value for the 'aria-describedby' attribute",
    "type": "string"
  },
  "b-dropdown-header/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dropdown-header/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dropdown-header/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-dd-header/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-dd-header/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-dd-header/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-embed/type": {
    "description": "Type of embed. Possible values are 'iframe', 'video', 'embed' and 'object'",
    "type": "string"
  },
  "b-embed/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-embed/aspect": {
    "description": "Aspect ratio of the embed. Supported values are '16by9', '21by9', '4by3', and '1by1' and are translated to CSS classes. Refer to the docs for more details",
    "type": "string"
  },
  "b-form/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form/inline": {
    "description": "When set, the form will be in inline mode which display labels, form controls, and buttons on a single horizontal row",
    "type": "boolean"
  },
  "b-form/novalidate": {
    "description": "When set, disables browser native HTML5 validation on controls in the form",
    "type": "boolean"
  },
  "b-form/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' on the form, triggering the native browser validation states",
    "type": "boolean"
  },
  "b-form-text/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-text/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-form-text/text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the text",
    "type": "string"
  },
  "b-form-text/inline": {
    "description": "When set, renders the help text as an inline element, rather than a block element",
    "type": "boolean"
  },
  "b-form-invalid-feedback/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-invalid-feedback/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-form-invalid-feedback/tooltip": {
    "description": "Renders the feedback text in a rudimentary tooltip style",
    "type": "boolean"
  },
  "b-form-invalid-feedback/force-show": {
    "description": "Shows the feedback text, regardless of the value of the 'state' prop",
    "type": "boolean"
  },
  "b-form-invalid-feedback/state": {
    "description": "When explicitly 'false', forces the feedback to show",
    "type": "boolean"
  },
  "b-form-invalid-feedback/aria-live": {
    "description": "When the rendered element is an aria-live region (for screen reader users), set to either 'polite' or 'assertive'",
    "type": "string"
  },
  "b-form-invalid-feedback/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-form-valid-feedback/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-valid-feedback/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-form-valid-feedback/tooltip": {
    "description": "Renders the feedback text in a rudimentary tooltip style",
    "type": "boolean"
  },
  "b-form-valid-feedback/force-show": {
    "description": "Shows the feedback text, regardless of the value of the 'state' prop",
    "type": "boolean"
  },
  "b-form-valid-feedback/state": {
    "description": "When explicitly 'true', forces the feedback to show",
    "type": "boolean"
  },
  "b-form-valid-feedback/aria-live": {
    "description": "When the rendered element is an aria-live region (for screen reader users), set to either 'polite' or 'assertive'",
    "type": "string"
  },
  "b-form-valid-feedback/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-form-datalist/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-form-datalist/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-form-datalist/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-form-datalist/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-form-datalist/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-form-datalist/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-datalist/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-datalist/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-datalist/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-datalist/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-datalist/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-datalist/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-checkbox-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-checkbox-group/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-checkbox-group/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-checkbox-group/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-checkbox-group/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-checkbox-group/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-checkbox-group/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' to the group wrapper",
    "type": "boolean"
  },
  "b-form-checkbox-group/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute value on the wrapper element. When not provided, the 'state' prop will control the attribute",
    "type": "boolean|string"
  },
  "b-form-checkbox-group/stacked": {
    "description": "When set, renders the checkbox group in stacked mode",
    "type": "boolean"
  },
  "b-form-checkbox-group/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-form-checkbox-group/buttons": {
    "description": "When set, renderes the checkboxes in this group with button styling",
    "type": "boolean"
  },
  "b-form-checkbox-group/button-variant": {
    "description": "Specifies the Bootstrap contextual color theme variant the apply to the button style checkboxes",
    "type": "string"
  },
  "b-form-checkbox-group/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-form-checkbox-group/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-form-checkbox-group/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-form-checkbox-group/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-form-checkbox-group/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-form-checkbox-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-checkbox-group/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-checkbox-group/switches": {
    "description": "When set, renders the checkboxes in the group with switch styling",
    "type": "boolean"
  },
  "b-form-checkbox-group/checked": {
    "description": "The current value of the checked checkboxes in the group. Must be an array when there are multiple checkboxes",
    "type": "any[]"
  },
  "b-checkbox-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-checkbox-group/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-checkbox-group/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-checkbox-group/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-checkbox-group/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-checkbox-group/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-checkbox-group/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' to the group wrapper",
    "type": "boolean"
  },
  "b-checkbox-group/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute value on the wrapper element. When not provided, the 'state' prop will control the attribute",
    "type": "boolean|string"
  },
  "b-checkbox-group/stacked": {
    "description": "When set, renders the checkbox group in stacked mode",
    "type": "boolean"
  },
  "b-checkbox-group/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-checkbox-group/buttons": {
    "description": "When set, renderes the checkboxes in this group with button styling",
    "type": "boolean"
  },
  "b-checkbox-group/button-variant": {
    "description": "Specifies the Bootstrap contextual color theme variant the apply to the button style checkboxes",
    "type": "string"
  },
  "b-checkbox-group/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-checkbox-group/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-checkbox-group/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-checkbox-group/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-checkbox-group/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-checkbox-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-checkbox-group/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-checkbox-group/switches": {
    "description": "When set, renders the checkboxes in the group with switch styling",
    "type": "boolean"
  },
  "b-checkbox-group/checked": {
    "description": "The current value of the checked checkboxes in the group. Must be an array when there are multiple checkboxes",
    "type": "any[]"
  },
  "b-check-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-check-group/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-check-group/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-check-group/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-check-group/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-check-group/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-check-group/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' to the group wrapper",
    "type": "boolean"
  },
  "b-check-group/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute value on the wrapper element. When not provided, the 'state' prop will control the attribute",
    "type": "boolean|string"
  },
  "b-check-group/stacked": {
    "description": "When set, renders the checkbox group in stacked mode",
    "type": "boolean"
  },
  "b-check-group/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-check-group/buttons": {
    "description": "When set, renderes the checkboxes in this group with button styling",
    "type": "boolean"
  },
  "b-check-group/button-variant": {
    "description": "Specifies the Bootstrap contextual color theme variant the apply to the button style checkboxes",
    "type": "string"
  },
  "b-check-group/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-check-group/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-check-group/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-check-group/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-check-group/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-check-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-check-group/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-check-group/switches": {
    "description": "When set, renders the checkboxes in the group with switch styling",
    "type": "boolean"
  },
  "b-check-group/checked": {
    "description": "The current value of the checked checkboxes in the group. Must be an array when there are multiple checkboxes",
    "type": "any[]"
  },
  "b-form-checkbox/value": {
    "description": "Value returned when this checkbox is checked",
    "type": "any"
  },
  "b-form-checkbox/checked": {
    "description": "The current value of the checkbox(es). Must be an array when there are multiple checkboxes bound to the same v-model",
    "type": "any"
  },
  "b-form-checkbox/inline": {
    "description": "When set, renders the checkbox as an inline element rather than as a 100% width block",
    "type": "boolean"
  },
  "b-form-checkbox/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-form-checkbox/button": {
    "description": "When set, renders the checkbox with the appearance of a button",
    "type": "boolean"
  },
  "b-form-checkbox/button-variant": {
    "description": "Applies on of Bootstrap's theme colors when in 'button' mode",
    "type": "string"
  },
  "b-form-checkbox/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-form-checkbox/aria-labelledby": {
    "description": "The ID of the element that provides a label for this component. Used as the value for the 'aria-labelledby' attribute",
    "type": "string"
  },
  "b-form-checkbox/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-checkbox/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-checkbox/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-checkbox/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-checkbox/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-checkbox/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-checkbox/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-checkbox/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-checkbox/unchecked-value": {
    "description": "Value returned when this checkbox is unchecked. Note not applicable when multiple checkboxes bound to the same v-model array",
    "type": "any"
  },
  "b-form-checkbox/indeterminate": {
    "description": "Renders the checkbox in an indeterminate state. Syncable via the .sync modifier",
    "type": "boolean"
  },
  "b-form-checkbox/switch": {
    "description": "When set, renders the checkbox with the appearance of a switch",
    "type": "boolean"
  },
  "b-checkbox/value": {
    "description": "Value returned when this checkbox is checked",
    "type": "any"
  },
  "b-checkbox/checked": {
    "description": "The current value of the checkbox(es). Must be an array when there are multiple checkboxes bound to the same v-model",
    "type": "any"
  },
  "b-checkbox/inline": {
    "description": "When set, renders the checkbox as an inline element rather than as a 100% width block",
    "type": "boolean"
  },
  "b-checkbox/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-checkbox/button": {
    "description": "When set, renders the checkbox with the appearance of a button",
    "type": "boolean"
  },
  "b-checkbox/button-variant": {
    "description": "Applies on of Bootstrap's theme colors when in 'button' mode",
    "type": "string"
  },
  "b-checkbox/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-checkbox/aria-labelledby": {
    "description": "The ID of the element that provides a label for this component. Used as the value for the 'aria-labelledby' attribute",
    "type": "string"
  },
  "b-checkbox/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-checkbox/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-checkbox/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-checkbox/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-checkbox/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-checkbox/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-checkbox/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-checkbox/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-checkbox/unchecked-value": {
    "description": "Value returned when this checkbox is unchecked. Note not applicable when multiple checkboxes bound to the same v-model array",
    "type": "any"
  },
  "b-checkbox/indeterminate": {
    "description": "Renders the checkbox in an indeterminate state. Syncable via the .sync modifier",
    "type": "boolean"
  },
  "b-checkbox/switch": {
    "description": "When set, renders the checkbox with the appearance of a switch",
    "type": "boolean"
  },
  "b-check/value": {
    "description": "Value returned when this checkbox is checked",
    "type": "any"
  },
  "b-check/checked": {
    "description": "The current value of the checkbox(es). Must be an array when there are multiple checkboxes bound to the same v-model",
    "type": "any"
  },
  "b-check/inline": {
    "description": "When set, renders the checkbox as an inline element rather than as a 100% width block",
    "type": "boolean"
  },
  "b-check/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-check/button": {
    "description": "When set, renders the checkbox with the appearance of a button",
    "type": "boolean"
  },
  "b-check/button-variant": {
    "description": "Applies on of Bootstrap's theme colors when in 'button' mode",
    "type": "string"
  },
  "b-check/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-check/aria-labelledby": {
    "description": "The ID of the element that provides a label for this component. Used as the value for the 'aria-labelledby' attribute",
    "type": "string"
  },
  "b-check/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-check/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-check/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-check/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-check/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-check/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-check/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-check/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-check/unchecked-value": {
    "description": "Value returned when this checkbox is unchecked. Note not applicable when multiple checkboxes bound to the same v-model array",
    "type": "any"
  },
  "b-check/indeterminate": {
    "description": "Renders the checkbox in an indeterminate state. Syncable via the .sync modifier",
    "type": "boolean"
  },
  "b-check/switch": {
    "description": "When set, renders the checkbox with the appearance of a switch",
    "type": "boolean"
  },
  "b-form-file/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-file/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-file/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-file/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-file/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-file/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-file/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-file/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-form-file/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-file/value": {
    "description": "The current value of the file input. Will be a single File object or an array of File objects (if multiple or directory is set). Can be set to null, or an empty array to reset the file input",
    "type": "File|any[]"
  },
  "b-form-file/accept": {
    "description": "Value to set on the file input's 'accept' attribute",
    "type": "string"
  },
  "b-form-file/capture": {
    "description": "When set, will instruction the browser to use the devices camera (if supported)",
    "type": "boolean"
  },
  "b-form-file/placeholder": {
    "description": "Sets the 'placeholder' attribute value on the form control",
    "type": "string"
  },
  "b-form-file/browse-text": {
    "description": "Text content for the file browse button",
    "type": "string"
  },
  "b-form-file/drop-placeholder": {
    "description": "Text to display as the placeholder when fies are being dragged",
    "type": "string"
  },
  "b-form-file/multiple": {
    "description": "When set, will allow multiple files to be selected. v-model will be an array",
    "type": "boolean"
  },
  "b-form-file/directory": {
    "description": "Enable directory drop mode (on browsers that support directory mode)",
    "type": "boolean"
  },
  "b-form-file/no-traverse": {
    "description": "For directory drop mode: returns files as a flat array",
    "type": "boolean"
  },
  "b-form-file/no-drop": {
    "description": "Disable drag and drop mode",
    "type": "boolean"
  },
  "b-form-file/file-name-formatter": {
    "description": "Method to format the file names for display. Refer to the docs for details",
    "type": "function"
  },
  "b-file/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-file/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-file/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-file/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-file/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-file/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-file/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-file/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-file/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-file/value": {
    "description": "The current value of the file input. Will be a single File object or an array of File objects (if multiple or directory is set). Can be set to null, or an empty array to reset the file input",
    "type": "File|any[]"
  },
  "b-file/accept": {
    "description": "Value to set on the file input's 'accept' attribute",
    "type": "string"
  },
  "b-file/capture": {
    "description": "When set, will instruction the browser to use the devices camera (if supported)",
    "type": "boolean"
  },
  "b-file/placeholder": {
    "description": "Sets the 'placeholder' attribute value on the form control",
    "type": "string"
  },
  "b-file/browse-text": {
    "description": "Text content for the file browse button",
    "type": "string"
  },
  "b-file/drop-placeholder": {
    "description": "Text to display as the placeholder when fies are being dragged",
    "type": "string"
  },
  "b-file/multiple": {
    "description": "When set, will allow multiple files to be selected. v-model will be an array",
    "type": "boolean"
  },
  "b-file/directory": {
    "description": "Enable directory drop mode (on browsers that support directory mode)",
    "type": "boolean"
  },
  "b-file/no-traverse": {
    "description": "For directory drop mode: returns files as a flat array",
    "type": "boolean"
  },
  "b-file/no-drop": {
    "description": "Disable drag and drop mode",
    "type": "boolean"
  },
  "b-file/file-name-formatter": {
    "description": "Method to format the file names for display. Refer to the docs for details",
    "type": "function"
  },
  "b-form-group/label": {
    "description": "Text to place in the label/legend of the form group",
    "type": "string"
  },
  "b-form-group/label-for": {
    "description": "Set to the ID of the singular form-control in the form-group. Do not set a value if there is more than one form control in the group.",
    "type": "string"
  },
  "b-form-group/label-size": {
    "description": "Sets the text size of the label: 'sm', 'md' (default) or 'lg'. Use this prop to have the label size match the form control size",
    "type": "string"
  },
  "b-form-group/label-sr-only": {
    "description": "Visually hides the label content, but makes it available to screen reader users",
    "type": "boolean"
  },
  "b-form-group/label-cols": {
    "description": "Number of columns for the label width xs screens and up",
    "type": "number|string|boolean"
  },
  "b-form-group/label-cols-sm": {
    "description": "Number of columns for the label width sm screens and up",
    "type": "number|string|boolean"
  },
  "b-form-group/label-cols-md": {
    "description": "Number of columns for the label width md screens and up",
    "type": "number|string|boolean"
  },
  "b-form-group/label-cols-lg": {
    "description": "Number of columns for the label width lg screens and up",
    "type": "number|string|boolean"
  },
  "b-form-group/label-cols-xl": {
    "description": "Number of columns for the label width xl screens and up",
    "type": "number|string|boolean"
  },
  "b-form-group/label-align": {
    "description": "Text alignment 'left', 'center', 'right' for the label xs screens and up",
    "type": "string"
  },
  "b-form-group/label-align-sm": {
    "description": "Text alignment 'left', 'center', 'right' for the label sm screens and up",
    "type": "string"
  },
  "b-form-group/label-align-md": {
    "description": "Text alignment 'left', 'center', 'right' for the label md screens and up",
    "type": "string"
  },
  "b-form-group/label-align-lg": {
    "description": "Text alignment 'left', 'center', 'right' for the label lg screens and up",
    "type": "string"
  },
  "b-form-group/label-align-xl": {
    "description": "Text alignment 'left', 'center', 'right' for the label xl screens and up",
    "type": "string"
  },
  "b-form-group/label-class": {
    "description": "CSS class (or classes) to add to the label/legend element",
    "type": "string|any[]|object"
  },
  "b-form-group/description": {
    "description": "Text to place in the help text area of the form group",
    "type": "string"
  },
  "b-form-group/invalid-feedback": {
    "description": "Text to show when the form group has an invalid state",
    "type": "string"
  },
  "b-form-group/valid-feedback": {
    "description": "Text to show when the form group has a valid state",
    "type": "string"
  },
  "b-form-group/tooltip": {
    "description": "Renders the feedback text in a rudimentary tooltip style",
    "type": "boolean"
  },
  "b-form-group/feedback-aria-live": {
    "description": "Value to use for the 'aria-live' attribute on the feedback text",
    "type": "string"
  },
  "b-form-group/validated": {
    "description": "When set, adds the Bootstrap validation trigger class 'was-validated' on the component",
    "type": "boolean"
  },
  "b-form-group/disabled": {
    "description": "Disabled the fieldset element, which in turn disables the form controls (on browsers that support disabled fieldsets). Has no effect if 'label-for' is set",
    "type": "boolean"
  },
  "b-form-input/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-input/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-input/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-input/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-input/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-input/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-input/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-input/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-input/value": {
    "description": "The current value of the input.  Result will always be a string, except when the 'number' prop is used",
    "type": "string|number"
  },
  "b-form-input/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute with the specified value",
    "type": "boolean|string"
  },
  "b-form-input/readonly": {
    "description": "Sets the 'readonly' attribute on hte form control",
    "type": "boolean"
  },
  "b-form-input/plaintext": {
    "description": "Set the form control as readonly and renders the control to look like plain text (no borders)",
    "type": "boolean"
  },
  "b-form-input/autocomplete": {
    "description": "Sets the 'autocomplete' attribute value on the form control",
    "type": "string"
  },
  "b-form-input/placeholder": {
    "description": "Sets the 'placeholder' attribute value on the form control",
    "type": "string"
  },
  "b-form-input/formatter": {
    "description": "reference to a function for formatting the input",
    "type": "function"
  },
  "b-form-input/lazy-formatter": {
    "description": "When set, the input is formatted on blur instead of each keystroke (if there is a formatter specified)",
    "type": "boolean"
  },
  "b-form-input/trim": {
    "description": "When set, trims any leading and trailing white space from the input value. Emulates the Vue '.trim' v-model modifier",
    "type": "boolean"
  },
  "b-form-input/number": {
    "description": "When set attempts to convert the input value to a native number. Emulates the Vue '.number' v-model modifier",
    "type": "boolean"
  },
  "b-form-input/lazy": {
    "description": "When set, updates the v-model on 'change'/'blur' events instead of 'input'. Emulates the Vue '.lazy' v-model modifier",
    "type": "boolean"
  },
  "b-form-input/debounce": {
    "description": "When set to a number of milliseconds greater than zero, will debounce the user input. Has no effect if prop 'lazy' is set",
    "type": "number|string"
  },
  "b-form-input/type": {
    "description": "The type of input to render. See the docs for supported types",
    "type": "string"
  },
  "b-form-input/no-wheel": {
    "description": "For number-like inputs, disables the mouse wheel from incrementing or decrementing the value",
    "type": "boolean"
  },
  "b-form-input/min": {
    "description": "Value to set in the 'min' attribute on the input. Used by number-like inputs",
    "type": "string|number"
  },
  "b-form-input/max": {
    "description": "Value to set in the 'max' attribute on the input. Used by number-like inputs",
    "type": "string|number"
  },
  "b-form-input/step": {
    "description": "Value to set in the 'step' attribute on the input. Used by number-like inputs",
    "type": "string|number"
  },
  "b-form-input/list": {
    "description": "The ID of the associated datalist element or component",
    "type": "string"
  },
  "b-input/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-input/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-input/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-input/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-input/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-input/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-input/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-input/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-input/value": {
    "description": "The current value of the input.  Result will always be a string, except when the 'number' prop is used",
    "type": "string|number"
  },
  "b-input/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute with the specified value",
    "type": "boolean|string"
  },
  "b-input/readonly": {
    "description": "Sets the 'readonly' attribute on hte form control",
    "type": "boolean"
  },
  "b-input/plaintext": {
    "description": "Set the form control as readonly and renders the control to look like plain text (no borders)",
    "type": "boolean"
  },
  "b-input/autocomplete": {
    "description": "Sets the 'autocomplete' attribute value on the form control",
    "type": "string"
  },
  "b-input/placeholder": {
    "description": "Sets the 'placeholder' attribute value on the form control",
    "type": "string"
  },
  "b-input/formatter": {
    "description": "reference to a function for formatting the input",
    "type": "function"
  },
  "b-input/lazy-formatter": {
    "description": "When set, the input is formatted on blur instead of each keystroke (if there is a formatter specified)",
    "type": "boolean"
  },
  "b-input/trim": {
    "description": "When set, trims any leading and trailing white space from the input value. Emulates the Vue '.trim' v-model modifier",
    "type": "boolean"
  },
  "b-input/number": {
    "description": "When set attempts to convert the input value to a native number. Emulates the Vue '.number' v-model modifier",
    "type": "boolean"
  },
  "b-input/lazy": {
    "description": "When set, updates the v-model on 'change'/'blur' events instead of 'input'. Emulates the Vue '.lazy' v-model modifier",
    "type": "boolean"
  },
  "b-input/debounce": {
    "description": "When set to a number of milliseconds greater than zero, will debounce the user input. Has no effect if prop 'lazy' is set",
    "type": "number|string"
  },
  "b-input/type": {
    "description": "The type of input to render. See the docs for supported types",
    "type": "string"
  },
  "b-input/no-wheel": {
    "description": "For number-like inputs, disables the mouse wheel from incrementing or decrementing the value",
    "type": "boolean"
  },
  "b-input/min": {
    "description": "Value to set in the 'min' attribute on the input. Used by number-like inputs",
    "type": "string|number"
  },
  "b-input/max": {
    "description": "Value to set in the 'max' attribute on the input. Used by number-like inputs",
    "type": "string|number"
  },
  "b-input/step": {
    "description": "Value to set in the 'step' attribute on the input. Used by number-like inputs",
    "type": "string|number"
  },
  "b-input/list": {
    "description": "The ID of the associated datalist element or component",
    "type": "string"
  },
  "b-form-radio-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-radio-group/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-radio-group/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-radio-group/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-radio-group/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-radio-group/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-radio-group/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' to the group wrapper",
    "type": "boolean"
  },
  "b-form-radio-group/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute value on the wrapper element. When not provided, the 'state' prop will control the attribute",
    "type": "boolean|string"
  },
  "b-form-radio-group/stacked": {
    "description": "When set, renders the radio group in stacked mode",
    "type": "boolean"
  },
  "b-form-radio-group/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-form-radio-group/buttons": {
    "description": "When set, renderes the radios in this group with button styling",
    "type": "boolean"
  },
  "b-form-radio-group/button-variant": {
    "description": "Specifies the Bootstrap contextual color theme variant the apply to the button style radios",
    "type": "string"
  },
  "b-form-radio-group/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-form-radio-group/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-form-radio-group/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-form-radio-group/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-form-radio-group/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-form-radio-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-radio-group/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-radio-group/checked": {
    "description": "The current value of the checked radio in the group",
    "type": "any"
  },
  "b-radio-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-radio-group/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-radio-group/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-radio-group/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-radio-group/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-radio-group/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-radio-group/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' to the group wrapper",
    "type": "boolean"
  },
  "b-radio-group/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute value on the wrapper element. When not provided, the 'state' prop will control the attribute",
    "type": "boolean|string"
  },
  "b-radio-group/stacked": {
    "description": "When set, renders the radio group in stacked mode",
    "type": "boolean"
  },
  "b-radio-group/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-radio-group/buttons": {
    "description": "When set, renderes the radios in this group with button styling",
    "type": "boolean"
  },
  "b-radio-group/button-variant": {
    "description": "Specifies the Bootstrap contextual color theme variant the apply to the button style radios",
    "type": "string"
  },
  "b-radio-group/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-radio-group/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-radio-group/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-radio-group/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-radio-group/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-radio-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-radio-group/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-radio-group/checked": {
    "description": "The current value of the checked radio in the group",
    "type": "any"
  },
  "b-form-radio/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-radio/value": {
    "description": "Value returned when this radio is checked",
    "type": "any"
  },
  "b-form-radio/checked": {
    "description": "The current value of the radio(s)",
    "type": "any"
  },
  "b-form-radio/inline": {
    "description": "When set, renders the radio as an inline element rather than as a 100% width block",
    "type": "boolean"
  },
  "b-form-radio/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-form-radio/button": {
    "description": "When set, renders the radio with the appearance of a button",
    "type": "boolean"
  },
  "b-form-radio/button-variant": {
    "description": "Applies on of Bootstrap's theme colors when in 'button' mode",
    "type": "string"
  },
  "b-form-radio/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-form-radio/aria-labelledby": {
    "description": "The ID of the element that provides a label for this component. Used as the value for the 'aria-labelledby' attribute",
    "type": "string"
  },
  "b-form-radio/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-radio/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-radio/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-radio/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-radio/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-radio/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-radio/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-radio/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-radio/value": {
    "description": "Value returned when this radio is checked",
    "type": "any"
  },
  "b-radio/checked": {
    "description": "The current value of the radio(s)",
    "type": "any"
  },
  "b-radio/inline": {
    "description": "When set, renders the radio as an inline element rather than as a 100% width block",
    "type": "boolean"
  },
  "b-radio/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-radio/button": {
    "description": "When set, renders the radio with the appearance of a button",
    "type": "boolean"
  },
  "b-radio/button-variant": {
    "description": "Applies on of Bootstrap's theme colors when in 'button' mode",
    "type": "string"
  },
  "b-radio/aria-label": {
    "description": "Sets the value of 'aria-label' attribute on the rendered element",
    "type": "string"
  },
  "b-radio/aria-labelledby": {
    "description": "The ID of the element that provides a label for this component. Used as the value for the 'aria-labelledby' attribute",
    "type": "string"
  },
  "b-radio/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-radio/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-radio/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-radio/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-radio/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-radio/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-radio/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-select/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-select/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-select/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-select/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-select/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-select/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-select/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-select/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-select/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-form-select/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-form-select/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-form-select/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-form-select/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-form-select/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-form-select/value": {
    "description": "Current value of the select. Should be set to an array when the 'multiple' prop is set",
    "type": "any"
  },
  "b-form-select/multiple": {
    "description": "When set, allows multiple options to be selected (multi-select)",
    "type": "boolean"
  },
  "b-form-select/select-size": {
    "description": "When set to a number larger than 0, will set the number of display option rows. Note not all browser will respect this setting",
    "type": "number"
  },
  "b-form-select/aria-invalid": {
    "description": "Optional value to set for the 'aria-invalid' attribute. Supported values are 'true' and 'false'. If not set, the 'state' prop will dictate the value",
    "type": "boolean|string"
  },
  "b-select/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-select/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-select/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-select/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-select/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-select/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-select/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-select/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-select/plain": {
    "description": "Render the form control in plain mode, rather than custom styled mode",
    "type": "boolean"
  },
  "b-select/options": {
    "description": "Array of items to render in the component",
    "type": "any[]|object"
  },
  "b-select/value-field": {
    "description": "Field name in the 'options' array that should be used for the value",
    "type": "string"
  },
  "b-select/text-field": {
    "description": "Field name in the 'options' array that should be used for the text label",
    "type": "string"
  },
  "b-select/html-field": {
    "description": "Field name in the 'options' array that should be used for the html label instead of text field. Use with caution.",
    "type": "string"
  },
  "b-select/disabled-field": {
    "description": "Field name in the 'options' array that should be used for the disabled state",
    "type": "string"
  },
  "b-select/value": {
    "description": "Current value of the select. Should be set to an array when the 'multiple' prop is set",
    "type": "any"
  },
  "b-select/multiple": {
    "description": "When set, allows multiple options to be selected (multi-select)",
    "type": "boolean"
  },
  "b-select/select-size": {
    "description": "When set to a number larger than 0, will set the number of display option rows. Note not all browser will respect this setting",
    "type": "number"
  },
  "b-select/aria-invalid": {
    "description": "Optional value to set for the 'aria-invalid' attribute. Supported values are 'true' and 'false'. If not set, the 'state' prop will dictate the value",
    "type": "boolean|string"
  },
  "b-form-textarea/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-form-textarea/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-form-textarea/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-form-textarea/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-form-textarea/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-form-textarea/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-form-textarea/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-form-textarea/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-form-textarea/value": {
    "description": "The current value of the textarea. Result will always be a string, except when the 'number' prop is used",
    "type": "string|number"
  },
  "b-form-textarea/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute with the specified value",
    "type": "boolean|string"
  },
  "b-form-textarea/readonly": {
    "description": "Sets the 'readonly' attribute on hte form control",
    "type": "boolean"
  },
  "b-form-textarea/plaintext": {
    "description": "Set the form control as readonly and renders the control to look like plain text (no borders)",
    "type": "boolean"
  },
  "b-form-textarea/autocomplete": {
    "description": "Sets the 'autocomplete' attribute value on the form control",
    "type": "string"
  },
  "b-form-textarea/placeholder": {
    "description": "Sets the 'placeholder' attribute value on the form control",
    "type": "string"
  },
  "b-form-textarea/formatter": {
    "description": "reference to a function for formatting the textarea",
    "type": "function"
  },
  "b-form-textarea/lazy-formatter": {
    "description": "When set, the textarea is formatted on blur instead of each keystroke (if there is a formatter specified)",
    "type": "boolean"
  },
  "b-form-textarea/trim": {
    "description": "When set, trims any leading and trailing white space from the input value. Emulates the Vue '.trim' v-model modifier",
    "type": "boolean"
  },
  "b-form-textarea/number": {
    "description": "When set attempts to convert the input value to a native number. Emulates the Vue '.number' v-model modifier",
    "type": "boolean"
  },
  "b-form-textarea/lazy": {
    "description": "When set, updates the v-model on 'change'/'blur' events instead of 'input'. Emulates the Vue '.lazy' v-model modifier",
    "type": "boolean"
  },
  "b-form-textarea/debounce": {
    "description": "When set to a number of milliseconds greater than zero, will debounce the user input. Has no effect if prop 'lazy' is set",
    "type": "number|string"
  },
  "b-form-textarea/rows": {
    "description": "The minimum number of rows to display. Must be a value greater than 1",
    "type": "number|string"
  },
  "b-form-textarea/max-rows": {
    "description": "The maximum number of rows to show. When provided, the textarea will grow (or shrink) to fit the content up to maximum rows",
    "type": "number|string"
  },
  "b-form-textarea/wrap": {
    "description": "The value to place on the textarea's 'wrap' attribute. Controls how line break are returned",
    "type": "string"
  },
  "b-form-textarea/no-resize": {
    "description": "When set, disabled the browser's resize handle which prevents the user from changing the height of the textarea. Automatically set when in auto height mode",
    "type": "boolean"
  },
  "b-form-textarea/no-auto-shrink": {
    "description": "When set, prevents the auto height textarea from shrinking to fit the content",
    "type": "boolean"
  },
  "b-textarea/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-textarea/name": {
    "description": "Sets the value of the 'name' attribute on the form control",
    "type": "string"
  },
  "b-textarea/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-textarea/required": {
    "description": "Adds the 'required' attribute to the form control",
    "type": "boolean"
  },
  "b-textarea/form": {
    "description": "ID of the form that the form control belongs to. Sets the 'form' attribute on the control",
    "type": "string"
  },
  "b-textarea/autofocus": {
    "description": "When set to 'true', attempts to auto-focus the control when it is mounted, or re-activated when in a keep-alive. Does not set the 'autofocus' attribute on the control",
    "type": "boolean"
  },
  "b-textarea/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-textarea/state": {
    "description": "Controls the validation state appearance of the component. 'true' for valid, 'false' for invalid', or 'null' for no validation state",
    "type": "boolean"
  },
  "b-textarea/value": {
    "description": "The current value of the textarea. Result will always be a string, except when the 'number' prop is used",
    "type": "string|number"
  },
  "b-textarea/aria-invalid": {
    "description": "Sets the 'aria-invalid' attribute with the specified value",
    "type": "boolean|string"
  },
  "b-textarea/readonly": {
    "description": "Sets the 'readonly' attribute on hte form control",
    "type": "boolean"
  },
  "b-textarea/plaintext": {
    "description": "Set the form control as readonly and renders the control to look like plain text (no borders)",
    "type": "boolean"
  },
  "b-textarea/autocomplete": {
    "description": "Sets the 'autocomplete' attribute value on the form control",
    "type": "string"
  },
  "b-textarea/placeholder": {
    "description": "Sets the 'placeholder' attribute value on the form control",
    "type": "string"
  },
  "b-textarea/formatter": {
    "description": "reference to a function for formatting the textarea",
    "type": "function"
  },
  "b-textarea/lazy-formatter": {
    "description": "When set, the textarea is formatted on blur instead of each keystroke (if there is a formatter specified)",
    "type": "boolean"
  },
  "b-textarea/trim": {
    "description": "When set, trims any leading and trailing white space from the input value. Emulates the Vue '.trim' v-model modifier",
    "type": "boolean"
  },
  "b-textarea/number": {
    "description": "When set attempts to convert the input value to a native number. Emulates the Vue '.number' v-model modifier",
    "type": "boolean"
  },
  "b-textarea/lazy": {
    "description": "When set, updates the v-model on 'change'/'blur' events instead of 'input'. Emulates the Vue '.lazy' v-model modifier",
    "type": "boolean"
  },
  "b-textarea/debounce": {
    "description": "When set to a number of milliseconds greater than zero, will debounce the user input. Has no effect if prop 'lazy' is set",
    "type": "number|string"
  },
  "b-textarea/rows": {
    "description": "The minimum number of rows to display. Must be a value greater than 1",
    "type": "number|string"
  },
  "b-textarea/max-rows": {
    "description": "The maximum number of rows to show. When provided, the textarea will grow (or shrink) to fit the content up to maximum rows",
    "type": "number|string"
  },
  "b-textarea/wrap": {
    "description": "The value to place on the textarea's 'wrap' attribute. Controls how line break are returned",
    "type": "string"
  },
  "b-textarea/no-resize": {
    "description": "When set, disabled the browser's resize handle which prevents the user from changing the height of the textarea. Automatically set when in auto height mode",
    "type": "boolean"
  },
  "b-textarea/no-auto-shrink": {
    "description": "When set, prevents the auto height textarea from shrinking to fit the content",
    "type": "boolean"
  },
  "b-img/src": {
    "description": "URL to set for the 'src' attribute",
    "type": "string"
  },
  "b-img/srcset": {
    "description": "One or more strings separated by commas (or an array of strings), indicating possible image sources for the user agent to use",
    "type": "string|any[]"
  },
  "b-img/sizes": {
    "description": "One or more strings separated by commas (or an array of strings), indicating a set of source sizes. Optionally used in combination with the srcset prop",
    "type": "string|any[]"
  },
  "b-img/alt": {
    "description": "Value to set for the 'alt' attribute",
    "type": "string"
  },
  "b-img/width": {
    "description": "The value to set on the image's 'width' attribute",
    "type": "number|string"
  },
  "b-img/height": {
    "description": "The value to set on the image's 'height' attribute",
    "type": "number|string"
  },
  "b-img/block": {
    "description": "Forces the image to display as a block element rather than the browser default of inline-block element",
    "type": "boolean"
  },
  "b-img/fluid": {
    "description": "Makes the image responsive. The image will shrink as needed or grow up the the image's native width",
    "type": "boolean"
  },
  "b-img/fluid-grow": {
    "description": "Similar to the 'fluid' prop, but allows the image to scale up past it's native width",
    "type": "boolean"
  },
  "b-img/rounded": {
    "description": "When set to 'true', makes the image corners slightly rounded. Can also be used to disable rounded corners or make the image a circle/oval. See docs for details",
    "type": "boolean|string"
  },
  "b-img/thumbnail": {
    "description": "Adds a thumbnail border around the image",
    "type": "boolean"
  },
  "b-img/left": {
    "description": "Floats the image to the left when set",
    "type": "boolean"
  },
  "b-img/right": {
    "description": "Floats the image to the right when set",
    "type": "boolean"
  },
  "b-img/center": {
    "description": "Centers the image horizontally",
    "type": "boolean"
  },
  "b-img/blank": {
    "description": "Creates a blank/transparent image via an SVG data URI",
    "type": "boolean"
  },
  "b-img/blank-color": {
    "description": "Sets the color of the blank image to the CSS color value specified",
    "type": "string"
  },
  "b-img-lazy/src": {
    "description": "URL to set for the 'src' attribute",
    "type": "string"
  },
  "b-img-lazy/srcset": {
    "description": "One or more strings separated by commas (or an array of strings), indicating possible image sources for the user agent to use",
    "type": "string|any[]"
  },
  "b-img-lazy/sizes": {
    "description": "One or more strings separated by commas (or an array of strings), indicating a set of source sizes. Optionally used in combination with the srcset prop",
    "type": "string|any[]"
  },
  "b-img-lazy/alt": {
    "description": "Value to set for the 'alt' attribute",
    "type": "string"
  },
  "b-img-lazy/width": {
    "description": "The value to set on the image's 'width' attribute",
    "type": "number|string"
  },
  "b-img-lazy/height": {
    "description": "The value to set on the image's 'height' attribute",
    "type": "number|string"
  },
  "b-img-lazy/blank-src": {
    "description": "Placeholder image instead of a blank image",
    "type": "string"
  },
  "b-img-lazy/blank-color": {
    "description": "Sets the color of the blank placeholder image to the CSS color value specified",
    "type": "string"
  },
  "b-img-lazy/blank-width": {
    "description": "The value to set on the placeholder image's 'width' attribute. Defaults to value of the 'width' prop",
    "type": "number|string"
  },
  "b-img-lazy/blank-height": {
    "description": "The value to set on the placeholder image's 'height' attribute. Defaults to value of the 'height' prop",
    "type": "number|string"
  },
  "b-img-lazy/show": {
    "description": "If set to true, will force show the image specified via the 'src' prop",
    "type": "boolean"
  },
  "b-img-lazy/fluid": {
    "description": "Makes the image responsive. The image will shrink as needed or grow up the the image's native width",
    "type": "boolean"
  },
  "b-img-lazy/fluid-grow": {
    "description": "Similar to the 'fluid' prop, but allows the image to scale up past it's native width",
    "type": "boolean"
  },
  "b-img-lazy/block": {
    "description": "Forces the image to display as a block element rather than the browser default of inline-block element",
    "type": "boolean"
  },
  "b-img-lazy/thumbnail": {
    "description": "Adds a thumbnail border around the image",
    "type": "boolean"
  },
  "b-img-lazy/rounded": {
    "description": "When set to 'true', makes the image corners slightly rounded. Can also be used to disable rounded corners or make the image a circle/oval. See docs for details",
    "type": "boolean|string"
  },
  "b-img-lazy/left": {
    "description": "Floats the image to the left when set",
    "type": "boolean"
  },
  "b-img-lazy/right": {
    "description": "Floats the image to the right when set",
    "type": "boolean"
  },
  "b-img-lazy/center": {
    "description": "Centers the image horizontally",
    "type": "boolean"
  },
  "b-img-lazy/offset": {
    "description": "Number of pixels away from the viewport edge before the lazy image is loaded",
    "type": "number|string"
  },
  "b-input-group/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-input-group/size": {
    "description": "Set the size of the component's appearance. 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-input-group/prepend": {
    "description": "Text to prepend to the input group",
    "type": "string"
  },
  "b-input-group/prepend-html": {
    "description": "HTML string to prepend to the input group. Has precedence over 'prepend' prop. Use with caution",
    "type": "string"
  },
  "b-input-group/append": {
    "description": "Text to append to the input group",
    "type": "string"
  },
  "b-input-group/append-html": {
    "description": "HTML string to append to the input group. Has precedence over 'append' prop. Use with caution",
    "type": "string"
  },
  "b-input-group/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-input-group-prepend/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-input-group-prepend/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-input-group-prepend/is-text": {
    "description": "When 'true', wraps the content in a b-input-group-text component",
    "type": "boolean"
  },
  "b-input-group-append/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-input-group-append/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-input-group-append/is-text": {
    "description": "When 'true', wraps the content in a b-input-group-text component",
    "type": "boolean"
  },
  "b-input-group-text/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-input-group-addon/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-input-group-addon/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-input-group-addon/is-text": {
    "description": "When 'true', wraps the content in a b-input-group-text component",
    "type": "boolean"
  },
  "b-input-group-addon/append": {
    "description": "When set to 'true' sets the addon as being appended. defaults to 'false' which is prepended",
    "type": "boolean"
  },
  "b-jumbotron/fluid": {
    "description": "Makes the jumbotron full width, and without rounded corners. When set, the inner content will automatically be wrapped into a 'b-container' (fixed width at the various breakpoints)",
    "type": "boolean"
  },
  "b-jumbotron/container-fluid": {
    "description": "When prop 'fluid' is set, this prop will make the inner container wrapper also fluid in width",
    "type": "boolean"
  },
  "b-jumbotron/header": {
    "description": "Text content to place in the header",
    "type": "string"
  },
  "b-jumbotron/header-html": {
    "description": "HTML string content to place in the header. Use with caution",
    "type": "string"
  },
  "b-jumbotron/header-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the header",
    "type": "string"
  },
  "b-jumbotron/header-level": {
    "description": "Scaling factor of hte header. Values range from 1 to 5",
    "type": "number|string"
  },
  "b-jumbotron/lead": {
    "description": "Text string to place in the lead paragraph",
    "type": "string"
  },
  "b-jumbotron/lead-html": {
    "description": "HTML string to place in the lead paragraph. Use with caution",
    "type": "string"
  },
  "b-jumbotron/lead-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the lead paragraph",
    "type": "string"
  },
  "b-jumbotron/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-jumbotron/bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the background",
    "type": "string"
  },
  "b-jumbotron/border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the border",
    "type": "string"
  },
  "b-jumbotron/text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the text",
    "type": "string"
  },
  "b-container/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-container/fluid": {
    "description": "When set, makes the row 100% wide all the time",
    "type": "boolean"
  },
  "b-row/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-row/no-gutters": {
    "description": "When set, removes the margin from the row and removes the padding from the child columns",
    "type": "boolean"
  },
  "b-row/align-v": {
    "description": "Vertical alignment of all columns in a row: 'start', 'center', or 'end'",
    "type": "string"
  },
  "b-row/align-h": {
    "description": "Horizontal alignment/spacing of all columns: 'start', 'center', 'end', 'around', or 'between'",
    "type": "string"
  },
  "b-row/align-content": {
    "description": "Align columns items together on the cross axis: 'start', 'center', 'end', 'around', 'between' or 'stretch'. Has no effect on single rows of items",
    "type": "string"
  },
  "b-col/col": {
    "description": "When true makes an equal width column grid cell spans for xs and up breakpoints",
    "type": "boolean"
  },
  "b-col/cols": {
    "description": "Number of columns the grid cell spans for xs and up breakpoints",
    "type": "string|number"
  },
  "b-col/sm": {
    "description": "Number of columns the grid cell spans for sm and up breakpoints",
    "type": "boolean|string|number"
  },
  "b-col/md": {
    "description": "Number of columns the grid cell spans for md and up breakpoints",
    "type": "boolean|string|number"
  },
  "b-col/lg": {
    "description": "Number of columns the grid cell spans for lg and up breakpoints",
    "type": "boolean|string|number"
  },
  "b-col/xl": {
    "description": "Number of columns the grid cell spans for xl and up breakpoints",
    "type": "boolean|string|number"
  },
  "b-col/offset": {
    "description": "Number of columns the grid cell is offset for xs and up breakpoints",
    "type": "string|number"
  },
  "b-col/offset-sm": {
    "description": "Number of columns the grid cell is offset for sm and up breakpoints",
    "type": "string|number"
  },
  "b-col/offset-md": {
    "description": "Number of columns the grid cell is offset for md and up breakpoints",
    "type": "string|number"
  },
  "b-col/offset-lg": {
    "description": "Number of columns the grid cell is offset for lg and up breakpoints",
    "type": "string|number"
  },
  "b-col/offset-xl": {
    "description": "Number of columns the grid cell is offset for xl and up breakpoints",
    "type": "string|number"
  },
  "b-col/order": {
    "description": "Flex order of the grid cell for xs and up breakpoints",
    "type": "string|number"
  },
  "b-col/order-sm": {
    "description": "Flex order of the grid cell for sm and up breakpoints",
    "type": "string|number"
  },
  "b-col/order-md": {
    "description": "Flex order of the grid cell for md and up breakpoints",
    "type": "string|number"
  },
  "b-col/order-lg": {
    "description": "Flex order of the grid cell for lg and up breakpoints",
    "type": "string|number"
  },
  "b-col/order-xl": {
    "description": "Flex order of the grid cell for xl and up breakpoints",
    "type": "string|number"
  },
  "b-col/align-self": {
    "description": "Vertical alignment of the grid cell with respect to the row: 'start', 'center', or 'end'",
    "type": "string"
  },
  "b-col/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-form-row/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-link/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-link/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-link/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-link/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-link/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-link/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-link/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-link/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-link/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-link/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-link/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-link/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-link/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-link/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-list-group/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-list-group/flush": {
    "description": "When set, renders a flush list group with no left and right borders",
    "type": "boolean"
  },
  "b-list-group/horizontal": {
    "description": "When set, renders the list-group horizontally rather than the default of vertical",
    "type": "boolean|string"
  },
  "b-list-group-item/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-list-group-item/action": {
    "description": "When set, give the item the appearance of having an action. Not needed when props 'to', 'href' or 'button' are used",
    "type": "boolean"
  },
  "b-list-group-item/button": {
    "description": "When true renders the list-group-item as a button element",
    "type": "boolean"
  },
  "b-list-group-item/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-list-group-item/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-list-group-item/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-list-group-item/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-list-group-item/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-list-group-item/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-list-group-item/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-list-group-item/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-list-group-item/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-list-group-item/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-list-group-item/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-list-group-item/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-list-group-item/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-list-group-item/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-list-group-item/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-media/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-media/right-align": {
    "description": "Render the 'aside' slot on the right. Default is on the left",
    "type": "boolean"
  },
  "b-media/vertical-align": {
    "description": "Vertical alignment of the 'aside' slot: 'start' (or 'top'), 'center', or 'end' (or 'bottom')",
    "type": "string"
  },
  "b-media/no-body": {
    "description": "When set, does not render a 'b-media-body' wrapper around the default slot content",
    "type": "boolean"
  },
  "b-media-aside/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-media-aside/vertical-align": {
    "description": "Vertical alignment of the aside: 'start' (or 'top'), 'center', or 'end' (or 'bottom')",
    "type": "string"
  },
  "b-media-body/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-modal/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-modal/size": {
    "description": "Set the size of the modal's width. 'sm', 'md' (default), 'lg', or 'xl'",
    "type": "string"
  },
  "b-modal/centered": {
    "description": "Vertically centers the modal in the viewport",
    "type": "boolean"
  },
  "b-modal/scrollable": {
    "description": "Enables scrolling of the modal body",
    "type": "boolean"
  },
  "b-modal/button-size": {
    "description": "Size of the built in footer buttons: 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-modal/no-stacking": {
    "description": "Prevents other modals from stacking over this one",
    "type": "boolean"
  },
  "b-modal/no-fade": {
    "description": "When set to 'true', disables the fade animation/transition on the component",
    "type": "boolean"
  },
  "b-modal/no-close-on-backdrop": {
    "description": "Disables the ability to close the modal by clicking the backdrop",
    "type": "boolean"
  },
  "b-modal/no-close-on-esc": {
    "description": "Disables the ability to close the modal by pressing ESC",
    "type": "boolean"
  },
  "b-modal/no-enforce-focus": {
    "description": "Disables the enforce focus routine which maintains focus inside the modal",
    "type": "boolean"
  },
  "b-modal/title": {
    "description": "Text content to place in the title",
    "type": "string"
  },
  "b-modal/title-html": {
    "description": "HTML string content to place in the title. Use with caution",
    "type": "string"
  },
  "b-modal/title-tag": {
    "description": "Specify the HTML tag to render instead of the default tag for the title",
    "type": "string"
  },
  "b-modal/title-class": {
    "description": "CSS class (or classes) to apply to the title",
    "type": "string|any[]|object"
  },
  "b-modal/title-sr-only": {
    "description": "Wraps the title in an '.sr-only' wrapper",
    "type": "boolean"
  },
  "b-modal/aria-label": {
    "description": "Explicitly supply an 'aria-label' attribute for the modal. Should be set when the modal has no title. When not set 'aria-labelledby' will point to the modal's title",
    "type": "string"
  },
  "b-modal/header-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header background",
    "type": "string"
  },
  "b-modal/header-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header border",
    "type": "string"
  },
  "b-modal/header-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the header text",
    "type": "string"
  },
  "b-modal/header-close-variant": {
    "description": "Text theme color variant to apply to the header close button",
    "type": "string"
  },
  "b-modal/header-class": {
    "description": "CSS class (or classes) to apply to the '.modal-header' wrapper element",
    "type": "string|any[]|object"
  },
  "b-modal/body-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body background",
    "type": "string"
  },
  "b-modal/body-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the body text",
    "type": "string"
  },
  "b-modal/modal-class": {
    "description": "CSS class (or classes) to apply to the '.modal' wrapper element",
    "type": "string|any[]|object"
  },
  "b-modal/dialog-class": {
    "description": "CSS class (or classes) to apply to the '.modal-dialog' wrapper element",
    "type": "string|any[]|object"
  },
  "b-modal/content-class": {
    "description": "CSS class (or classes) to apply to the '.modal-content' wrapper element",
    "type": "string|any[]|object"
  },
  "b-modal/body-class": {
    "description": "CSS class (or classes) to apply to the '.modal-body' wrapper element",
    "type": "string|any[]|object"
  },
  "b-modal/footer-bg-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer background",
    "type": "string"
  },
  "b-modal/footer-border-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer border",
    "type": "string"
  },
  "b-modal/footer-text-variant": {
    "description": "Applies one of the Bootstrap theme color variants to the footer text",
    "type": "string"
  },
  "b-modal/footer-class": {
    "description": "CSS class (or classes) to apply to the '.modal-footer' wrapper element",
    "type": "string|any[]|object"
  },
  "b-modal/hide-header": {
    "description": "Disables rendering of the modal header",
    "type": "boolean"
  },
  "b-modal/hide-footer": {
    "description": "Disables rendering of the modal footer",
    "type": "boolean"
  },
  "b-modal/hide-header-close": {
    "description": "Disables rendering of the modal header's close button",
    "type": "boolean"
  },
  "b-modal/hide-backdrop": {
    "description": "Disables rendering of the modal backdrop",
    "type": "boolean"
  },
  "b-modal/ok-only": {
    "description": "Disables rendering of the default footer Cancel button",
    "type": "boolean"
  },
  "b-modal/ok-disabled": {
    "description": "Places the default footer OK button in the disabled state",
    "type": "boolean"
  },
  "b-modal/cancel-disabled": {
    "description": "Places the default footer Cancel button in the disabled state",
    "type": "boolean"
  },
  "b-modal/visible": {
    "description": "The current visibility state of the modal",
    "type": "boolean"
  },
  "b-modal/return-focus": {
    "description": "HTML Element reference, CSS selector, or component reference to return focus to when the modal closes. When not set, will return focus to the element that last had focus before the modal opened",
    "type": "HTMLElement|string|object"
  },
  "b-modal/header-close-label": {
    "description": "Value of the 'aria-label' on the header close button",
    "type": "string"
  },
  "b-modal/cancel-title": {
    "description": "Text string to place in the default footer Cancel button",
    "type": "string"
  },
  "b-modal/cancel-title-html": {
    "description": "HTML string to place in the default footer Cancel button. Use with caution",
    "type": "string"
  },
  "b-modal/ok-title": {
    "description": "Text string to place in the default footer OK button",
    "type": "string"
  },
  "b-modal/ok-title-html": {
    "description": "HTML string to place in the default footer OK button. Use with caution",
    "type": "string"
  },
  "b-modal/cancel-variant": {
    "description": "Button color theme variant to apply to the default footer Cancel button",
    "type": "string"
  },
  "b-modal/ok-variant": {
    "description": "Button color theme variant to apply to the default footer OK button",
    "type": "string"
  },
  "b-modal/lazy": {
    "description": "When the modal has the `static` prop set, renders the modal content lazily",
    "type": "boolean"
  },
  "b-modal/busy": {
    "description": "Places the built in default footer OK and Cancel buttons in the disabled state",
    "type": "boolean"
  },
  "b-modal/static": {
    "description": "Renders the content of the component in-place in the DOM, rather than portalling it to be appended to the body element",
    "type": "boolean"
  },
  "b-modal/auto-focus-button": {
    "description": "Specify which built-in button to focus once the modal opens: 'ok', 'cancel', or 'close'",
    "type": "string"
  },
  "b-nav/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-nav/fill": {
    "description": "Proportionately fills all horizontal space with nav items. All horizontal space is occupied, but not every nav item has the same width",
    "type": "boolean"
  },
  "b-nav/justified": {
    "description": "Fills all horizontal space with nav items, but unlike 'fill', every nav item will be the same width",
    "type": "boolean"
  },
  "b-nav/align": {
    "description": "Align the nav items in the nav: 'start' (or 'left'), 'center', 'end' (or 'right')",
    "type": "string"
  },
  "b-nav/tabs": {
    "description": "Renders the nav items with the appearance of tabs",
    "type": "boolean"
  },
  "b-nav/pills": {
    "description": "Renders the nav items with the appearance of pill buttons",
    "type": "boolean"
  },
  "b-nav/vertical": {
    "description": "Renders the nav vertically",
    "type": "boolean"
  },
  "b-nav/small": {
    "description": "Makes the nav smaller",
    "type": "boolean"
  },
  "b-nav/card-header": {
    "description": "Set this prop when the nav is placed inside a card header",
    "type": "boolean"
  },
  "b-nav-item/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-nav-item/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-nav-item/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-nav-item/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-nav-item/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-nav-item/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-nav-item/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-nav-item/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-nav-item/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-nav-item/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-nav-item/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-nav-item/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-nav-item/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-nav-item/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-nav-item/link-attrs": {
    "description": "Additional attributes to place on the nested link element",
    "type": "object"
  },
  "b-nav-item/link-classes": {
    "description": "CSS class (or classes) to place on the nested link element",
    "type": "string|object|any[]"
  },
  "b-nav-form/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-nav-form/novalidate": {
    "description": "When set, disables browser native HTML5 validation on controls in the form",
    "type": "boolean"
  },
  "b-nav-form/validated": {
    "description": "When set, adds the Bootstrap class 'was-validated' on the form, triggering the native browser validation states",
    "type": "boolean"
  },
  "b-nav-form/form-class": {
    "description": "One of: string or any[] or object",
    "type": "string|any[]|object"
  },
  "b-nav-item-dropdown/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-nav-item-dropdown/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-nav-item-dropdown/text": {
    "description": "Text to place in the toggle button, or in the split button is split mode",
    "type": "string"
  },
  "b-nav-item-dropdown/html": {
    "description": "HTML string to place in the toggle button, or in the split button is split mode. Use with caution",
    "type": "string"
  },
  "b-nav-item-dropdown/dropup": {
    "description": "When set, positions the menu on the top of the button",
    "type": "boolean"
  },
  "b-nav-item-dropdown/dropright": {
    "description": "When set, positions the menu to the right of the button",
    "type": "boolean"
  },
  "b-nav-item-dropdown/dropleft": {
    "description": "When set, positions the menu to the left of the button",
    "type": "boolean"
  },
  "b-nav-item-dropdown/right": {
    "description": "Align the right edge of the menu with the right of the button",
    "type": "boolean"
  },
  "b-nav-item-dropdown/offset": {
    "description": "One of: number or string",
    "type": "number|string"
  },
  "b-nav-item-dropdown/no-flip": {
    "description": "Prevent the menu from auto flipping positions",
    "type": "boolean"
  },
  "b-nav-item-dropdown/lazy": {
    "description": "When set, will only mount the menu content into the DOM when the menu is open",
    "type": "boolean"
  },
  "b-nav-item-dropdown/popper-opts": {
    "description": "Additional configuration to pass to Popper.js",
    "type": "any"
  },
  "b-nav-item-dropdown/menu-class": {
    "description": "CSS class (or classes) to add to the menu container",
    "type": "string|any[]"
  },
  "b-nav-item-dropdown/toggle-class": {
    "description": "CSS class (or classes) to add to the toggle button",
    "type": "string|any[]"
  },
  "b-nav-item-dropdown/no-caret": {
    "description": "Hide the caret indicator on the toggle button",
    "type": "boolean"
  },
  "b-nav-item-dropdown/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-nav-item-dd/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-nav-item-dd/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-nav-item-dd/text": {
    "description": "Text to place in the toggle button, or in the split button is split mode",
    "type": "string"
  },
  "b-nav-item-dd/html": {
    "description": "HTML string to place in the toggle button, or in the split button is split mode. Use with caution",
    "type": "string"
  },
  "b-nav-item-dd/dropup": {
    "description": "When set, positions the menu on the top of the button",
    "type": "boolean"
  },
  "b-nav-item-dd/dropright": {
    "description": "When set, positions the menu to the right of the button",
    "type": "boolean"
  },
  "b-nav-item-dd/dropleft": {
    "description": "When set, positions the menu to the left of the button",
    "type": "boolean"
  },
  "b-nav-item-dd/right": {
    "description": "Align the right edge of the menu with the right of the button",
    "type": "boolean"
  },
  "b-nav-item-dd/offset": {
    "description": "One of: number or string",
    "type": "number|string"
  },
  "b-nav-item-dd/no-flip": {
    "description": "Prevent the menu from auto flipping positions",
    "type": "boolean"
  },
  "b-nav-item-dd/lazy": {
    "description": "When set, will only mount the menu content into the DOM when the menu is open",
    "type": "boolean"
  },
  "b-nav-item-dd/popper-opts": {
    "description": "Additional configuration to pass to Popper.js",
    "type": "any"
  },
  "b-nav-item-dd/menu-class": {
    "description": "CSS class (or classes) to add to the menu container",
    "type": "string|any[]"
  },
  "b-nav-item-dd/toggle-class": {
    "description": "CSS class (or classes) to add to the toggle button",
    "type": "string|any[]"
  },
  "b-nav-item-dd/no-caret": {
    "description": "Hide the caret indicator on the toggle button",
    "type": "boolean"
  },
  "b-nav-item-dd/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-nav-dropdown/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-nav-dropdown/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-nav-dropdown/text": {
    "description": "Text to place in the toggle button, or in the split button is split mode",
    "type": "string"
  },
  "b-nav-dropdown/html": {
    "description": "HTML string to place in the toggle button, or in the split button is split mode. Use with caution",
    "type": "string"
  },
  "b-nav-dropdown/dropup": {
    "description": "When set, positions the menu on the top of the button",
    "type": "boolean"
  },
  "b-nav-dropdown/dropright": {
    "description": "When set, positions the menu to the right of the button",
    "type": "boolean"
  },
  "b-nav-dropdown/dropleft": {
    "description": "When set, positions the menu to the left of the button",
    "type": "boolean"
  },
  "b-nav-dropdown/right": {
    "description": "Align the right edge of the menu with the right of the button",
    "type": "boolean"
  },
  "b-nav-dropdown/offset": {
    "description": "One of: number or string",
    "type": "number|string"
  },
  "b-nav-dropdown/no-flip": {
    "description": "Prevent the menu from auto flipping positions",
    "type": "boolean"
  },
  "b-nav-dropdown/lazy": {
    "description": "When set, will only mount the menu content into the DOM when the menu is open",
    "type": "boolean"
  },
  "b-nav-dropdown/popper-opts": {
    "description": "Additional configuration to pass to Popper.js",
    "type": "any"
  },
  "b-nav-dropdown/menu-class": {
    "description": "CSS class (or classes) to add to the menu container",
    "type": "string|any[]"
  },
  "b-nav-dropdown/toggle-class": {
    "description": "CSS class (or classes) to add to the toggle button",
    "type": "string|any[]"
  },
  "b-nav-dropdown/no-caret": {
    "description": "Hide the caret indicator on the toggle button",
    "type": "boolean"
  },
  "b-nav-dropdown/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-nav-dd/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-nav-dd/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-nav-dd/text": {
    "description": "Text to place in the toggle button, or in the split button is split mode",
    "type": "string"
  },
  "b-nav-dd/html": {
    "description": "HTML string to place in the toggle button, or in the split button is split mode. Use with caution",
    "type": "string"
  },
  "b-nav-dd/dropup": {
    "description": "When set, positions the menu on the top of the button",
    "type": "boolean"
  },
  "b-nav-dd/dropright": {
    "description": "When set, positions the menu to the right of the button",
    "type": "boolean"
  },
  "b-nav-dd/dropleft": {
    "description": "When set, positions the menu to the left of the button",
    "type": "boolean"
  },
  "b-nav-dd/right": {
    "description": "Align the right edge of the menu with the right of the button",
    "type": "boolean"
  },
  "b-nav-dd/offset": {
    "description": "One of: number or string",
    "type": "number|string"
  },
  "b-nav-dd/no-flip": {
    "description": "Prevent the menu from auto flipping positions",
    "type": "boolean"
  },
  "b-nav-dd/lazy": {
    "description": "When set, will only mount the menu content into the DOM when the menu is open",
    "type": "boolean"
  },
  "b-nav-dd/popper-opts": {
    "description": "Additional configuration to pass to Popper.js",
    "type": "any"
  },
  "b-nav-dd/menu-class": {
    "description": "CSS class (or classes) to add to the menu container",
    "type": "string|any[]"
  },
  "b-nav-dd/toggle-class": {
    "description": "CSS class (or classes) to add to the toggle button",
    "type": "string|any[]"
  },
  "b-nav-dd/no-caret": {
    "description": "Hide the caret indicator on the toggle button",
    "type": "boolean"
  },
  "b-nav-dd/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-navbar/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-navbar/type": {
    "description": "Control the text color by setting to 'light' for use with light background color variants, or 'dark' for dark background color variants",
    "type": "string"
  },
  "b-navbar/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-navbar/toggleable": {
    "description": "Set to 'true' for an always collapsed navbar, or to a specific breakpoint at which point the navbar will be expanded: 'sm', 'md', 'lg' or 'xl'",
    "type": "boolean|string"
  },
  "b-navbar/fixed": {
    "description": "Set to 'top' for fixed to the top of the viewport, or 'bottom' for fixed to the bottom of the viewport",
    "type": "string"
  },
  "b-navbar/sticky": {
    "description": "Set to true to make the navbar stick to the top of the viewport (or parent container that has 'position: relative' set) when scrolled",
    "type": "boolean"
  },
  "b-navbar/print": {
    "description": "Navbars are hidden by default when printing. When this prop is set it will be printed",
    "type": "boolean"
  },
  "b-navbar-nav/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-navbar-nav/fill": {
    "description": "Proportionately fills all horizontal space with nav items. All horizontal space is occupied, but not every nav item has the same width",
    "type": "boolean"
  },
  "b-navbar-nav/justified": {
    "description": "Fills all horizontal space with nav items, but unlike 'fill', every nav item will be the same width",
    "type": "boolean"
  },
  "b-navbar-nav/align": {
    "description": "Align the nav items in the nav: 'start' (or 'left'), 'center', 'end' (or 'right')",
    "type": "string"
  },
  "b-navbar-nav/small": {
    "description": "Makes the nav smaller",
    "type": "boolean"
  },
  "b-navbar-brand/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-navbar-brand/rel": {
    "description": "Sets the 'rel' attribute on the rendered link",
    "type": "string"
  },
  "b-navbar-brand/target": {
    "description": "Sets the 'target' attribute on the rendered link",
    "type": "string"
  },
  "b-navbar-brand/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-navbar-brand/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-navbar-brand/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-navbar-brand/append": {
    "description": "router-link prop: Setting append prop always appends the relative path to the current path",
    "type": "boolean"
  },
  "b-navbar-brand/replace": {
    "description": "router-link prop: Setting the replace prop will call 'router.replace()' instead of 'router.push()' when clicked, so the navigation will not leave a history record",
    "type": "boolean"
  },
  "b-navbar-brand/event": {
    "description": "router-link prop: Specify the event that triggers the link. In most cases you should leave this as the default",
    "type": "string|any[]"
  },
  "b-navbar-brand/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-navbar-brand/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-navbar-brand/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-navbar-brand/router-tag": {
    "description": "router-link prop: Specify which tag to render, and it will still listen to click events for navigation. 'router-tag' translates to the tag prop on the final rendered router-link. Typically you should use the default value",
    "type": "string"
  },
  "b-navbar-brand/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-navbar-brand/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-navbar-toggle/label": {
    "description": "String to place in the toggle's 'aria-label' attribute",
    "type": "string"
  },
  "b-navbar-toggle/target": {
    "description": "ID of the collapse the toggle controls",
    "type": "string"
  },
  "b-nav-toggle/label": {
    "description": "String to place in the toggle's 'aria-label' attribute",
    "type": "string"
  },
  "b-nav-toggle/target": {
    "description": "ID of the collapse the toggle controls",
    "type": "string"
  },
  "b-pagination/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-pagination/value": {
    "description": "Current page number, starting from 1",
    "type": "number|string"
  },
  "b-pagination/limit": {
    "description": "Maximum number of buttons to show (including ellipsis if shown, but excluding the bookend buttons)",
    "type": "number|string"
  },
  "b-pagination/align": {
    "description": "Alignment of the page buttons: 'start' (or 'left'), 'center', 'end' (or 'right'), or 'fill'",
    "type": "string"
  },
  "b-pagination/pills": {
    "description": "Applies pill styling to the pagination buttons",
    "type": "boolean"
  },
  "b-pagination/hide-goto-end-buttons": {
    "description": "Hides the goto first and goto last page buttons",
    "type": "boolean"
  },
  "b-pagination/aria-label": {
    "description": "Value to place in the 'aria-label' attribute of the pagination control",
    "type": "string"
  },
  "b-pagination/label-first-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto first page button",
    "type": "string"
  },
  "b-pagination/first-text": {
    "description": "Content to place in the goto first page button",
    "type": "string"
  },
  "b-pagination/label-prev-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto previous page button",
    "type": "string"
  },
  "b-pagination/prev-text": {
    "description": "Content to place in the goto previous page button",
    "type": "string"
  },
  "b-pagination/label-next-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto next page button",
    "type": "string"
  },
  "b-pagination/next-text": {
    "description": "Content to place in the goto next page button",
    "type": "string"
  },
  "b-pagination/label-last-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto last page button",
    "type": "string"
  },
  "b-pagination/last-text": {
    "description": "Content to place in the goto last page button",
    "type": "string"
  },
  "b-pagination/label-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto page button. Page number will be prepended automatically",
    "type": "string|function"
  },
  "b-pagination/hide-ellipsis": {
    "description": "Do not show ellipsis buttons",
    "type": "boolean"
  },
  "b-pagination/ellipsis-text": {
    "description": "One of: string",
    "type": "string"
  },
  "b-pagination/size": {
    "description": "Size of the rendered buttons: 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-pagination/per-page": {
    "description": "Number of rows per page",
    "type": "number|string"
  },
  "b-pagination/total-rows": {
    "description": "Total number of rows in the dataset",
    "type": "number|string"
  },
  "b-pagination/aria-controls": {
    "description": "ID of the element or component that this controls. Value is placed in the 'aria-controls' attribute",
    "type": "string"
  },
  "b-pagination-nav/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-pagination-nav/value": {
    "description": "Current page number, starting from 1",
    "type": "number|string"
  },
  "b-pagination-nav/limit": {
    "description": "Maximum number of buttons to show (including ellipsis if shown, but excluding the bookend buttons)",
    "type": "number|string"
  },
  "b-pagination-nav/align": {
    "description": "Alignment of the page buttons: 'start' (or 'left'), 'center', 'end' (or 'right'), or 'fill'",
    "type": "string"
  },
  "b-pagination-nav/pills": {
    "description": "Applies pill styling to the pagination buttons",
    "type": "boolean"
  },
  "b-pagination-nav/hide-goto-end-buttons": {
    "description": "Hides the goto first and goto last page buttons",
    "type": "boolean"
  },
  "b-pagination-nav/aria-label": {
    "description": "Value to place in the 'aria-label' attribute of the pagination control",
    "type": "string"
  },
  "b-pagination-nav/label-first-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto first page button",
    "type": "string"
  },
  "b-pagination-nav/first-text": {
    "description": "Content to place in the goto first page button",
    "type": "string"
  },
  "b-pagination-nav/label-prev-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto previous page button",
    "type": "string"
  },
  "b-pagination-nav/prev-text": {
    "description": "Content to place in the goto previous page button",
    "type": "string"
  },
  "b-pagination-nav/label-next-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto next page button",
    "type": "string"
  },
  "b-pagination-nav/next-text": {
    "description": "Content to place in the goto next page button",
    "type": "string"
  },
  "b-pagination-nav/label-last-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto last page button",
    "type": "string"
  },
  "b-pagination-nav/last-text": {
    "description": "Content to place in the goto last page button",
    "type": "string"
  },
  "b-pagination-nav/label-page": {
    "description": "Value to place in the 'aria-label' attribute of the goto page button. Page number will be prepended automatically",
    "type": "string|function"
  },
  "b-pagination-nav/hide-ellipsis": {
    "description": "Do not show ellipsis buttons",
    "type": "boolean"
  },
  "b-pagination-nav/ellipsis-text": {
    "description": "One of: string",
    "type": "string"
  },
  "b-pagination-nav/size": {
    "description": "Size of the rendered buttons: 'sm', 'md' (default), or 'lg'",
    "type": "string"
  },
  "b-pagination-nav/number-of-pages": {
    "description": "Total number of pages",
    "type": "number|string"
  },
  "b-pagination-nav/base-url": {
    "description": "Base URL to use when auto generating page links",
    "type": "string"
  },
  "b-pagination-nav/use-router": {
    "description": "Render router-links instead of links when auto generating the page links",
    "type": "boolean"
  },
  "b-pagination-nav/link-gen": {
    "description": "Link generator function. See docs for details",
    "type": "function"
  },
  "b-pagination-nav/page-gen": {
    "description": "page number generator function. See docs for details",
    "type": "function"
  },
  "b-pagination-nav/pages": {
    "description": "Array of page numbers and links",
    "type": "any[]"
  },
  "b-pagination-nav/no-page-detect": {
    "description": "Disable of auto detection of current page",
    "type": "boolean"
  },
  "b-pagination-nav/active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-pagination-nav/exact": {
    "description": "router-link prop: The default active class matching behavior is inclusive match. Setting this prop forces the mode to exactly match the route",
    "type": "boolean"
  },
  "b-pagination-nav/exact-active-class": {
    "description": "router-link prop: Configure the active CSS class applied when the link is active with exact match. Typically you will want to set this to class name 'active'",
    "type": "string"
  },
  "b-pagination-nav/no-prefetch": {
    "description": "nuxt-link prop: To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within the viewport, Nuxt.js will automatically prefetch the code splitted page. Setting 'no-prefetch' will disabled this feature for the specific link",
    "type": "boolean"
  },
  "b-popover/title": {
    "description": "Text to place in the popovers title",
    "type": "string"
  },
  "b-popover/target": {
    "description": "Element string ID, or a reference to an element or component, that you want to trigger the popover.",
    "type": "string|HTMLElement|SVGElement|function|object"
  },
  "b-popover/triggers": {
    "description": "Specify which triggers will show the popover. Supported values are 'click', 'hover', 'focus'. Refer to the docs for special triggers 'blur' and 'manual'",
    "type": "string|any[]"
  },
  "b-popover/placement": {
    "description": "Placement of the popover: One of 'top', 'bottom', 'right', 'left', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom', 'right-top', 'right-bottom'",
    "type": "string"
  },
  "b-popover/fallback-placement": {
    "description": "placement to use when the popover would be out of boundaries. Refer to the docs for more details",
    "type": "string|any[]"
  },
  "b-popover/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-popover/custom-class": {
    "description": "CSS class (or classes) to apply to the popover's root element",
    "type": "string"
  },
  "b-popover/delay": {
    "description": "Value for the show and hide delay. Applies to both show and hide when specified as a number or string. Use object form to set show and hide delays individually",
    "type": "number|object|string"
  },
  "b-popover/boundary": {
    "description": "The boundary constraint of the popover: 'scrollParent', 'window', 'viewport', or a reference to an HTMLElement or component",
    "type": "string|HTMLElement|object"
  },
  "b-popover/boundary-padding": {
    "description": "The popover will try and stay away from the edge of the boundary element by the number of pixels specified",
    "type": "number|string"
  },
  "b-popover/offset": {
    "description": "Offset (in pixels) for the arrow center compared to the trigger target element",
    "type": "number|string"
  },
  "b-popover/no-fade": {
    "description": "When set to 'true', disables the fade animation/transition on the component",
    "type": "boolean"
  },
  "b-popover/container": {
    "description": "The container element to append the rendered popover when visible. Default's to the body element",
    "type": "string|HTMLElement|object"
  },
  "b-popover/show": {
    "description": "When set will show the popover",
    "type": "boolean"
  },
  "b-popover/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-popover/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-popover/content": {
    "description": "Text to place in the body of the popover",
    "type": "string"
  },
  "b-progress/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-progress/striped": {
    "description": "Enable the striped background",
    "type": "boolean"
  },
  "b-progress/animated": {
    "description": "Enable the animated background. Also automatically sets 'striped'",
    "type": "boolean"
  },
  "b-progress/height": {
    "description": "Override the default height by specifying a CSS height value (including units)",
    "type": "string"
  },
  "b-progress/precision": {
    "description": "The number of digits after the decimal to round the value to",
    "type": "number"
  },
  "b-progress/show-progress": {
    "description": "Displays the current progress value as a percentage",
    "type": "boolean"
  },
  "b-progress/show-value": {
    "description": "Displays the current progress value",
    "type": "boolean"
  },
  "b-progress/max": {
    "description": "Set the maximum value",
    "type": "number"
  },
  "b-progress/value": {
    "description": "The current value of the progress bar",
    "type": "number"
  },
  "b-progress-bar/value": {
    "description": "The current value of the progress bar",
    "type": "number"
  },
  "b-progress-bar/label": {
    "description": "Text string to explicitly set the label as",
    "type": "string"
  },
  "b-progress-bar/label-html": {
    "description": "HTML string to explicitly set the label as. Use with caution",
    "type": "string"
  },
  "b-progress-bar/max": {
    "description": "Set the maximum value",
    "type": "number"
  },
  "b-progress-bar/precision": {
    "description": "The number of digits after the decimal to round the value to",
    "type": "number"
  },
  "b-progress-bar/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-progress-bar/striped": {
    "description": "Enable the striped background",
    "type": "boolean"
  },
  "b-progress-bar/animated": {
    "description": "Enable the animated background. Also automatically sets 'striped'",
    "type": "boolean"
  },
  "b-progress-bar/show-progress": {
    "description": "Displays the current progress value as a percentage",
    "type": "boolean"
  },
  "b-progress-bar/show-value": {
    "description": "Displays the current progress value",
    "type": "boolean"
  },
  "b-spinner/type": {
    "description": "Type of spinner to show. Current supported types are 'border' and 'grow'",
    "type": "string"
  },
  "b-spinner/label": {
    "description": "Text content to place in the sr-only label",
    "type": "string"
  },
  "b-spinner/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-spinner/small": {
    "description": "When set, rendered a smaller spinner suitable for placing in buttons",
    "type": "boolean"
  },
  "b-spinner/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-spinner/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-table/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-table/items": {
    "description": "Array of items to display, or an items provider function reference. Refer to the docs for details",
    "type": "any[]|function"
  },
  "b-table/fields": {
    "description": "Array of field names or array of field definition objects",
    "type": "any[]"
  },
  "b-table/primary-key": {
    "description": "Name of a table field that contains a guaranteed unique value per row. Needed for tbody transition support, and also speeds up table rendering",
    "type": "string"
  },
  "b-table/value": {
    "description": "Currently displayed row data. Read-only. Do not set a value on this prop",
    "type": "any[]"
  },
  "b-table/striped": {
    "description": "Applies striping to the tbody rows",
    "type": "boolean"
  },
  "b-table/bordered": {
    "description": "Adds borders to all the cells and headers",
    "type": "boolean"
  },
  "b-table/borderless": {
    "description": "Removes all borders from cells",
    "type": "boolean"
  },
  "b-table/outlined": {
    "description": "Adds an outline border to the table element",
    "type": "boolean"
  },
  "b-table/dark": {
    "description": "Places the table in dark mode",
    "type": "boolean"
  },
  "b-table/hover": {
    "description": "Enables hover styling on rows",
    "type": "boolean"
  },
  "b-table/small": {
    "description": "Renders the table with smaller cell padding",
    "type": "boolean"
  },
  "b-table/fixed": {
    "description": "Makes all columns equal width (fixed layout table). Will speed up rendering for large tables. Column widths can be set via CSS or colgroup",
    "type": "boolean"
  },
  "b-table/responsive": {
    "description": "Makes the table responsive in width, adding a horizontal scrollbar. Set to true for always responsive or set to one of the breakpoints to switch from responsive to normal: 'sm', 'md', 'lg', 'xl'",
    "type": "boolean|string"
  },
  "b-table/sticky-header": {
    "description": "Makes the table header sticky. Set to true for a maximum height 300px tall table, or set to any valid CSS hight (including units)",
    "type": "boolean|string"
  },
  "b-table/no-border-collapse": {
    "description": "Disable's the collapsing of table borders. Useful when table has sticky headers or columns",
    "type": "boolean"
  },
  "b-table/caption-top": {
    "description": "Visually place the table caption above the table. Default is below.",
    "type": "boolean"
  },
  "b-table/table-variant": {
    "description": "Apply a Bootstrap theme color variant to the entire table",
    "type": "string"
  },
  "b-table/table-class": {
    "description": "CSS class (or classes) to apply to the table element",
    "type": "string|any[]|object"
  },
  "b-table/stacked": {
    "description": "Place the table in stacked mode. Set to true for always stacked, or set to one of the breakpoints to switch from stacked to normal: 'sm', 'md', 'lg', 'xl'",
    "type": "boolean|string"
  },
  "b-table/head-variant": {
    "description": "Header variant: 'light' or 'dark', or unset. May take precedence over head-row-variant",
    "type": "string"
  },
  "b-table/head-row-variant": {
    "description": "Apply a Bootstrap theme color variant to the tr element in the thead",
    "type": "string"
  },
  "b-table/thead-class": {
    "description": "CSS class (or classes) to apply to the thead element",
    "type": "string|any[]|object"
  },
  "b-table/thead-tr-class": {
    "description": "CSS class (or classes) to apply to the tr element in the thead",
    "type": "string|any[]|object"
  },
  "b-table/foot-clone": {
    "description": "Enable to the footer of the table, and clone the header content by default",
    "type": "boolean"
  },
  "b-table/foot-variant": {
    "description": "Footer variant: 'light' or 'dark', or unset. May take precedence over foot-row-variant",
    "type": "string"
  },
  "b-table/foot-row-variant": {
    "description": "Apply a Bootstrap theme color variant to the tr element in the tfoot. Falls back to head-row-variant",
    "type": "string"
  },
  "b-table/tfoot-class": {
    "description": "CSS class (or classes) to apply to the tfoot element",
    "type": "string|any[]|object"
  },
  "b-table/tfoot-tr-class": {
    "description": "CSS class (or classes) to apply to the tr element in the tfoot",
    "type": "string|any[]|object"
  },
  "b-table/tbody-tr-class": {
    "description": "CSS class (or classes) to apply to the tr element in the tbody. Can be a function that returns a class (see docs for details)",
    "type": "string|any[]|object|function"
  },
  "b-table/details-td-class": {
    "description": "CSS class (or classes) to apply to the td element in the details row",
    "type": "string|any[]|object"
  },
  "b-table/tbody-transition-props": {
    "description": "Vue 'transition-group' properties. When provided will make the tbody a Vue 'transition-group' component",
    "type": "object"
  },
  "b-table/tbody-transition-handlers": {
    "description": "Vue 'transition-group' event handlers. When provided will make the tbody a Vue 'transition-group' component",
    "type": "object"
  },
  "b-table/tbody-class": {
    "description": "CSS class (or classes) to apply to the tbody element",
    "type": "string|any[]|object"
  },
  "b-table/filter": {
    "description": "Criteria for filtering. Internal filtering supports only string or RegExpr criteria.",
    "type": "string|RegExp|object|any[]"
  },
  "b-table/filter-function": {
    "description": "Reference to a function to use instead of the internal filtering function. Refer to the docs for details",
    "type": "function"
  },
  "b-table/filter-ignored-fields": {
    "description": "Array of top level fields to ignore when filtering the item data",
    "type": "any[]"
  },
  "b-table/filter-included-fields": {
    "description": "Array of fields to include when filtering. Overrides filter-ignore-fields",
    "type": "any[]"
  },
  "b-table/filter-debounce": {
    "description": "Time in milliseconds to debounce changes to the filter criteria before filtering the records",
    "type": "number|string"
  },
  "b-table/sort-by": {
    "description": "Field name that is currently being sorted. Set to null to clear sorting. Syncable with the .sync prop modifier",
    "type": "string"
  },
  "b-table/sort-desc": {
    "description": "Set to true to sort the column in descending order. Syncable with the .sync prop modifier",
    "type": "boolean"
  },
  "b-table/sort-direction": {
    "description": "The initial sorting direction to sort an unsorted column by: 'asc', 'desc', or 'last' (to use the previous sort direction)",
    "type": "string"
  },
  "b-table/sort-compare": {
    "description": "A reference to a function for sort-comparing tow rows of data. Defaults to the internal sort compare routine. See docs for details",
    "type": "function"
  },
  "b-table/sort-compare-options": {
    "description": "An object containing sort configuration for the 'String.prototype.sortLocale' method. See docs for details",
    "type": "object"
  },
  "b-table/sort-compare-locale": {
    "description": "The locale string (or array of locale string) that specified the language when sorting. See docs for details",
    "type": "string|any[]"
  },
  "b-table/sort-null-last": {
    "description": "When sorting, null and undefined values will be sorted first (or last, depending on 'sort-desc'). Set this prop to sort null values last. Only applicable to internal sorting",
    "type": "boolean"
  },
  "b-table/no-sort-reset": {
    "description": "When a table is sortable, clicking on any non-sortable column heading will clear the current sort values. Set this prop to disable this feature",
    "type": "boolean"
  },
  "b-table/label-sort-asc": {
    "description": "String to place in the header cell's 'aria-label' when clicking the cell will change the sort direction to ascending",
    "type": "string"
  },
  "b-table/label-sort-desc": {
    "description": "String to place in the header cell's 'aria-label' when clicking the cell will change the sort direction to descending",
    "type": "string"
  },
  "b-table/label-sort-clear": {
    "description": "String to place in the header cell's 'aria-label' when clicking the cell will clear the current sorting direction",
    "type": "string"
  },
  "b-table/no-local-sorting": {
    "description": "Disabled the internal sorting routine, and expects the user to provde the items sorted. Sorting controls will still be available",
    "type": "boolean"
  },
  "b-table/no-footer-sorting": {
    "description": "When the build in formatter is used, setting this prop will disable the sorting ability in the footer",
    "type": "boolean"
  },
  "b-table/sort-icon-left": {
    "description": "Positions the sort control to the left of the header text. Default is on the right of the header text",
    "type": "boolean"
  },
  "b-table/per-page": {
    "description": "Number of rows to show per page. Set to 0 to disable pagination",
    "type": "number|string"
  },
  "b-table/current-page": {
    "description": "The current page number to display when the table is paginated. Starting from 1 and up",
    "type": "number|string"
  },
  "b-table/caption": {
    "description": "Text string to place in the caption element",
    "type": "string"
  },
  "b-table/caption-html": {
    "description": "HTML string to place in the caption element. Use with caution",
    "type": "string"
  },
  "b-table/selectable": {
    "description": "When set, places the table body rows in selectable mode",
    "type": "boolean"
  },
  "b-table/select-mode": {
    "description": "The selectable mode for the table when 'selectable' is set. Possible values: 'single', 'multi' or 'range'",
    "type": "string"
  },
  "b-table/selected-variant": {
    "description": "Bootstrap color theme variant to set selected rows to. Use any of the standard Bootstrap theme color variants, or the special table row variant 'active' (default). Set to an empty string to not use a variant",
    "type": "string"
  },
  "b-table/no-select-on-click": {
    "description": "Disables row selection via click events. Row selection will be only available programmatically",
    "type": "boolean"
  },
  "b-table/show-empty": {
    "description": "When enabled, and there are no item records to show, shows a message that there are no rows to show",
    "type": "boolean"
  },
  "b-table/empty-text": {
    "description": "Text string to show when the table has no items to show",
    "type": "string"
  },
  "b-table/empty-html": {
    "description": "HTML string to show when the table has no items to show. Usw with caution",
    "type": "string"
  },
  "b-table/empty-filtered-text": {
    "description": "Text string to show when the table has no items to show due to filtering",
    "type": "string"
  },
  "b-table/empty-filtered-html": {
    "description": "HTML string to show when the table has no items to show due to filtering. Use with caution",
    "type": "string"
  },
  "b-table/busy": {
    "description": "When set, forces the table into the busy state.Automatically set when an items provider function is being called",
    "type": "boolean"
  },
  "b-table/no-provider-paging": {
    "description": "When set, uses internal paging to pagination the data. Otherwise the items provider is expected to perform the paging",
    "type": "boolean"
  },
  "b-table/no-provider-sorting": {
    "description": "When set, uses internal sorting to sort the data. Otherwise the items provider is expected to perform the sorting",
    "type": "boolean"
  },
  "b-table/no-provider-filtering": {
    "description": "When set, uses internal filtering to pagination the data. Otherwise the provider is expected to perform the filtering",
    "type": "boolean"
  },
  "b-table/api-url": {
    "description": "Pass through prop. Passed as part of the context object sent to the items provider function",
    "type": "string"
  },
  "b-table-lite/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-table-lite/items": {
    "description": "Array of items to display",
    "type": "any[]"
  },
  "b-table-lite/fields": {
    "description": "Array of field names or array of field definition objects",
    "type": "any[]"
  },
  "b-table-lite/primary-key": {
    "description": "Name of a table field that contains a guaranteed unique value per row. Needed for tbody transition support, and also speeds up table rendering",
    "type": "string"
  },
  "b-table-lite/value": {
    "description": "Currently displayed row data. Read-only. Do not set a value on this prop",
    "type": "any[]"
  },
  "b-table-lite/striped": {
    "description": "Applies striping to the tbody rows",
    "type": "boolean"
  },
  "b-table-lite/bordered": {
    "description": "Adds borders to all the cells and headers",
    "type": "boolean"
  },
  "b-table-lite/borderless": {
    "description": "Removes all borders from cells",
    "type": "boolean"
  },
  "b-table-lite/outlined": {
    "description": "Adds an outline border to the table element",
    "type": "boolean"
  },
  "b-table-lite/dark": {
    "description": "Places the table in dark mode",
    "type": "boolean"
  },
  "b-table-lite/hover": {
    "description": "Enables hover styling on rows",
    "type": "boolean"
  },
  "b-table-lite/small": {
    "description": "Renders the table with smaller cell padding",
    "type": "boolean"
  },
  "b-table-lite/fixed": {
    "description": "Makes all columns equal width (fixed layout table). Will speed up rendering for large tables. Column widths can be set via CSS or colgroup",
    "type": "boolean"
  },
  "b-table-lite/responsive": {
    "description": "Makes the table responsive in width, adding a horizontal scrollbar. Set to true for always responsive or set to one of the breakpoints to switch from responsive to normal: 'sm', 'md', 'lg', 'xl'",
    "type": "boolean|string"
  },
  "b-table-lite/sticky-header": {
    "description": "Makes the table header sticky. Set to true for a maximum height 300px tall table, or set to any valid CSS hight (including units)",
    "type": "boolean|string"
  },
  "b-table-lite/no-border-collapse": {
    "description": "Disable's the collapsing of table borders. Useful when table has sticky headers or columns",
    "type": "boolean"
  },
  "b-table-lite/caption-top": {
    "description": "Visually place the table caption above the table. Default is below.",
    "type": "boolean"
  },
  "b-table-lite/table-variant": {
    "description": "Apply a Bootstrap theme color variant to the entire table",
    "type": "string"
  },
  "b-table-lite/table-class": {
    "description": "CSS class (or classes) to apply to the table element",
    "type": "string|any[]|object"
  },
  "b-table-lite/stacked": {
    "description": "Place the table in stacked mode. Set to true for always stacked, or set to one of the breakpoints to switch from stacked to normal: 'sm', 'md', 'lg', 'xl'",
    "type": "boolean|string"
  },
  "b-table-lite/head-variant": {
    "description": "Header variant: 'light' or 'dark', or unset. May take precedence over head-row-variant",
    "type": "string"
  },
  "b-table-lite/head-row-variant": {
    "description": "Apply a Bootstrap theme color variant to the tr element in the thead",
    "type": "string"
  },
  "b-table-lite/thead-class": {
    "description": "CSS class (or classes) to apply to the thead element",
    "type": "string|any[]|object"
  },
  "b-table-lite/thead-tr-class": {
    "description": "CSS class (or classes) to apply to the tr element in the thead",
    "type": "string|any[]|object"
  },
  "b-table-lite/foot-clone": {
    "description": "Enable to the footer of the table, and clone the header content by default",
    "type": "boolean"
  },
  "b-table-lite/foot-variant": {
    "description": "Footer variant: 'light' or 'dark', or unset. May take precedence over foot-row-variant",
    "type": "string"
  },
  "b-table-lite/foot-row-variant": {
    "description": "Apply a Bootstrap theme color variant to the tr element in the tfoot. Falls back to head-row-variant",
    "type": "string"
  },
  "b-table-lite/tfoot-class": {
    "description": "CSS class (or classes) to apply to the tfoot element",
    "type": "string|any[]|object"
  },
  "b-table-lite/tfoot-tr-class": {
    "description": "CSS class (or classes) to apply to the tr element in the tfoot",
    "type": "string|any[]|object"
  },
  "b-table-lite/tbody-tr-class": {
    "description": "CSS class (or classes) to apply to the tr element in the tbody. Can be a function that returns a class (see docs for details)",
    "type": "string|any[]|object|function"
  },
  "b-table-lite/details-td-class": {
    "description": "CSS class (or classes) to apply to the td element in the details row",
    "type": "string|any[]|object"
  },
  "b-table-lite/tbody-transition-props": {
    "description": "Vue 'transition-group' properties. When provided will make the tbody a Vue 'transition-group' component",
    "type": "object"
  },
  "b-table-lite/tbody-transition-handlers": {
    "description": "Vue 'transition-group' event handlers. When provided will make the tbody a Vue 'transition-group' component",
    "type": "object"
  },
  "b-table-lite/tbody-class": {
    "description": "CSS class (or classes) to apply to the tbody element",
    "type": "string|any[]|object"
  },
  "b-table-lite/caption": {
    "description": "Text string to place in the caption element",
    "type": "string"
  },
  "b-table-lite/caption-html": {
    "description": "HTML string to place in the caption element. Use with caution",
    "type": "string"
  },
  "b-table-simple/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-table-simple/striped": {
    "description": "Applies striping to the tbody rows",
    "type": "boolean"
  },
  "b-table-simple/bordered": {
    "description": "Adds borders to all the cells and headers",
    "type": "boolean"
  },
  "b-table-simple/borderless": {
    "description": "Removes all borders from cells",
    "type": "boolean"
  },
  "b-table-simple/outlined": {
    "description": "Adds an outline border to the table element",
    "type": "boolean"
  },
  "b-table-simple/dark": {
    "description": "Places the table in dark mode",
    "type": "boolean"
  },
  "b-table-simple/hover": {
    "description": "Enables hover styling on rows",
    "type": "boolean"
  },
  "b-table-simple/small": {
    "description": "Renders the table with smaller cell padding",
    "type": "boolean"
  },
  "b-table-simple/fixed": {
    "description": "Makes all columns equal width (fixed layout table). Will speed up rendering for large tables. Column widths can be set via CSS or colgroup",
    "type": "boolean"
  },
  "b-table-simple/responsive": {
    "description": "Makes the table responsive in width, adding a horizontal scrollbar. Set to true for always responsive or set to one of the breakpoints to switch from responsive to normal: 'sm', 'md', 'lg', 'xl'",
    "type": "boolean|string"
  },
  "b-table-simple/sticky-header": {
    "description": "Makes the table header sticky. Set to true for a maximum height 300px tall table, or set to any valid CSS hight (including units)",
    "type": "boolean|string"
  },
  "b-table-simple/no-border-collapse": {
    "description": "Disable's the collapsing of table borders. Useful when table has sticky headers or columns",
    "type": "boolean"
  },
  "b-table-simple/caption-top": {
    "description": "Visually place the table caption above the table. Default is below.",
    "type": "boolean"
  },
  "b-table-simple/table-variant": {
    "description": "Apply a Bootstrap theme color variant to the entire table",
    "type": "string"
  },
  "b-table-simple/table-class": {
    "description": "CSS class (or classes) to apply to the table element",
    "type": "string|any[]|object"
  },
  "b-table-simple/stacked": {
    "description": "Place the table in stacked mode. Set to true for always stacked, or set to one of the breakpoints to switch from stacked to normal: 'sm', 'md', 'lg', 'xl'",
    "type": "boolean|string"
  },
  "b-tbody/tbody-transition-props": {
    "description": "Vue 'transition-group' properties. When provided will make the tbody a Vue 'transition-group' component",
    "type": "object"
  },
  "b-tbody/tbody-transition-handlers": {
    "description": "Vue 'transition-group' event handlers. When provided will make the tbody a Vue 'transition-group' component",
    "type": "object"
  },
  "b-thead/head-variant": {
    "description": "Header variant: 'light' or 'dark', or unset",
    "type": "string"
  },
  "b-tfoot/foot-variant": {
    "description": "Footer variant: 'light' or 'dark', or unset",
    "type": "string"
  },
  "b-tr/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-td/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-td/colspan": {
    "description": "Number of columns this cell spans",
    "type": "number|string"
  },
  "b-td/rowspan": {
    "description": "Number of rows this cell spans",
    "type": "number|string"
  },
  "b-td/stacked-heading": {
    "description": "Heading for the cell when in stacked mode. Only applicable to cells in the 'tbody' element",
    "type": "string"
  },
  "b-td/sticky-column": {
    "description": "If this will be a sticky colum. Must be set on all cells in this column. table must be in sticky-header or responsive mode to work",
    "type": "boolean"
  },
  "b-th/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-th/colspan": {
    "description": "Number of columns this cell spans",
    "type": "number|string"
  },
  "b-th/rowspan": {
    "description": "Number of rows this cell spans",
    "type": "number|string"
  },
  "b-th/stacked-heading": {
    "description": "Heading for the cell when in stacked mode. Only applicable to cells in the 'tbody' element",
    "type": "string"
  },
  "b-th/sticky-column": {
    "description": "If this will be a sticky colum. Must be set on all cells in this column. table must be in sticky-header or responsive mode to work",
    "type": "boolean"
  },
  "b-tabs/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-tabs/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-tabs/fill": {
    "description": "Proportionately fills all horizontal space with nav items. All horizontal space is occupied, but not every nav item has the same width",
    "type": "boolean"
  },
  "b-tabs/justified": {
    "description": "Fills all horizontal space with nav items, but unlike 'fill', every nav item will be the same width",
    "type": "boolean"
  },
  "b-tabs/align": {
    "description": "Align the nav items in the nav: 'start' (or 'left'), 'center', 'end' (or 'right')",
    "type": "string"
  },
  "b-tabs/pills": {
    "description": "Renders the nav items with the appearance of pill buttons",
    "type": "boolean"
  },
  "b-tabs/vertical": {
    "description": "Renders the tab controls vertically",
    "type": "boolean"
  },
  "b-tabs/small": {
    "description": "Makes the nav smaller",
    "type": "boolean"
  },
  "b-tabs/card": {
    "description": "When set to true, renders the tabs the the appropriate styles to be placed into a 'b-card'",
    "type": "boolean"
  },
  "b-tabs/end": {
    "description": "Place the tab controls at the bottom (horizontal tabs), or right (vertical tabs)",
    "type": "boolean"
  },
  "b-tabs/no-fade": {
    "description": "When set to 'true', disables the fade animation/transition on the component",
    "type": "boolean"
  },
  "b-tabs/no-nav-style": {
    "description": "Do not render the tab controls with tab styling",
    "type": "boolean"
  },
  "b-tabs/no-key-nav": {
    "description": "Disable keyboard navigation of the tab controls",
    "type": "boolean"
  },
  "b-tabs/lazy": {
    "description": "Lazily render the b-tab contents when shown",
    "type": "boolean"
  },
  "b-tabs/content-class": {
    "description": "CSS class (or classes) to apply to the tab-content wrapper",
    "type": "string|any[]|object"
  },
  "b-tabs/nav-class": {
    "description": "CSS class (or classes) to apply to the tablist (nav) wrapper",
    "type": "string|any[]|object"
  },
  "b-tabs/nav-wrapper-class": {
    "description": "CSS class (or classes) to apply to the tab controls wrapper element",
    "type": "string|any[]|object"
  },
  "b-tabs/active-nav-item-class": {
    "description": "CSS class (or classes) to apply to the active nav item tab control",
    "type": "string|any[]|object"
  },
  "b-tabs/active-tab-class": {
    "description": "CSS class (or classes) to apply to the currently active tab",
    "type": "string|any[]|object"
  },
  "b-tabs/value": {
    "description": "Currently visible tab index (zero-based)",
    "type": "number"
  },
  "b-tab/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-tab/active": {
    "description": "When set to 'true', places the component in the active state with active styling",
    "type": "boolean"
  },
  "b-tab/tag": {
    "description": "Specify the HTML tag to render instead of the default tag",
    "type": "string"
  },
  "b-tab/button-id": {
    "description": "Use a specific ID for this tab's tab control button. If not provided, one will automatically be generated",
    "type": "string"
  },
  "b-tab/title": {
    "description": "Text content to place in the title",
    "type": "string"
  },
  "b-tab/title-item-class": {
    "description": "CSS class (or classes) to apply to the tab's control button 'li' element",
    "type": "string|any[]|object"
  },
  "b-tab/title-link-class": {
    "description": "CSS class (or classes) to apply to the tab's control button inner link element",
    "type": "string|any[]|object"
  },
  "b-tab/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-tab/no-body": {
    "description": "When the parent b-tabs has the 'card' prop set, do not render a card-body wrapper",
    "type": "boolean"
  },
  "b-tab/lazy": {
    "description": "Lazily render this tab's content when shown",
    "type": "boolean"
  },
  "b-toast/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "b-toast/title": {
    "description": "The toast's title text",
    "type": "string"
  },
  "b-toast/toaster": {
    "description": "The name of the toaster target to render the toast in",
    "type": "string"
  },
  "b-toast/visible": {
    "description": "When true, shows the toast",
    "type": "boolean"
  },
  "b-toast/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-toast/is-status": {
    "description": "When set to 'true', makes the toast have attributes aria-live=polite and role=status. When 'false' aria-live will be 'assertive' and role will be 'alert'",
    "type": "boolean"
  },
  "b-toast/append-toast": {
    "description": "When true, the toast will be appended to the bottom on the visible toasts, otherwise it will be prepended",
    "type": "boolean"
  },
  "b-toast/no-auto-hide": {
    "description": "When set, disabled the toast from automatically dismissing itself",
    "type": "boolean"
  },
  "b-toast/auto-hide-delay": {
    "description": "The number of milliseconds before the toast auto dismisses itself",
    "type": "number|string"
  },
  "b-toast/no-close-button": {
    "description": "When set, hides the close button in the toast header",
    "type": "boolean"
  },
  "b-toast/no-fade": {
    "description": "When set to 'true', disables the fade animation/transition on the component",
    "type": "boolean"
  },
  "b-toast/no-hover-pause": {
    "description": "When set, disables the pausing of hte auto hide delay when the mouse hovers the toast",
    "type": "boolean"
  },
  "b-toast/solid": {
    "description": "When set, renderes the toast with a solid background rather than translucent",
    "type": "boolean"
  },
  "b-toast/toast-class": {
    "description": "CSS class (or classes) to add to the toast wrapper element",
    "type": "string|object|any[]"
  },
  "b-toast/header-class": {
    "description": "CSS class (or classes) to add to the toast header element",
    "type": "string|object|any[]"
  },
  "b-toast/body-class": {
    "description": "CSS class (or classes) to add to the toast body element",
    "type": "string|object|any[]"
  },
  "b-toast/href": {
    "description": "Denotes the target URL of the link for standard a links",
    "type": "string"
  },
  "b-toast/to": {
    "description": "router-link prop: Denotes the target route of the link. When clicked, the value of the to prop will be passed to router.push() internally, so the value can be either a string or a Location descriptor object",
    "type": "string|object"
  },
  "b-toast/static": {
    "description": "Renders the content of the component in-place in the DOM, rather than portalling it to be appended to the body element",
    "type": "boolean"
  },
  "b-toaster/name": {
    "description": "The toaster's target name",
    "type": "string"
  },
  "b-toaster/aria-live": {
    "description": "When the rendered element is an aria-live region (for screen reader users), set to either 'polite' or 'assertive'",
    "type": "string"
  },
  "b-toaster/aria-atomic": {
    "description": "When screen reader's should read out the entire contents (set to string 'true') or just the changes (set to string 'false'). Leave blank for most cases",
    "type": "string"
  },
  "b-toaster/role": {
    "description": "Sets the ARIA attribute 'role' to a specific value",
    "type": "string"
  },
  "b-tooltip/title": {
    "description": "Text to place in the tooltip",
    "type": "string"
  },
  "b-tooltip/target": {
    "description": "Element string ID, or a reference to an element or component, that you want to trigger the tooltip.",
    "type": "string|HTMLElement|SVGElement|function|object"
  },
  "b-tooltip/triggers": {
    "description": "Specify which triggers will show the tooltip. Supported values are 'click', 'hover', 'focus'. Refer to the docs for special triggers 'blur' and 'manual'",
    "type": "string|any[]"
  },
  "b-tooltip/placement": {
    "description": "Placement of the tooltip: One of 'top', 'bottom', 'right', 'left', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom', 'right-top', 'right-bottom'",
    "type": "string"
  },
  "b-tooltip/fallback-placement": {
    "description": "placement to use when the tooltip would be out of boundaries. Refer to the docs for more details",
    "type": "string|any[]"
  },
  "b-tooltip/variant": {
    "description": "Applies one of the Bootstrap theme color variants to the component",
    "type": "string"
  },
  "b-tooltip/custom-class": {
    "description": "CSS class (or classes) to apply to the tooltip's root element",
    "type": "string"
  },
  "b-tooltip/delay": {
    "description": "Value for the show and hide delay. Applies to both show and hide when specified as a number or string. Use object form to set show and hide delays individually",
    "type": "number|object|string"
  },
  "b-tooltip/boundary": {
    "description": "The boundary constraint of the tooltip: 'scrollParent', 'window', 'viewport', or a reference to an HTMLElement or component",
    "type": "string|HTMLElement|object"
  },
  "b-tooltip/boundary-padding": {
    "description": "The tooltip will try and stay away from the edge of the boundary element by the number of pixels specificed",
    "type": "number|string"
  },
  "b-tooltip/offset": {
    "description": "Offset (in pixels) for the arrow center compared to the trigger target element",
    "type": "number|string"
  },
  "b-tooltip/no-fade": {
    "description": "When set to 'true', disables the fade animation/transition on the component",
    "type": "boolean"
  },
  "b-tooltip/container": {
    "description": "The container element to append the rendered tooltip when visible. Default's to the body element",
    "type": "string|HTMLElement|object"
  },
  "b-tooltip/show": {
    "description": "When set will show the tooltip",
    "type": "boolean"
  },
  "b-tooltip/disabled": {
    "description": "When set to 'true', disables the component's functionality and places it in a disabled state",
    "type": "boolean"
  },
  "b-tooltip/id": {
    "description": "Used to set the 'id' attribute on the rendered content, and used as the base to generate any additional element IDs as needed",
    "type": "string"
  },
  "v-b-toggle": {
    "global": true,
    "description": "Easily toggle content visibility on your pages. Includes support for making accordions."
  },
  "v-b-modal": {
    "global": true,
    "description": "Modals are streamlined, but flexible dialog prompts powered by JavaScript and CSS. They support a number of use cases from user notification to completely custom content and feature a handful of helpful sub-components, sizes, variants, accessibility, and more."
  },
  "v-b-popover": {
    "global": true,
    "description": "Add BootstrapVue popovers to any element on your site, using Bootstrap v4 CSS for styling and animations. Popovers are tooltips on steroids."
  },
  "v-b-scrollspy": {
    "global": true,
    "description": "Automatically activate BootstrapVue navigation or list group components based on scroll position to indicate which link is currently active in the viewport."
  },
  "v-b-tooltip": {
    "global": true,
    "description": "Add custom BootstrapVue tooltips to any element. Tooltips can be triggered by hovering, focusing, or clicking an element."
  },
  "v-b-visible": {
    "global": true,
    "description": "The `v-b-visible` directive allows you to react when an element becomes visible in the viewport."
  }
}