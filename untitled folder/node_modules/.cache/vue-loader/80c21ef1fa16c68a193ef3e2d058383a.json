{"remainingRequest":"/Users/chenlu/ipfc_webapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenlu/ipfc_webapp/src/views/login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chenlu/ipfc_webapp/src/views/login.vue","mtime":1574960561570},{"path":"/Users/chenlu/ipfc_webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenlu/ipfc_webapp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenlu/ipfc_webapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenlu/ipfc_webapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIGltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7Ci8vaW1wb3J0IGFyZ29uMiBmcm9tICdhcmdvbjItYnJvd3NlcicKY29uc3QgYXJnb24yID0gcmVxdWlyZSgnYXJnb24yLWJyb3dzZXInKTsKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ0xvZ2luJywKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaW5wdXQ6IHsKICAgICAgICAgICAgICAgIGVtYWlsOiAnJywKICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAnJywKICAgICAgICAgICAgICAgIHNhbHQ6ICcnLAogICAgICAgICAgICAgICAgdmVyaWZ5UmVzcG9uc2U6ICcnCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICB2YWxpZGF0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5lbWFpbC5sZW5ndGggPiA0ICYmIHRoaXMuaW5wdXQuZW1haWwubGVuZ3RoIDwgMTMKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGFzeW5jIGdldFNhbHQoKSB7CiAgICAgICAgICAgIGxldCBzYWx0RW5kUG9pbnQgPSAiaHR0cHM6Ly9pcGZjLW1pZHdhcmUuaGVyb2t1YXBwLmNvbS9nZXRzYWx0P2VtYWlsPSIgKyB0aGlzLmlucHV0LmVtYWlsOwogICAgICAgICAgICBjb25zb2xlLmxvZyhzYWx0RW5kUG9pbnQpCgogICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChzYWx0RW5kUG9pbnQpCiAgICAgICAgICAgIHRoaXMuaW5wdXQuc2FsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKQogICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmlucHV0LnNhbHQpCiAgICAgICAgICAgIHRoaXMuIHZlcmlmeSgpCiAgICAgICAgICAgIC8vIGZldGNoKHNhbHRFbmRQb2ludCkKICAgICAgICAgICAgLy8gICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSkKICAgICAgICAgICAgLy8gICAgIC50aGVuKGRhdGEgPT4gKHRoaXMuaW5wdXQuc2FsdCA9IGRhdGEpKQogICAgICAgICAgICAvLyAgICAgLnRoZW4oY29uc29sZS5sb2codGhpcy5pbnB1dC5zYWx0KSkKICAgICAgICAgICAgLy8gICAgIC50aGVuKHRoaXMudmVyaWZ5KCkpCiAgICAgICAgfSwKICAgICAgICBhc3luYyB2ZXJpZnkoKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25zID0geyB0aW1lQ29zdDogMTYsIG1lbW9yeUNvc3Q6IDUxMiwgcGFyYWxsZWxpc206IDIsIGhhc2hMZW5ndGg6IDY0IH07CiAgICAgICAgICAgIHZhciBrZXkgPSBhcmdvbjIuaGFzaCh0aGlzLmlucHV0LnBhc3N3b3JkLCB0aGlzLmlucHV0LnNhbHQsIG9wdGlvbnMpCiAgICAgICAgICAgIGNvbnNvbGUubG9nKGtleSkKICAgICAgICAgICAgLy8gbGV0IGtleSA9ICc0MWUxZGY2Y2I4MmI1YWQzMDhmMWUzYTA0ZmYwYWIzZmIxOGVjMjlmNDk2YTE1ZTRlZDJhYmI0YzU5YzQ4Mjk3OTA1OGNiZGQ5Y2UzM2NjNTE1YTRkYjg3MjZiYjllZThjMGFmZDE5NzQ0Y2M0Njk0NWQzMGJkNWJhNmI4MzhlNycKICAgICAgICAgICAgbGV0IHZlcmlmeWxvZ2luRW5kcG9pbnQgPSAiaHR0cHM6Ly9pcGZjLW1pZHdhcmUuaGVyb2t1YXBwLmNvbS92ZXJpZnlsb2dpbj9lbWFpbD0iICsgdGhpcy5pbnB1dC5lbWFpbCArICIma2V5PSIgKyBrZXk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZlcmlmeWxvZ2luRW5kcG9pbnQpCgogICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh2ZXJpZnlsb2dpbkVuZHBvaW50KQogICAgICAgICAgICB0aGlzLmlucHV0LnZlcmlmeVJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuaW5wdXQudmVyaWZ5UmVzcG9uc2UpCiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"login.vue","sourceRoot":"src/views","sourcesContent":["\n\n<template>\n<div id=\"body\">\n    <h1>IPFC Login</h1>\n    <b-form @submit.stop.prevent id=\"form-signin\">\n        <label for=\"feedback-email\">Email</label>\n        <b-input v-model=\"input.email\" :state=\"validation\" id=\"feedback-email\"></b-input>\n        <b-form-invalid-feedback :state=\"validation\">\n            Your user ID must be 5-12 characters long.\n        </b-form-invalid-feedback>\n        <b-form-valid-feedback :state=\"validation\">\n            Looks Good.\n        </b-form-valid-feedback>\n        <label for=\"text-password\">Password</label>\n        <b-input v-model=\"input.password\" type=\"password\" id=\"text-password\" aria-describedby=\"password-help-block\"></b-input>\n        <b-form-text id=\"password-help-block\">\n            Your password must be 8-20 characters long, contain letters and numbers, and must not\n            contain spaces, special characters, or emoji.\n        </b-form-text>\n        <b-button type=\"submit\" @click=\"getSalt()\" variant=\"primary\">Submit</b-button>\n    </b-form>\n</div>\n\n</template>\n\n<script>\n// import axios from 'axios';\n//import argon2 from 'argon2-browser'\nconst argon2 = require('argon2-browser');\nexport default {\n    name: 'Login',\n    data() {\n        return {\n            input: {\n                email: '',\n                password: '',\n                salt: '',\n                verifyResponse: ''\n            }\n        }\n    },\n    computed: {\n        validation() {\n            return this.input.email.length > 4 && this.input.email.length < 13\n        }\n    },\n    methods: {\n        async getSalt() {\n            let saltEndPoint = \"https://ipfc-midware.herokuapp.com/getsalt?email=\" + this.input.email;\n            console.log(saltEndPoint)\n\n            let response = await fetch(saltEndPoint)\n            this.input.salt = await response.json()\n            console.log(this.input.salt)\n            this. verify()\n            // fetch(saltEndPoint)\n            //     .then(response => response.json())\n            //     .then(data => (this.input.salt = data))\n            //     .then(console.log(this.input.salt))\n            //     .then(this.verify())\n        },\n        async verify() {\n            var options = { timeCost: 16, memoryCost: 512, parallelism: 2, hashLength: 64 };\n            var key = argon2.hash(this.input.password, this.input.salt, options)\n            console.log(key)\n            // let key = '41e1df6cb82b5ad308f1e3a04ff0ab3fb18ec29f496a15e4ed2abb4c59c482979058cbdd9ce33cc515a4db8726bb9ee8c0afd19744cc46945d30bd5ba6b838e7'\n            let verifyloginEndpoint = \"https://ipfc-midware.herokuapp.com/verifylogin?email=\" + this.input.email + \"&key=\" + key;\n            console.log(verifyloginEndpoint)\n\n            let response = await fetch(verifyloginEndpoint)\n            this.input.verifyResponse = await response.json()\n            console.log(this.input.verifyResponse)\n        }\n    }\n}\n</script>\n\n<style scoped>\n    #body {\n        padding: 20px;\n        margin: auto;\n    }\n    #form-signin{\n        max-width: 330px;\n    }\n</style>"]}]}