{
    "cards": [
        {
            "back_text": "A set of specific steps for solving a category of problems",
            "card_id": "2b92ccfff6714cae9f5075a308023313",
            "card_tags": [],
            "front_text": "algorithm"
        },
        {
            "back_text": "basic elements of a language(letters, numbers, symbols)",
            "card_id": "5879d1e923af49d89dc4751783e15aa5",
            "card_tags": [],
            "front_text": "token"
        },
        {
            "back_text": "A programming language like Python that is designed to be easy for humans to read and write.",
            "card_id": "74e16312a95f4790845aff52288f65a0",
            "card_tags": [],
            "front_text": "high-level language"
        },
        {
            "back_text": "A programming language that is designed to be easy for a computer to execute; also called machine language or assembly language",
            "card_id": "b9b6e1f2fdab44739ebd345088afa30d",
            "card_tags": [],
            "front_text": "low-level langauge"
        },
        {
            "back_text": "define the language's syntax rules and structure, and they cannot be used as variable names",
            "card_id": "d2fca7e2299d49a2a3770f891389e6c1",
            "card_tags": [],
            "front_text": "keyword"
        },
        {
            "back_text": "instruction that the Python interpreter can execute",
            "card_id": "b80cb548f41c44c19130e52471f5c82d",
            "card_tags": [],
            "front_text": "statement"
        },
        {
            "back_text": "special tokens that represent computations like addition, multiplication and division",
            "card_id": "0459447ac36e44da8ff24e807356278d",
            "card_tags": [],
            "front_text": "operators"
        },
        {
            "back_text": "%, works on integers (and integer expressions) and gives the remainder when the first number is divided by the second",
            "card_id": "7e5151a8eac54cf39503e5aee1d4bdff",
            "card_tags": [],
            "front_text": "modulus operator"
        },
        {
            "back_text": "To simplify an expression by performing the operations in order to yield a single value.",
            "card_id": "3ed1b431f2d74955871ee0049fd61608",
            "card_tags": [],
            "front_text": "evaluate"
        },
        {
            "back_text": "A Python data type that holds positive and negative whole numbers",
            "card_id": "0affb3a0aed9448a89e8ecff8dd059f0",
            "card_tags": [],
            "front_text": "int"
        },
        {
            "back_text": "A Python data type which stores floating-point numbers. Floating-point numbers are stored internally in two parts: a base and an exponent. When printed in the standard format, they look like decimal numbers",
            "card_id": "4fa7368336ad49bf9a62d4a16c2b92b3",
            "card_tags": [],
            "front_text": "float"
        },
        {
            "back_text": "The order in which statements are executed during a program run.",
            "card_id": "4370104a198945fd8f463ecc8f5e5a6b",
            "card_tags": [],
            "front_text": "flow of execution"
        },
        {
            "back_text": "A named sequence of statements that performs some useful operation. Functions may or may not take parameters and may or may not produce a result",
            "card_id": "43accfe9fb3b4b0393e325d65e094204",
            "card_tags": [],
            "front_text": "function"
        },
        {
            "back_text": "A function that returns a value when it is called.",
            "card_id": "3d4289ab19014540819daa636ae3a072",
            "card_tags": [],
            "front_text": "fruitful function"
        },
        {
            "back_text": "A variable defined inside a function. A local variable can only be used inside its function. Parameters of a function are also a special kind of local variable.",
            "card_id": "9b66e2571b8c4f24b118dd06c41eb986",
            "card_tags": [],
            "front_text": "local variable"
        },
        {
            "back_text": "A name used inside a function to refer to the value which was passed to it as an argument.",
            "card_id": "cd94c82555ee485f8fb9a2fb384fadc5",
            "card_tags": [],
            "front_text": "parameter"
        },
        {
            "back_text": "A function that returns a Boolean value. The only possible values of the bool type are False and True.",
            "card_id": "aefacb91500748f8ba6019f86eca385f",
            "card_tags": [],
            "front_text": "boolean function"
        },
        {
            "back_text": "A special Python value. One use in Python is that it is returned by functions that do not execute a return statement with a return argument.",
            "card_id": "d8943691daae4e168f05db698df27f77",
            "card_tags": [],
            "front_text": "None"
        },
        {
            "back_text": "A group of consecutive statements with the same indentation.",
            "card_id": "b65c1378cd3044e2bc1c3a9c12c9729c",
            "card_tags": [],
            "front_text": "block"
        },
        {
            "back_text": "An expression that is either true or false.",
            "card_id": "e480540c58954c2ebe61fb14fb2f8038",
            "card_tags": [],
            "front_text": "boolean expression"
        },
        {
            "back_text": "A statement that controls the flow of execution depending on some condition. In Python the keywords if, elif, and else are used for conditional statements.",
            "card_id": "36513eb209a7433f97e0a00eca45c20d",
            "card_tags": [],
            "front_text": "conditional statement"
        },
        {
            "back_text": "One program structure within another, such as a conditional statement inside a branch of another conditional statement",
            "card_id": "cb0b23d9f99249f4a6f932444b109c09",
            "card_tags": [],
            "front_text": "conditional statement"
        },
        {
            "back_text": "An explicit function call that takes a value of one type and computes a corresponding value of another type.",
            "card_id": "43b24587ae724eb6a2013354aa3a8b5c",
            "card_tags": [],
            "front_text": "type conversion"
        },
        {
            "back_text": "A loop where we have an upper bound on the number of times the body will be executed. Definite iteration is usually best coded as a for loop",
            "card_id": "80ab311e470f41679c4603aa417e8d25",
            "card_tags": [],
            "front_text": "definite iteration"
        },
        {
            "back_text": "Both as a noun and as a verb, increment means to increase by 1.",
            "card_id": "a3d1f32b7fb3405fa3a57e3decf71d7f",
            "card_tags": [],
            "front_text": "increment"
        },
        {
            "back_text": "Repeated execution of a set of programming statements.",
            "card_id": "eb7100bb220b402381081ddf6b91b88b",
            "card_tags": [],
            "front_text": "iteration"
        },
        {
            "back_text": "A loop inside the body of another loop.",
            "card_id": "a990f5d1d6e2443b8207907caa0ca795",
            "card_tags": [],
            "front_text": "nested loop"
        },
        {
            "back_text": "To follow the flow of execution of a program by hand, recording the change of state of the variables and any output produced.",
            "card_id": "9ba866d4737241a8aa1d88207159d64b",
            "card_tags": [],
            "front_text": "trace"
        },
        {
            "back_text": "Multiple variables that contain references to the same object.",
            "card_id": "129d39acb066492b9adeaf41a557401a",
            "card_tags": [],
            "front_text": "aliases"
        },
        {
            "back_text": "To create a new object that has the same value as an existing object. Copying a reference to an object creates an alias but doesn't clone the object.",
            "card_id": "d209ed30a3e74f5ba99b9215bc5247ec",
            "card_tags": [],
            "front_text": "clone"
        },
        {
            "back_text": "A data type that is itself made up of elements that are themselves values.",
            "card_id": "7d24bdb05f0c472e95493932f26699a4",
            "card_tags": [],
            "front_text": "compound data type"
        },
        {
            "back_text": "To subtract one from a variable.",
            "card_id": "18be35ebdbab4396a4a9fad30babc926",
            "card_tags": [],
            "front_text": "decrement"
        },
        {
            "back_text": "A collection of key/value pairs that maps from keys to values.",
            "card_id": "a076191b718842738d57e99938554cd9",
            "card_tags": [],
            "front_text": "dictionary"
        },
        {
            "back_text": "Raised by the runtime system if something goes wrong while the program is running.",
            "card_id": "479f85a5a55f4f73826761bd9316c273",
            "card_tags": [],
            "front_text": "exception"
        },
        {
            "back_text": "A named entity, usually stored on a hard drive, floppy disk, or CD-ROM, that contains a stream of characters.",
            "card_id": "12bc35b975484640b18d2a44802ce360",
            "card_tags": [],
            "front_text": "file"
        },
        {
            "back_text": "The % operator takes a format string and a tuple of values and generates a string by inserting the data values into the format string at the appropriate locations.",
            "card_id": "d66715547c8e42a69c9572a59e042bbd",
            "card_tags": [],
            "front_text": "format operator"
        },
        {
            "back_text": "Can be seen through a program module, even inside of functions.",
            "card_id": "88c01d37dfa8410783cfc718a0833009",
            "card_tags": [],
            "front_text": "global variable"
        },
        {
            "back_text": "A compound data type whose elements can NOT be assigned new values.",
            "card_id": "70461cb09e9340a2b645740f86c4b040",
            "card_tags": [],
            "front_text": "immutable type"
        },
        {
            "back_text": "To repeat a section of code.",
            "card_id": "0b84f4d1ee594c038a1d2737a58d96c6",
            "card_tags": [],
            "front_text": "iteration"
        },
        {
            "back_text": "A compound data type whose elements can be assigned new values.",
            "card_id": "e6d469fd4adb42f5afc04d4b222b55c8",
            "card_tags": [],
            "front_text": "mutable type"
        },
        {
            "back_text": "A list that is itself contained within a list.",
            "card_id": "86dab11673734036a015218650026759",
            "card_tags": [],
            "front_text": "nested list"
        },
        {
            "back_text": "A special symbol that represents a simple computation like addition, multiplication, or string concatenation.",
            "card_id": "964b620b6fa544ef90624af61b7742a3",
            "card_tags": [],
            "front_text": "operator"
        },
        {
            "back_text": "Smallest addressable element of a picture.",
            "card_id": "cbb66278977449ec95e0c8f7b71a5f6a",
            "card_tags": [],
            "front_text": "pixel"
        },
        {
            "back_text": "on a robot, internal sensing mechanisms. On a human, a sense of the relative positions of different parts of ones own body.",
            "card_id": "5fc105a400234f539ca39c2564dfc9a3",
            "card_tags": [],
            "front_text": "proprioception"
        },
        {
            "back_text": "The process of calling the currently executing function.",
            "card_id": "f36e32626b9540a0bd0894205b564e70",
            "card_tags": [],
            "front_text": "recursion"
        },
        {
            "back_text": "mechanism or an artificial entity that can be guided by automatic controls.",
            "card_id": "f2674a4a099e4578a7bd4f1539f29f2e",
            "card_tags": [],
            "front_text": "robot"
        },
        {
            "back_text": "A data type that is made up of elements organized linearly, with each element accessed by an integer index.",
            "card_id": "f288d04619fe46388ddc0ec2d6a5e3ce",
            "card_tags": [],
            "front_text": "sequence"
        },
        {
            "back_text": "When a boolean expression is evaluated the evaluation starts at the left hand expression and proceeds to the right, stopping when it is no longer necessary to evaluate\nany further to determine the final outcome.",
            "card_id": "d753f654a37f409fb3aa34fd38f34ee6",
            "card_tags": [],
            "front_text": "short circuit evaluation"
        },
        {
            "back_text": "A copy of part of a sequence specified by a series of indices.",
            "card_id": "15a4827534954f51837b62f492302494",
            "card_tags": [],
            "front_text": "slice"
        },
        {
            "back_text": "To repeat an operation on all members of a set from the start to the end.",
            "card_id": "b8b3c07cb8274b4eb99acea6c4f67c7d",
            "card_tags": [],
            "front_text": "traverse"
        },
        {
            "back_text": "a value provided to a function when the function is called. This value is assigned to the corresponding parameter in the function.",
            "card_id": "6d80da57731c424eb394cc3d62f3fdfa",
            "card_tags": [],
            "front_text": "argument"
        },
        {
            "back_text": "An operation that divides one integer by another and yields an integer. Integer division yields only the whole number of times that the numerator is divisible by the denominator and discards any remainder.",
            "card_id": "5b8d4236b43342bab2ac0af789ee8c21",
            "card_tags": [],
            "front_text": "integer division"
        },
        {
            "back_text": "One of the values in a list (or other sequence). The bracket operator selects elements of a list.",
            "card_id": "86a6b006530245a68bb89ed1e9119dbe",
            "card_tags": [],
            "front_text": "element"
        },
        {
            "back_text": "A piece of code which can be executed as if it were a function but without a name.\n(It is also a keyword used to create such an anonymous function.)",
            "card_id": "a313797c96bc41f298c4db3abfaebc4f",
            "card_tags": [],
            "front_text": "lambda"
        },
        {
            "back_text": "A file containing definitions and statements\nintended to be imported by other programs.",
            "card_id": "a16914bc8cc3424b82564ee363c3a05a",
            "card_tags": [],
            "front_text": "module"
        },
        {
            "back_text": "If parts of the duplicated code have to be corrected, the correction has to be made many times.",
            "card_id": "22eb424deb1146789cd5f48c4bcf4ca8",
            "card_tags": [],
            "front_text": "What is the disadvantage of coding in one long sequence structure?"
        },
        {
            "back_text": "Count-controlled loop",
            "card_id": "9d02f3b841174b1fb9bfe4d35e55b262",
            "card_tags": [],
            "front_text": "What type of loop structure repeats the code a specific number of times"
        },
        {
            "back_text": "Condition-controlled loop",
            "card_id": "c2e747768a264cc69b1558465acdbe0f",
            "card_tags": [],
            "front_text": "What type of loop structure repeats the code based on the value of the Boolean expression"
        },
        {
            "back_text": "while condition : statement\nWhat are the values that the variable num contains through the iterations of the following for loop?",
            "card_id": "cc707e46f2ff440386f896537a6022bd",
            "card_tags": [],
            "front_text": "What is the format for the while clause in Python"
        },
        {
            "back_text": "2, 4, 6, 8\nWhat are the values that the variable num contains through the iterations of the following for loop?",
            "card_id": "5f7cd6af9d2c45ef9607cd0360e8bd32",
            "card_tags": [],
            "front_text": "for num in range(2, 9, 2)"
        },
        {
            "back_text": "0, 1, 2, 3",
            "card_id": "b9bd45d11971483ab5cc67c7c0f05f7b",
            "card_tags": [],
            "front_text": "for num in range(4)"
        },
        {
            "back_text": "Accumulator",
            "card_id": "9858762bd2064200aed2322eaaa6d0cb",
            "card_tags": [],
            "front_text": "The variable used to keep the running total"
        },
        {
            "back_text": "<=",
            "card_id": "32455f6467cc4d1abe09e4599ae27c1d",
            "card_tags": [],
            "front_text": "What is not an example of an augmented assignment operator"
        },
        {
            "back_text": "Input validation",
            "card_id": "247cf57061ab432f8a6e3633f706e7fd",
            "card_tags": [],
            "front_text": "_____ is the process of inspecting data that has been input to a program to make sure it is valid before it is used in a computation."
        },
        {
            "back_text": "Priming read",
            "card_id": "c71e3ae3ed164bc0b1ddbaeb693eec16",
            "card_tags": [],
            "front_text": "The first input operation is called the _____, and its purpose is to get the first input value that will be tested by the validation loop."
        },
        {
            "back_text": "Repetition\nWhen will the following loop terminate?",
            "card_id": "e20442c3867b4f06bb2bea71fcab2fb6",
            "card_tags": [],
            "front_text": "What is the structure that causes a statement or a set of statements to execute repeatedly?"
        },
        {
            "back_text": "When keep_on_going refers to a value not equal to 999",
            "card_id": "fca78a15b27e474fb42dcde98780d446",
            "card_tags": [],
            "front_text": "while keep_on_going != 999 :"
        },
        {
            "back_text": "list",
            "card_id": "0af769aa99d74949b39a8b2a4c5b83c0",
            "card_tags": [],
            "front_text": "In Python, a comma-separated sequence of data items that are enclosed in a set of brackets is called a _____."
        },
        {
            "back_text": "Target Variable",
            "card_id": "33223be0d8a8478181e297a404996129",
            "card_tags": [],
            "front_text": "In Python, the variable in the for clause is referred to as the _____ because it is the target of an assignment at the beginning of each loop iteration."
        },
        {
            "back_text": "total += number",
            "card_id": "3d75d30927534c099718a7571368dc86",
            "card_tags": [],
            "front_text": "Which of the following represents an example to calculate the sum of the numbers (accumulator)?"
        },
        {
            "back_text": "True",
            "card_id": "1bab5867b32249c3a2229354dddd71f4",
            "card_tags": [],
            "front_text": "True/False: A better way to repeatedly perform an operation is to write the statements for the task once, and then place the statements in a loop that will repeat the statements as many times as necessary."
        },
        {
            "back_text": "True",
            "card_id": "b256cafd54374e85ad236ad5c9b5dbeb",
            "card_tags": [],
            "front_text": "True/False: In flowcharting, the decision structure and the repetition structure both use the diamond symbol to represent the condition that is tested."
        },
        {
            "back_text": "True",
            "card_id": "70a50c177e9b46c08ba5fa0825801d8f",
            "card_tags": [],
            "front_text": "True/False: The first line in the while loop is referred to as the condition clause."
        },
        {
            "back_text": "False\nTrue/False: Both of the following for clauses would generate the same number of loop iterations:\n for num in range(4):",
            "card_id": "dabb2e831c204748b38f43298d9588c3",
            "card_tags": [],
            "front_text": "True/False: In Python, an infinite loop usually occurs when the computer accesses the wrong memory address."
        },
        {
            "back_text": "False",
            "card_id": "28a1c40f3a9b46f99767f6fdf8d031b0",
            "card_tags": [],
            "front_text": " for num in range(1,5):"
        },
        {
            "back_text": "True",
            "card_id": "ff4290872399418a94111df957f8241a",
            "card_tags": [],
            "front_text": "True/False: The integrity of a program's output is only as good as the integrity of its input. For this reason the program should discard input that is invalid and prompt the user to enter correct data."
        },
        {
            "back_text": "True",
            "card_id": "cf231346b498474b846b69d7d270faac",
            "card_tags": [],
            "front_text": "True/False: In a nested loop, the inner loop goes through all of its iterations for every single iteration of an outer loop."
        },
        {
            "back_text": "True",
            "card_id": "7a6807b5fc994661be368f38695dfc10",
            "card_tags": [],
            "front_text": "True/False: To get the total number of iterations of a nested loop, multiply the number of iterations of all the loops."
        },
        {
            "back_text": "Repetition",
            "card_id": "ac26039362f847c29d357d0f0a353dbf",
            "card_tags": [],
            "front_text": "A(n) ?? structure causes a statement or set of statements to execute repeatedly."
        },
        {
            "back_text": "Condition",
            "card_id": "a95e737562624ef2a9f1f278afc18c28",
            "card_tags": [],
            "front_text": "A(n) ??-controlled loop causes a statement or set of statements to repeat as long as a condition is true."
        },
        {
            "back_text": "Pretest",
            "card_id": "007d899d16a546dfbe7705f26f5b5292",
            "card_tags": [],
            "front_text": "The while loop is known as a(n) ?? loop because it tests conditions before performing an iteration."
        },
        {
            "back_text": "For",
            "card_id": "64d2fdcda8794f2d8491cda92f07665d",
            "card_tags": [],
            "front_text": "In Python, you would use the ?? statement to write a count-controlled loop."
        },
        {
            "back_text": "Running",
            "card_id": "ae43f25c42a248b98dfb14d0fc169deb",
            "card_tags": [],
            "front_text": "A(n) ?? total is a sum of numbers that accumulates with each iteration of a loop."
        },
        {
            "back_text": "Sentinel",
            "card_id": "c27d78b593764169922aa612bde0f1f3",
            "card_tags": [],
            "front_text": "A(n) ?? is a special value that marks the end of a sequence of items."
        },
        {
            "back_text": "GIGO",
            "card_id": "afd7a7bca90a4af5829e77093fec026f",
            "card_tags": [],
            "front_text": "The acronym ?? refers to the fact that the computer cannot tell the difference between good data and bad data."
        },
        {
            "back_text": "Input",
            "card_id": "7bc9f4bddc714ba2818c0f864e9f5e84",
            "card_tags": [],
            "front_text": "A(n) ?? validation loop is sometimes called an error trap or an error handler."
        },
        {
            "back_text": "Range",
            "card_id": "7c4875b26969477e80f2189967607387",
            "card_tags": [],
            "front_text": "The ?? function is a built-in function that generates a list of integer values."
        },
        {
            "back_text": "Dell",
            "card_id": "4e5e7e81fec84368929151930ce19d4f",
            "card_tags": [],
            "front_text": "Which of the following is not a microprocessor manufacturing company?"
        },
        {
            "back_text": "Assembly",
            "card_id": "b3503b0f1c2a4603aa501c4b3628e0a4",
            "card_tags": [],
            "front_text": "Which computer language uses short words known as mnemonics for writing programs?"
        },
        {
            "back_text": "fetch-decode-execute",
            "card_id": "0adf0b5bdee2457cafe0980d729489a2",
            "card_tags": [],
            "front_text": "The process known as the _____ cycle is used by the CPU to execute instructions in a program."
        },
        {
            "back_text": "Machine language",
            "card_id": "f4b0ee12644343ccbf104c5ddec2eb94",
            "card_tags": [],
            "front_text": "The following is an example of an instruction written in which computer language? 10110000"
        },
        {
            "back_text": "two's complement",
            "card_id": "4dd25db6b0e2451e89f3805fd420f000",
            "card_tags": [],
            "front_text": "What is the encoding technique called that is used to store negative numbers in the computer's memory?"
        },
        {
            "back_text": "ASCII",
            "card_id": "0c5ba83961534981b6d522368e71d4cf",
            "card_tags": [],
            "front_text": "The _____ coding scheme contains a set of 128 numeric codes that are used to represent characters in the computer memory."
        },
        {
            "back_text": "255",
            "card_id": "3fcfed69e91748e3ac635f7ce36da809",
            "card_tags": [],
            "front_text": "What is the largest value that can be stored in one byte?"
        },
        {
            "back_text": "bit",
            "card_id": "a1f840b9e1f1436691191472113a8224",
            "card_tags": [],
            "front_text": "The smallest storage location in a computer's memory"
        },
        {
            "back_text": "magnetically",
            "card_id": "9cddf7eb494e4bf0bc1117b1550e86e9",
            "card_tags": [],
            "front_text": "The disk drive is a secondary storage device that stores data by _____ encoding it onto a spinning circular disk."
        },
        {
            "back_text": "solid state drive",
            "card_id": "a4a863271a674bcd88b6f54d74253631",
            "card_tags": [],
            "front_text": "A _____ has no moving parts, and operates faster than a traditional disk drive."
        },
        {
            "back_text": "False",
            "card_id": "a499a198ef624caa910ac1d1c02b08db",
            "card_tags": [],
            "front_text": "True/False: A computer is a single device that performs different types of tasks for its users."
        },
        {
            "back_text": "False",
            "card_id": "24fff5327e754814a9b91925d33357b1",
            "card_tags": [],
            "front_text": "True/False: The CPU is able to quickly access data stored at any random location in ROM."
        },
        {
            "back_text": "False",
            "card_id": "c2c1b396a6e7448180e724ffe676a4f8",
            "card_tags": [],
            "front_text": "True/False: All programs are normally stored in ROM and loaded into RAM as needed for processing."
        },
        {
            "back_text": "True",
            "card_id": "0d84b42ee35d43069e28511d38b865e4",
            "card_tags": [],
            "front_text": "True/False: The instruction set for a microprocessor is unique and is typically understood only by the microprocessors of the same brand."
        },
        {
            "back_text": "True",
            "card_id": "46d9672de9cb4e45be5a0e4a3b1fae1e",
            "card_tags": [],
            "front_text": "True/False: The CPU understands instructions written in a binary machine language."
        },
        {
            "back_text": "True",
            "card_id": "be6c3d04639b46f7b0331f872b21f520",
            "card_tags": [],
            "front_text": "True/False: The main reason for using secondary storage is to hold data for long periods of time, even when the power supply to the computer is turned off."
        },
        {
            "back_text": "True",
            "card_id": "086b875f07744f69a9614ae8d63e3ccb",
            "card_tags": [],
            "front_text": "True/False: RAM is a volatile memory used for temporary storage while a program is running."
        },
        {
            "back_text": "False",
            "card_id": "2cd880aace6943bcb1a219b9ae3ab424",
            "card_tags": [],
            "front_text": "True/False: The Python language uses a compiler, which is a program that both translates and executes the instructions in a high level language."
        },
        {
            "back_text": "program",
            "card_id": "62a3e8b441e4422ab527495269c04b6d",
            "card_tags": [],
            "front_text": "A(n) _______________ is a set of instructions that a computer follows to perform a task."
        },
        {
            "back_text": "hardware",
            "card_id": "5ab297bdde1648cb8a667ff66e0a8cf8",
            "card_tags": [],
            "front_text": "The term _______________ refers to all of the physical devices that a computer is made of."
        },
        {
            "back_text": "cpu",
            "card_id": "db32854a15a94ae08a24841492b611c1",
            "card_tags": [],
            "front_text": "The _______________ is the part of a computer that actually runs programs and is the most important component in a computer."
        },
        {
            "back_text": "micro processors",
            "card_id": "31c933e4930f47759fb8bfb9ff03e836",
            "card_tags": [],
            "front_text": "_______________ are small central processing unit chips."
        },
        {
            "back_text": "RAM",
            "card_id": "ba9659ef0f04490d9598e3dea044b6b7",
            "card_tags": [],
            "front_text": "Main memory is commonly known as _______________."
        },
        {
            "back_text": "secondary storage",
            "card_id": "c2942cbfa24a4edd9683c580be1a8bf2",
            "card_tags": [],
            "front_text": "_______________ is a type of memory that can hold data for long periods of time, even when there is no power to the computer."
        },
        {
            "back_text": "magnetically",
            "card_id": "1be991a41361437196702b43f2ca525b",
            "card_tags": [],
            "front_text": "A disk drive stores data by _______________ encoding it onto a circular disk."
        },
        {
            "back_text": "interpreter",
            "card_id": "4c9973816960418ea59efdacd97d441c",
            "card_tags": [],
            "front_text": "The Python _______________ is a program that can read Python programming statements and execute them."
        },
        {
            "back_text": "script",
            "card_id": "ac5ef40ef032405b9fe31c3efb87b747",
            "card_tags": [],
            "front_text": "In _______________ mode, the interpreter reads the contents of a file that contains Python statements and executes each statement."
        },
        {
            "back_text": "logic",
            "card_id": "2edf5b63af7e44eea9682df6e319d258",
            "card_tags": [],
            "front_text": "What type of error produces incorrect results but does not prevent the program from running?"
        },
        {
            "back_text": "3",
            "card_id": "c3b1a74681324433b8c1e3162f117bbe",
            "card_tags": [],
            "front_text": "The program development cycle is made up of _____ steps that are repeated until no errors can be found in the program."
        },
        {
            "back_text": "pseudocode",
            "card_id": "9eb9e9d952c04c508bc30e4d460595c6",
            "card_tags": [],
            "front_text": "What is the informal language that programmers use to create models of programs that have no syntax rules and are not meant to be compiled or executed?"
        },
        {
            "back_text": "input",
            "card_id": "18265133753e44a4a7fe6b0354b7581b",
            "card_tags": [],
            "front_text": "The _____ function reads a piece of data that has been entered at the keyboard and returns that piece of data, as a string, back to the program."
        },
        {
            "back_text": "\\",
            "card_id": "c9d0f8ff05374c7ca3644de3bc4f24eb",
            "card_tags": [],
            "front_text": "The line continuation character is a _____."
        },
        {
            "back_text": "**",
            "card_id": "813fe76dffb54221a83c9ed0627cc6f4",
            "card_tags": [],
            "front_text": "Which mathematical operator is used to raise five to the second power in Python?"
        },
        {
            "back_text": "end",
            "card_id": "6a881f71adf747b68939be1c3ecd0905",
            "card_tags": [],
            "front_text": "In a print statement, you can set the _____ argument to a space or empty string to stop the output from advancing to a new line."
        },
        {
            "back_text": "float",
            "card_id": "a292f913709c4ccba8eeed23d4901a99",
            "card_tags": [],
            "front_text": "After the execution of the following statement, the variable sold will reference the numeric literal value as a(n) _____ data type: sold = 256.752"
        },
        {
            "back_text": "68\nThe output of the following print statement is:",
            "card_id": "e987c631119a4753898b9b8ecfec46a5",
            "card_tags": [],
            "front_text": "After the execution of the following statement, the variable price will reference the value _____. price = int(68.549)"
        },
        {
            "back_text": "I'm ready to begin\nIf value1 is 2.0 and value2 is 12, what is the output of the following command?",
            "card_id": "e3ab65229c0e48009c0f0206be0e1b44",
            "card_tags": [],
            "front_text": "print 'I\\'m ready to begin'"
        },
        {
            "back_text": "24.0",
            "card_id": "2a8a7c0ebe114c5eb2a59bae8ebbcc2d",
            "card_tags": [],
            "front_text": "print(value1 * value2)"
        },
        {
            "back_text": "input()\nWhat is the output of the following print statement?",
            "card_id": "0be24b2740794704ac378cf6a5620fd4",
            "card_tags": [],
            "front_text": "The _____ built-in function is used to read a number that has been typed on the keyboard."
        },
        {
            "back_text": "The path is D:\\sample\\test",
            "card_id": "4ffea61ef72c475c8fad138d8fe6b55a",
            "card_tags": [],
            "front_text": "print('The path is D:\\\\sample\\\\test.')"
        },
        {
            "back_text": "Quotation",
            "card_id": "48988ea2ba534e91be3a2544bbda43c3",
            "card_tags": [],
            "front_text": "What symbol is used to mark the beginning and end of a string?"
        },
        {
            "back_text": "False",
            "card_id": "d5396989c62e4b2bb2a25018da670f38",
            "card_tags": [],
            "front_text": "True/False: According to the behavior of integer division, when an integer is divided by an integer, the result will be a float."
        },
        {
            "back_text": "True",
            "card_id": "a87249a66d7a414a92b876ca7c63eb78",
            "card_tags": [],
            "front_text": "True/False: Python allows programmers to break a statement into multiple lines."
        },
        {
            "back_text": "False",
            "card_id": "4a75fb11606a47d796f57b5231001acf",
            "card_tags": [],
            "front_text": "True/False: Python formats all floating-point numbers to two decimal places when outputting using the print statement."
        },
        {
            "back_text": "True",
            "card_id": "f9530600687a460380bff65781375ff4",
            "card_tags": [],
            "front_text": "True/False: Computer programs typically perform three steps: Input is received, some process is performed on the input, and output is produced."
        },
        {
            "back_text": "True",
            "card_id": "cc17413c62574800971ccebbbb037465",
            "card_tags": [],
            "front_text": "True/False: In Python, print statements written on separate lines do not necessarily output on separate lines."
        },
        {
            "back_text": "True",
            "card_id": "40821dd4e6e541e9b1159c92d41e9d26",
            "card_tags": [],
            "front_text": "True/False: The \\t escape character causes the output to skip over to the next horizontal tab."
        },
        {
            "back_text": "modulus",
            "card_id": "4b069c2287fc4619bbcafa5f080d1016",
            "card_tags": [],
            "front_text": "The % symbol is the remainder operator and it is also known as the _______________ operator."
        },
        {
            "back_text": "escape",
            "card_id": "88289b5abbe54c948130c4f01eeb98ea",
            "card_tags": [],
            "front_text": "A(n) _______________ character is a special character that is preceded with a backslash, appearing inside a string literal."
        },
        {
            "back_text": "formatting",
            "card_id": "c0c56531ef684846a7897ea8f9daefa3",
            "card_tags": [],
            "front_text": "The _______________ specifier is a special set of characters that specify how a value should be formatted."
        },
        {
            "back_text": "76.159",
            "card_id": "3ecde4c8d2da4d22845f08e0c10b963a",
            "card_tags": [],
            "front_text": "When applying the .3f formatting specifier to the following number, 76.15854, the result is _______________."
        },
        {
            "back_text": "variable",
            "card_id": "60564b32da2e448d91cfcc70149997cb",
            "card_tags": [],
            "front_text": "A(n) _______________ is a name that represents a value stored in the computer's memory."
        },
        {
            "back_text": "data types",
            "card_id": "9b813e7834d645e4bc2076cfe6c7e679",
            "card_tags": [],
            "front_text": "Python uses _______________ to categorize values in memory."
        },
        {
            "back_text": "Concatenation",
            "card_id": "38ab235841df4ae6b9ae39cbec524966",
            "card_tags": [],
            "front_text": "When the + operator is used with two strings, it performs string _______________."
        },
        {
            "back_text": "control",
            "card_id": "c70e9e08145b4625803b13d6118953da",
            "card_tags": [],
            "front_text": "A(n) _____ structure is a logical design that controls the order in which a set of statements execute."
        },
        {
            "back_text": "double alternative",
            "card_id": "1db3791ea4b944839d1b6b46d6b529d0",
            "card_tags": [],
            "front_text": "The decision structure that has two possible paths of execution is known as _____."
        },
        {
            "back_text": "compound",
            "card_id": "45ebddcdb79246a6bcf80fb2f716d21c",
            "card_tags": [],
            "front_text": "Multiple Boolean expressions can be combined by using a logical operator to create _____ expressions."
        },
        {
            "back_text": "Or",
            "card_id": "b1a41eb862064baca9eaf785738dc71f",
            "card_tags": [],
            "front_text": "When using the _____ operator, one or both subexpressions must be true for the compound expression to be true."
        },
        {
            "back_text": "or, and",
            "card_id": "a6660bb30196412890882b4ce8d9f0ac",
            "card_tags": [],
            "front_text": "Which logical operators perform short-circuit evaluation?"
        },
        {
            "back_text": "True",
            "card_id": "8cf113079bf348f4bb72b57774e313d5",
            "card_tags": [],
            "front_text": "True/False: The if statement causes one or more statements to execute only when a Boolean expression is true."
        },
        {
            "back_text": "true or false",
            "card_id": "a1d79651c5c2414b832d136315adea4b",
            "card_tags": [],
            "front_text": "Boolean variable can reference one of two values: _____."
        },
        {
            "back_text": "False",
            "card_id": "0f7fa71396bb48cb9d8bfccf6cdb6aba",
            "card_tags": [],
            "front_text": "True/False: The Python language is not sensitive to block structuring of code."
        },
        {
            "back_text": "False",
            "card_id": "d60e247163ee4aa08c6cc4ee83225628",
            "card_tags": [],
            "front_text": "True/False: Python allows you to compare strings, but it is not case sensitive."
        },
        {
            "back_text": "True",
            "card_id": "cf52810801bc47beb607cc8f7b206709",
            "card_tags": [],
            "front_text": "True/False: Nested decision structures are one way to test more than one condition."
        },
        {
            "back_text": "False",
            "card_id": "9c2d93ea1edb41bdbece703c47e165ea",
            "card_tags": [],
            "front_text": "True/False: The not operator is a unitary operator and it must be a compound expression."
        },
        {
            "back_text": "False",
            "card_id": "66e83ecc30ac435eb9d942d7d0f1b15a",
            "card_tags": [],
            "front_text": "True/False: Short-circuit evaluation is performed with the not operator."
        },
        {
            "back_text": "True",
            "card_id": "d0d0af8ca25e45d4ba0e00a834f0b9a3",
            "card_tags": [],
            "front_text": "True/False: Expressions that are tested by the if statement are called Boolean expressions."
        },
        {
            "back_text": "True",
            "card_id": "5989247eb5b848349ee8aeb3fb15b52d",
            "card_tags": [],
            "front_text": "True/False: Decision structures are also known as selection structures."
        },
        {
            "back_text": "True",
            "card_id": "4a501255342b42d491414975a7d5a19a",
            "card_tags": [],
            "front_text": "True/False: An action in a single alternative decision structure is performed only when the condition is true."
        },
        {
            "back_text": "If",
            "card_id": "80e101212cdb4c1db7ca066d3fc85006",
            "card_tags": [],
            "front_text": "The _______________ statement is used to create a decision structure."
        },
        {
            "back_text": "diamond",
            "card_id": "3dc49c5f0d624487ab5fca9d1e27e0e5",
            "card_tags": [],
            "front_text": "In flowcharting, the _______________ symbol is used to represent a Boolean expression."
        },
        {
            "back_text": "single alternative",
            "card_id": "e72175a40e8d4f6ab8317b9184c9012b",
            "card_tags": [],
            "front_text": "A(n) _______________ decision structure provides only one alternative path of execution."
        },
        {
            "back_text": "conditionally",
            "card_id": "e442422d1f264f4a8008a7f698a1866c",
            "card_tags": [],
            "front_text": "In a decision structure, the action is _______________ executed because it is performed only when a certain condition is true."
        },
        {
            "back_text": "relational",
            "card_id": "5716ac5a73be4c81a80b93965cb74f7d",
            "card_tags": [],
            "front_text": "A(n) _______________ operator determines whether a specific relationship exists between two values."
        },
        {
            "back_text": "if/else",
            "card_id": "bc24364d080343cfa628567b55e976ec",
            "card_tags": [],
            "front_text": "A(n) _______________ statement will execute one block of statements if its condition is true, or another block if its condition is false."
        },
        {
            "back_text": "if elif else",
            "card_id": "608df337d16c4379acd5dc0886f94f50",
            "card_tags": [],
            "front_text": "Python provides a special version of a decision structure known as the _______________ statement, which makes the logic of the nested decision structure simpler to write"
        },
        {
            "back_text": "not",
            "card_id": "9041b737467a4fda9ee3f242907e2376",
            "card_tags": [],
            "front_text": "The logical _______________ operator reverses the truth of a Boolean expression."
        },
        {
            "back_text": "flags",
            "card_id": "8c9ca8d3adca43ccba530694a8e707fd",
            "card_tags": [],
            "front_text": "Boolean variables are commonly used as _______________ to indicate whether a specific condition exists."
        },
        {
            "back_text": "compound",
            "card_id": "c2334f26bc5440708cbf4c6d233cd7a4",
            "card_tags": [],
            "front_text": "A(n) _______________ expression is made up of two or more Boolean expressions."
        },
        {
            "back_text": "stores a piece of data and gives it a specific name",
            "card_id": "7c03765293f848ad9b528c18572dad91",
            "card_tags": [],
            "front_text": "variable"
        },
        {
            "back_text": "a data type that is like a light switch. it can only have two values: true, false",
            "card_id": "2359b5ed7b9541198b2349e892178c38",
            "card_tags": [],
            "front_text": "boolean"
        },
        {
            "back_text": "%. Returns the remainder from a division.",
            "card_id": "ce71ff02695c4c1d90a6e2d6ecfa589c",
            "card_tags": [],
            "front_text": "modulo"
        },
        {
            "back_text": "i.e. numbers and booleans",
            "card_id": "361dd59d71a7439b88a7a196011d3dda",
            "card_tags": [],
            "front_text": "data types"
        },
        {
            "back_text": "separates statements",
            "card_id": "f1b77cfc886645b8b0ebfc6f3de431d0",
            "card_tags": [],
            "front_text": "whitespace"
        },
        {
            "back_text": "**",
            "card_id": "e0ff208bbb2f49dca35eba8e9609256c",
            "card_tags": [],
            "front_text": "exponent"
        },
        {
            "back_text": "True",
            "card_id": "88468ec835484c1bbe3461f338476ca3",
            "card_tags": [],
            "front_text": "variables can be reassigned?"
        },
        {
            "back_text": "can contain letters, numbers, and symbols",
            "card_id": "3a38c26e3b694381aa929165e6c04426",
            "card_tags": [],
            "front_text": "string"
        },
        {
            "back_text": "tells Python not to end the string",
            "card_id": "1562e426cd914c748d1759746a96fadf",
            "card_tags": [],
            "front_text": "\\"
        },
        {
            "back_text": "the number that each character in a string is assigned",
            "card_id": "39c09983dbcb4ba8959d083a4dd87923",
            "card_tags": [],
            "front_text": "index"
        },
        {
            "back_text": "let you perform specific tasks on strings",
            "card_id": "0d7431838c3b4040bdeb6c42c2dff219",
            "card_tags": [],
            "front_text": "string methods"
        },
        {
            "back_text": "= is the assignment operator.\n== is the equality operator.",
            "card_id": "bf79ab84d9904638a8591602e2902007",
            "card_tags": [],
            "front_text": "What's the difference between = and == in Python?"
        },
        {
            "back_text": "they allow the variables outside the string to enter into the string",
            "card_id": "9544120ab170400291994e7462363171",
            "card_tags": [],
            "front_text": "What does % when printing string"
        },
        {
            "back_text": "integer is a number w/out a decimal; float is a number with a decimal",
            "card_id": "68fc3b61212d43fe869ef354a9c320b1",
            "card_tags": [],
            "front_text": "integer vs. float"
        },
        {
            "back_text": "mean that there is a code block",
            "card_id": "516c3c16c98d4bcb8df98fdaf2138773",
            "card_tags": [],
            "front_text": "indentations in python"
        },
        {
            "back_text": "**",
            "card_id": "3616a04c41944cab96035218e6f7c17c",
            "card_tags": [],
            "front_text": "exponents in python"
        },
        {
            "back_text": "Converts a signed integer decimal",
            "card_id": "5f55136976404c198bc0b5d122582900",
            "card_tags": [],
            "front_text": "%d"
        },
        {
            "back_text": "Converts String (converts any Python object using str())",
            "card_id": "d1c83288103e41fc9304ce070501e251",
            "card_tags": [],
            "front_text": "%s"
        },
        {
            "back_text": "String (converts any Python object using repr())",
            "card_id": "987004162d08482b986eef6ad0f1cb6d",
            "card_tags": [],
            "front_text": "%r"
        },
        {
            "back_text": "moves whatever's after it to a new ling",
            "card_id": "53f87e9a66974ad5ba17f7784da9b455",
            "card_tags": [],
            "front_text": "\\n"
        },
        {
            "back_text": "to display things as they're written in the .txt file",
            "card_id": "7dbfa6d2610945149c8c0ad496440ef8",
            "card_tags": [],
            "front_text": "\"\"\""
        },
        {
            "back_text": "Is the new string.format in Python 3. This is how indexing works: \"My first name is {0} and my last name is {1}. You can call me {0}\".format(\"John\",\"Doe\").",
            "card_id": "58c1b3938f9d47a3969020bd5c352e21",
            "card_tags": [],
            "front_text": "{}.format(something)"
        },
        {
            "back_text": "appends thing to lists",
            "card_id": "f2cd6ffecf96459592a251c3ad9714a9",
            "card_tags": [],
            "front_text": "list_name.append(\"\")"
        },
        {
            "back_text": "\"for x in list_name\" ... applies something to every item in a list",
            "card_id": "9b472d2d2dd94bdbacab4d48cc78b235",
            "card_tags": [],
            "front_text": "for loops"
        },
        {
            "back_text": "sorts a list from lowest to highest, or alphabetical",
            "card_id": "0fbeb741a1bb43fc98fe0c49ec8da125",
            "card_tags": [],
            "front_text": "my_list.sort()"
        },
        {
            "back_text": "finds the length of a list",
            "card_id": "1696de843931475e95c12183edc53219",
            "card_tags": [],
            "front_text": "len(my_list)"
        },
        {
            "back_text": "The 2nd term of the list is now equal to 3",
            "card_id": "94da72f6b8d049859acefe67d7a3adff",
            "card_tags": [],
            "front_text": "len[2] = 3"
        },
        {
            "back_text": "Inserts the string \"cat\" at the 4th position in a list",
            "card_id": "6f7f6cbe728941c58ee1d482209e833e",
            "card_tags": [],
            "front_text": "my_list.insert(4, \"cat\")"
        },
        {
            "back_text": "gives you the entire list",
            "card_id": "aa802b00afd84102b5fb71db8a0b4e00",
            "card_tags": [],
            "front_text": "my_list[:]"
        },
        {
            "back_text": "gives you the whole list, starting at the 0 position",
            "card_id": "65ef48f1b5194579a5f612a02247f682",
            "card_tags": [],
            "front_text": "my_list[0:]"
        },
        {
            "back_text": "gives you the list starting at the 1st position and ending at the 2nd position",
            "card_id": "baab40c705ff403aacd606ccf433fb52",
            "card_tags": [],
            "front_text": "my_list[1:3]"
        },
        {
            "back_text": "gives you the last term in the list",
            "card_id": "869fef5286414bce82dc5d491d1e88fd",
            "card_tags": [],
            "front_text": "my_list[-1]"
        },
        {
            "back_text": "debugging and display",
            "card_id": "8b0bf06040f94d4ca041b8fbfdedbe6a",
            "card_tags": [],
            "front_text": "%r is used for..."
        },
        {
            "back_text": "display",
            "card_id": "8753fab4b67844dcbda0166fa6045f3c",
            "card_tags": [],
            "front_text": "%s is used for"
        },
        {
            "back_text": "import optparse\n\nparser = optparse.OptionParser",
            "card_id": "c1a9bcd9883344979b63669b4771c220",
            "card_tags": [],
            "front_text": "optparse first command"
        },
        {
            "back_text": "parser.add_option('-n, '--new')",
            "card_id": "9fb8f805dffb434891a1d8cb9d222606",
            "card_tags": [],
            "front_text": "adding parser options"
        },
        {
            "back_text": "(options, args) = parser.parse_args()",
            "card_id": "27521148a489464a880156d842a730f7",
            "card_tags": [],
            "front_text": "after we've added options (in parser)"
        },
        {
            "back_text": "1. git status\n2. git add (adds to staging)\n3. git commit -m \"What you've done\"\n4. git push -u origin master",
            "card_id": "ef40d8602fbc4ef1917a4e6bd7d9c389",
            "card_tags": [],
            "front_text": "github steps"
        },
        {
            "back_text": "Raw input prompts the user for an input and then turns that input into a string. In between \"(\" and \")\" the programmer writes the prompt that will prompt the user. When you set raw_input() equal to a variable, that variable becomes what the user inputs.",
            "card_id": "c22c06925ed84381af195b4a403fdab3",
            "card_tags": [],
            "front_text": "raw_input()"
        },
        {
            "back_text": "It allows you to input parameters from the command line.",
            "card_id": "6e1ca8a3cf1045cfaf88686fbc16bb9a",
            "card_tags": [],
            "front_text": "What is sys.argv?"
        },
        {
            "back_text": "if, for, while",
            "card_id": "139d55bd7c7040479988cb53e78eda59",
            "card_tags": [],
            "front_text": "Control flow statements"
        },
        {
            "back_text": "1. not\n2. and\n3. or",
            "card_id": "04c2d1ef395043be893febf05d459212",
            "card_tags": [],
            "front_text": "Order of Conditionals"
        },
        {
            "back_text": "A list of tuples in curly brackets: {\"x:y\"}; x is a key, y is a value; dictionaries are unordered.",
            "card_id": "8545b19e91e5442295a4871908852faa",
            "card_tags": [],
            "front_text": "What's a dictionary?"
        },
        {
            "back_text": "means equal to",
            "card_id": "47196a24865b4326835397ae37b374a6",
            "card_tags": [],
            "front_text": "=="
        },
        {
            "back_text": "means doesn't equal",
            "card_id": "b775a1d6d12742bd8502d44ff79876e6",
            "card_tags": [],
            "front_text": "!="
        },
        {
            "back_text": "less than, less than or equal to, greater than, greater than or equal to",
            "card_id": "fc68ac79f7384f8aa34f512ada883480",
            "card_tags": [],
            "front_text": "<, <=, >, >="
        },
        {
            "back_text": "means that both conditions must be true",
            "card_id": "f037da8bbf8e44dd9183f7dc50ec68a9",
            "card_tags": [],
            "front_text": "and"
        },
        {
            "back_text": "means one of the conditions must be true",
            "card_id": "ab9ff9a8bfdb4be381c946d699dfd07a",
            "card_tags": [],
            "front_text": "or"
        },
        {
            "back_text": "gives the opposite of the statement; i.e. \"Not True is False\"",
            "card_id": "bc17c9f600454d608943ba80048a689d",
            "card_tags": [],
            "front_text": "not"
        },
        {
            "back_text": "(**), (*,/,%), (+,-)",
            "card_id": "3653df9175884882862bba5ddae4e124",
            "card_tags": [],
            "front_text": "Order of Precedence"
        },
        {
            "back_text": "matches the beginning of a string",
            "card_id": "3fc3bbee17934736845fedc1c7867da5",
            "card_tags": [],
            "front_text": "^"
        },
        {
            "back_text": "matches the end of a string",
            "card_id": "59a419d605b3455b9c4ee83a069a3569",
            "card_tags": [],
            "front_text": "$"
        },
        {
            "back_text": "matches a word boundar",
            "card_id": "39b755e7774443e79b9971c8d8104484",
            "card_tags": [],
            "front_text": "\\b"
        },
        {
            "back_text": "matches any numeric digit",
            "card_id": "4fd8baa4cde34737aaa91bf78954ba74",
            "card_tags": [],
            "front_text": "\\d"
        },
        {
            "back_text": "matches any non-numeric character",
            "card_id": "73278cb8cac34880921b1d148ca1c763",
            "card_tags": [],
            "front_text": "\\D"
        },
        {
            "back_text": "matches an option x character (in other words, it matches an x wero or one times)",
            "card_id": "cc59b60172a94ceb86d643674a8aed0a",
            "card_tags": [],
            "front_text": "x?"
        },
        {
            "back_text": "matches x zero or more times",
            "card_id": "f2c2db77e1094b77ad47f860885008f2",
            "card_tags": [],
            "front_text": "x*"
        },
        {
            "back_text": "matches x one or more times",
            "card_id": "26645ba38bd54ec19d32b6576fc6be43",
            "card_tags": [],
            "front_text": "x+"
        },
        {
            "back_text": "matches an x character at least n times, but not more than m times",
            "card_id": "c47b058c8a33478a8f815daaa5964ec6",
            "card_tags": [],
            "front_text": "x{n,m}"
        },
        {
            "back_text": "matches either a or b or c",
            "card_id": "4688ea998e0a47ab87a662a89552669f",
            "card_tags": [],
            "front_text": "(a|b|c|)"
        },
        {
            "back_text": "in general is a remembered group. You can get the value of what matched by using the groups() method of the object returned by re.search",
            "card_id": "944f2db57b0746fc989e506be8b4391c",
            "card_tags": [],
            "front_text": "(x)"
        },
        {
            "back_text": "match = re.search(pattern, text)",
            "card_id": "12f3b8f0e0ab494ea57cb4319a41c311",
            "card_tags": [],
            "front_text": "basic regex syntax"
        },
        {
            "back_text": "function rounds floating point numbers\nround(1.773) = 2",
            "card_id": "8c508d80be0b4071b9d3d8c65d554cb9",
            "card_tags": [],
            "front_text": "round()"
        },
        {
            "back_text": "String format character; use for debugging",
            "card_id": "b64648d52440424c92c45ca65f35fc38",
            "card_tags": [],
            "front_text": "%r"
        },
        {
            "back_text": "String format character; use for user formatting",
            "card_id": "e5dbb7750dca48adb9195f1f1c1b59be",
            "card_tags": [],
            "front_text": "%s"
        },
        {
            "back_text": "Integer format character",
            "card_id": "79090c737f1f4f27b2396c69aaf368cc",
            "card_tags": [],
            "front_text": "%d"
        },
        {
            "back_text": "80 characters",
            "card_id": "5afce8466d334f23a67a5cd9f191f46f",
            "card_tags": [],
            "front_text": "How many characters to a line?"
        },
        {
            "back_text": "line character; creates new line in string",
            "card_id": "dc1f14dd7770495eac2848f0ee70e1d6",
            "card_tags": [],
            "front_text": "\\n"
        },
        {
            "back_text": "String for multiple lines of text; can be multi-line comment",
            "card_id": "ac51480cfcdb45cfa9281041216473f4",
            "card_tags": [],
            "front_text": "\"\"\" .............\"\"\""
        },
        {
            "back_text": "escape; tells python to ignore following character, or puts difficult characters into strings when used with specific *escape sequences*",
            "card_id": "39991761896741ae9d26b820367882d0",
            "card_tags": [],
            "front_text": "\\"
        },
        {
            "back_text": "tab character",
            "card_id": "dbd370c1cb3a421f894f63c48c99d7ff",
            "card_tags": [],
            "front_text": "\\t"
        },
        {
            "back_text": "Reads a line of input from user and returns as string",
            "card_id": "252d646fc3c64105834f412e753ed248",
            "card_tags": [],
            "front_text": "raw_input('prompt:')"
        },
        {
            "back_text": "-aka libraries\n-feature sets you can import into a program",
            "card_id": "e50800851a644f9d908c001414d1adf3",
            "card_tags": [],
            "front_text": "modules"
        },
        {
            "back_text": "- argument variable\n- variable holds arguments passed to script when running it\n\nscript, first, second, third = argv (line 3)\n- script = name of python script\n- first, second, third = 3 variables arguments assigned to",
            "card_id": "b430fe1e932c4580b6f995a039cde9d5",
            "card_tags": [],
            "front_text": "argv"
        },
        {
            "back_text": "- function opens a file\n- Required argument is filename\n- Default access_mode is read(r)\n- Does not return actual content; creates/reads fileObject\n-",
            "card_id": "0881aa5c604f43ef9988dcdc90482136",
            "card_tags": [],
            "front_text": "open()"
        },
        {
            "back_text": "Assumes input is valid python expression, returns evaluated result",
            "card_id": "2f8d6ca5679a46bd8186aa09c11ce963",
            "card_tags": [],
            "front_text": "input()"
        },
        {
            "back_text": "- method reads a string from an open file\n- fileObject.read([count])\n- Count = # of bytes to read, reads as much as possible if not given",
            "card_id": "080a95c1ee134239b3444f6676f47a60",
            "card_tags": [],
            "front_text": "read()"
        },
        {
            "back_text": "- method flushes unwritten information and closes file object\n- Not necessary, but important best practice",
            "card_id": "a563b98f41ea41f5a8fb01d06105c7a3",
            "card_tags": [],
            "front_text": "close()"
        },
        {
            "back_text": "Reads one line of text file",
            "card_id": "31df4c5e44e84043b86a5c076f97b50c",
            "card_tags": [],
            "front_text": "readline()"
        },
        {
            "back_text": "Empties the file",
            "card_id": "0e8f94bb27054986a5f6aafe7b51b077",
            "card_tags": [],
            "front_text": "truncate()"
        },
        {
            "back_text": "Writes stuff to file",
            "card_id": "4758209349c04be2a82604def1d77b77",
            "card_tags": [],
            "front_text": "write(stuff)"
        },
        {
            "back_text": "Return the number of items from a sequence or characters in a string",
            "card_id": "f7589cc53e7d4edc9ac7b554563cad68",
            "card_tags": [],
            "front_text": "len(input)"
        },
        {
            "back_text": "Returns TRUE if file in argument exists, FALSE if not",
            "card_id": "0380ae4b4d344bc89828c2a01e619dc9",
            "card_tags": [],
            "front_text": "exists()"
        },
        {
            "back_text": "1. Names code like variables name strings/numbers\n2. Takes arguments the way scripts take argv\n3. Using 1 and 2, allows for mini-commands",
            "card_id": "0077cd7c25374d21a14aeab0b5efc96f",
            "card_tags": [],
            "front_text": "function"
        },
        {
            "back_text": "Defines a function\n\ndef function1():\n print \"this is function 1\"",
            "card_id": "81dfe25827844749bf1d3dbcdc5ad204",
            "card_tags": [],
            "front_text": "def"
        },
        {
            "back_text": "Convert a string to an integer\n\nint(raw_input(> ))",
            "card_id": "abdfceeca5e54654b3e1a43daf3087c9",
            "card_tags": [],
            "front_text": "int()"
        },
        {
            "back_text": "ADD AND\nx = x + y",
            "card_id": "4addcc8b1ce24cf4a4c7385d36595c9f",
            "card_tags": [],
            "front_text": "x += y"
        },
        {
            "back_text": "exponent",
            "card_id": "c78e0b157c6d4363aaaa35655f16f3da",
            "card_tags": [],
            "front_text": "**"
        },
        {
            "back_text": "Modulo;\nremainder of the division\n5 % 3 = 2 (3 goes into 5 once, remainder 2)",
            "card_id": "08020f4cfd7b41369bb123efeafd8cda",
            "card_tags": [],
            "front_text": "5 % 3"
        },
        {
            "back_text": "Method splits a string into separate phrases\n- Default is to split on whitespace\n\nsplit(str, num)\nstr = separator (optional)\nnumb = number of separations (optional)",
            "card_id": "ebe0d5ddb4154abda856935ac155984e",
            "card_tags": [],
            "front_text": "split()"
        },
        {
            "back_text": "Sorts a list from smallest to highest or a string alphabetically\n\nsorted(str, reverse=True) <- Sorts backwards",
            "card_id": "3de51243ffd040498a82769f87243c76",
            "card_tags": [],
            "front_text": "sorted()"
        },
        {
            "back_text": "method removes and returns the last object from a list",
            "card_id": "4683126dac574ddc89824b6e670c7c6a",
            "card_tags": [],
            "front_text": "pop()"
        },
        {
            "back_text": "not equal",
            "card_id": "e6a0b2104ff347589028666268ec2adc",
            "card_tags": [],
            "front_text": "!="
        },
        {
            "back_text": "-Scientific notation in computers\n-Allows very large and small numbers using exponents\n-Made up of:\n*Significand*: 5, 1.5, -2.001\n*Exponent*: 2, -2\n\n-Put decimal after integers to make floating point\n1 ~ 1.0",
            "card_id": "59b6ed3fc84b4ba8ac36e89dc922b44a",
            "card_tags": [],
            "front_text": "floating point numbers"
        },
        {
            "back_text": "- method flushes unwritten information and closes file object\n- Not necessary, but important best practice",
            "card_id": "05729d6845044fe7bc62319823ab6038",
            "card_tags": [],
            "front_text": "close()"
        },
        {
            "back_text": "Adds input to the end of a list",
            "card_id": "842ec8856bc4487ea7c3e5ba3bd56646",
            "card_tags": [],
            "front_text": "append()"
        },
        {
            "back_text": "Start at 1; First, second, third",
            "card_id": "a916ae21c6764c5881129f3f6057245a",
            "card_tags": [],
            "front_text": "Ordinal Numbers"
        },
        {
            "back_text": "Start at 0",
            "card_id": "cb00db8259ff49be8c184a8a183fbab5",
            "card_tags": [],
            "front_text": "Cardinal Numbers"
        },
        {
            "back_text": "else",
            "card_id": "7d81d1e6133541d3803297d4feb072b2",
            "card_tags": [],
            "front_text": "Every if statement must have a(n)..."
        },
        {
            "back_text": "die function that prints out an error message, in case the else doesn't make sense. Shows errors.",
            "card_id": "f206656ca2dd47cc9ef84486fb3ca25e",
            "card_tags": [],
            "front_text": "Else must have a..."
        },
        {
            "back_text": "..two deep. Try to do one deep (put inside another function).",
            "card_id": "352db7f00f7d45ff915fe824845f207c",
            "card_tags": [],
            "front_text": "Never nest if-statements more than.."
        },
        {
            "back_text": "..paragraphs.\nEach if, elif, and else grouping is like a set of sentences. Put blank lines before and after.",
            "card_id": "ae63b84090974382a89b31bd9cb91f22",
            "card_tags": [],
            "front_text": "Treat if statements like..."
        },
        {
            "back_text": "...simple. If complex, move calculations to variables earlier in function and use a good name for the variable.",
            "card_id": "44b541c2fb3d470bb7227f3b4b33e6cf",
            "card_tags": [],
            "front_text": "Boolean tests should be.."
        },
        {
            "back_text": "an infinite loop.\n\n\"while True\" ~ \"While true is true, run this:\"\nA for-loop is...",
            "card_id": "2e6fffebce8a4ec981e1b691bc2cedc5",
            "card_tags": [],
            "front_text": "A while-loop is..."
        },
        {
            "back_text": "converts a string to uppercase",
            "card_id": "55ad5661d11243cf89fdcfc39b127342",
            "card_tags": [],
            "front_text": "upper()"
        },
        {
            "back_text": "converts a string to lowercase",
            "card_id": "f72e2fd71c9247d3a9e6f631286eca7e",
            "card_tags": [],
            "front_text": "lower()"
        },
        {
            "back_text": "print to console",
            "card_id": "8d3a461b04cb46609101611b2b006619",
            "card_tags": [],
            "front_text": "print"
        },
        {
            "back_text": "controls flow of the program with truth statements. Statements inside the while loop are executed until the expression evaluates false.",
            "card_id": "6415dfdca8974534bbc4cda40acc2f9f",
            "card_tags": [],
            "front_text": "while"
        },
        {
            "back_text": "iterate over items of a collection in order they appear",
            "card_id": "f46e8f4344084e5ab8879e5659e45706",
            "card_tags": [],
            "front_text": "for"
        },
        {
            "back_text": "interrupt the (loop) cycle",
            "card_id": "b67bc29e7d014c5f9e4515982dca504d",
            "card_tags": [],
            "front_text": "break"
        },
        {
            "back_text": "used to interrupt the current cycle, without jumping out of the whole cycle. New cycle will begin.",
            "card_id": "be1cc0f9ca304164a7a529024189e729",
            "card_tags": [],
            "front_text": "continue"
        },
        {
            "back_text": "Used to determine, which statements are going to be executed",
            "card_id": "1c922c99ccf74ca6848959f389ed2419",
            "card_tags": [],
            "front_text": "if"
        },
        {
            "back_text": "stands for else if. if the first test evaluates to False, continues with the next one",
            "card_id": "74117a03565042b59231628ebe9677b4",
            "card_tags": [],
            "front_text": "elif"
        },
        {
            "back_text": "optional. Used after elif to catch other cases not provided for.",
            "card_id": "aeacd605d5744ba390608380403f49d0",
            "card_tags": [],
            "front_text": "else"
        },
        {
            "back_text": "tests for object identity",
            "card_id": "196c2c40277548db9e36deffbfdeec28",
            "card_tags": [],
            "front_text": "is"
        },
        {
            "back_text": "negates a boolean value",
            "card_id": "416b4ffaf3164c9e9ea5b32bb760d33e",
            "card_tags": [],
            "front_text": "not"
        },
        {
            "back_text": "if we want to give a module a different alias",
            "card_id": "83bdfe51aba14f418b8f28212834c2f3",
            "card_tags": [],
            "front_text": "as"
        },
        {
            "back_text": "for importing a specific variable, class or a function from a module",
            "card_id": "adc19c449ed34125b3fc736d4e58bba3",
            "card_tags": [],
            "front_text": "from"
        },
        {
            "back_text": "used to create a new user defined function",
            "card_id": "2343568671854312a77368ebbaa367d7",
            "card_tags": [],
            "front_text": "def"
        },
        {
            "back_text": "exits the function and returns a value",
            "card_id": "94189d0efa9d4d82a43084ef091c3848",
            "card_tags": [],
            "front_text": "return"
        },
        {
            "back_text": "creates a new anonymous function",
            "card_id": "43a000a323cc43018b6454bf2369a530",
            "card_tags": [],
            "front_text": "lambda"
        },
        {
            "back_text": "access variables defined outside functions",
            "card_id": "a1cdd0598de547fa8acf504928eb1862",
            "card_tags": [],
            "front_text": "global"
        },
        {
            "back_text": "specifies exception handlers",
            "card_id": "6f11ca93eaea4bbc84cde882733c7e1d",
            "card_tags": [],
            "front_text": "try"
        },
        {
            "back_text": "catches the exception and executes codes",
            "card_id": "9d4c027efd494ab390b40cfa98a924e6",
            "card_tags": [],
            "front_text": "except"
        },
        {
            "back_text": "is always executed in the end. Used to clean up resources.",
            "card_id": "9badd8c5d83944a098bc86bd2d68d42c",
            "card_tags": [],
            "front_text": "finally"
        },
        {
            "back_text": "create a user defined exception",
            "card_id": "35a664f7194142308a4523b3d2ab41bd",
            "card_tags": [],
            "front_text": "raise"
        },
        {
            "back_text": "deletes objects",
            "card_id": "89dd5ec30ffb4ad78914687615cba60b",
            "card_tags": [],
            "front_text": "del"
        },
        {
            "back_text": "does nothing",
            "card_id": "f184459def0b41d9911c8dd81c337606",
            "card_tags": [],
            "front_text": "pass"
        },
        {
            "back_text": "used for debugging purposes",
            "card_id": "50a25c05af42402884ee1f55c8f5d1d8",
            "card_tags": [],
            "front_text": "assert"
        },
        {
            "back_text": "-way of producing objects with similar attributes and methods.\n-used to create new user defined objects\n-an object is an instance of a class",
            "card_id": "d33165e6e4a648eda7a34c588c7a7e22",
            "card_tags": [],
            "front_text": "class"
        },
        {
            "back_text": "executes Python code dynamically",
            "card_id": "e77e88029533400f8aaa3bb02954f4b2",
            "card_tags": [],
            "front_text": "exec"
        },
        {
            "back_text": "is used with generators",
            "card_id": "43cec66429f342d5806214f0110bd832",
            "card_tags": [],
            "front_text": "yield"
        },
        {
            "back_text": "backslash (\\)",
            "card_id": "f25a52e066964a6697a5e136dee19123",
            "card_tags": [],
            "front_text": "\\\\"
        },
        {
            "back_text": "Single Quote (')",
            "card_id": "b3cacd1f6d2a4e25bfb825dba2bad578",
            "card_tags": [],
            "front_text": "\\'"
        },
        {
            "back_text": "Double-quote (\")",
            "card_id": "4d18f1034e1d4effb1f9456584fde566",
            "card_tags": [],
            "front_text": "\\\""
        },
        {
            "back_text": "ASCII Bell\n-may cause receiving device to emit a bell or warning of some kind",
            "card_id": "e052ec497e74460dada81b7d28668fb1",
            "card_tags": [],
            "front_text": "\\a"
        },
        {
            "back_text": "ASCII Backspace (BS)\n- Erases last character printed",
            "card_id": "f22f0e9d042d441e80e45214adc3deb2",
            "card_tags": [],
            "front_text": "\\b"
        },
        {
            "back_text": "ASCII FormFeed (FF)\n- ASCII Control character. Forces printer to eject current page and continue printing at top of another.",
            "card_id": "fb95a6727a4245b9b5db3384a9ddfef5",
            "card_tags": [],
            "front_text": "\\f"
        },
        {
            "back_text": "ASCII LineFeed (LF)\n- Goes to next line\n-newline escape",
            "card_id": "8f472c6367fd4274aa0723e1071da119",
            "card_tags": [],
            "front_text": "\\n"
        },
        {
            "back_text": "ASCII Carriage Return (CR)\n- Resets position to beginning of a line of text",
            "card_id": "89210e66c2b34eb6bbd3daa0699b9fdf",
            "card_tags": [],
            "front_text": "\\r"
        },
        {
            "back_text": "ASCII Horizontal Tab (TAB)\n- 8 horizontal spaces; tab",
            "card_id": "e5089535e62a40d59fca38afae1766e2",
            "card_tags": [],
            "front_text": "\\t"
        },
        {
            "back_text": "ASCII Vertical Tab (VT)\n- 6 vertical lines; 1 inch",
            "card_id": "d5449341631941bb8c6c9c5b55ff6944",
            "card_tags": [],
            "front_text": "\\v"
        },
        {
            "back_text": "signed integer decimal",
            "card_id": "8f201481b81242f8a2c66a1de5708cd0",
            "card_tags": [],
            "front_text": "%d"
        },
        {
            "back_text": "signed integer decimal",
            "card_id": "9f3d719c558e43d98750d43bf0d872bf",
            "card_tags": [],
            "front_text": "%i"
        },
        {
            "back_text": "unsigned octal",
            "card_id": "afb558771792494eb355a753ab2b7a88",
            "card_tags": [],
            "front_text": "%o"
        },
        {
            "back_text": "unsigned decimal",
            "card_id": "944a0bb74c694c74948d434c27e19647",
            "card_tags": [],
            "front_text": "%u"
        },
        {
            "back_text": "Unsigned hexadecimal (lowercase)",
            "card_id": "03ac080b96da4f8e8961ea355f37333d",
            "card_tags": [],
            "front_text": "%x"
        },
        {
            "back_text": "Unsigned Hexadecimal (uppercase)",
            "card_id": "0a1d364fc4904fc3922ab6ddbab9c5b1",
            "card_tags": [],
            "front_text": "%X"
        },
        {
            "back_text": "Floating point exponential format (lowercase)",
            "card_id": "e2177853df0f4e1aaf745b35403deb1f",
            "card_tags": [],
            "front_text": "%e"
        },
        {
            "back_text": "Floating point exponential format (uppercase)",
            "card_id": "f484b2221a454cf9880c81d76e6035e2",
            "card_tags": [],
            "front_text": "%E"
        },
        {
            "back_text": "Floating point decimal format (lowercase)",
            "card_id": "3d953c345b6f40d6a32db5dfb65f0c8f",
            "card_tags": [],
            "front_text": "%f"
        },
        {
            "back_text": "Floating point decimal format (UPPERCASE)",
            "card_id": "2483b84bf2b3434c8b168d2494f9020f",
            "card_tags": [],
            "front_text": "%F"
        },
        {
            "back_text": "Same as \"e\" if exponent is greater than -4 or less than precision",
            "card_id": "5e9471de1edd49d5aec571f7e7ff7da1",
            "card_tags": [],
            "front_text": "%g"
        },
        {
            "back_text": "Same as \"E\" if exponent is greater than -4 or less than precision",
            "card_id": "e780d80bc1864ff48c8dd7201d724032",
            "card_tags": [],
            "front_text": "%G"
        },
        {
            "back_text": "Single character\n-accepts integer or single char string",
            "card_id": "be310c4775754a3685b59b72365a1594",
            "card_tags": [],
            "front_text": "%c"
        },
        {
            "back_text": "String\n-converts any python object using repr()",
            "card_id": "6a578902677a489295088b0dc706addd",
            "card_tags": [],
            "front_text": "%r"
        },
        {
            "back_text": "String\n-Converts any python object using str()",
            "card_id": "17fe3f629d2d4a1a84a8c24ca777a8fe",
            "card_tags": [],
            "front_text": "%s"
        },
        {
            "back_text": "no argument converted, results in \"%\" in the result",
            "card_id": "4ba1fd8c93874a61b8829638d70a6234",
            "card_tags": [],
            "front_text": "%"
        },
        {
            "back_text": "Floor Division. Numbers after the decimal in the quotient are removed\n- 9//2 = 4",
            "card_id": "3be88777870446a781ad97c83f24acea",
            "card_tags": [],
            "front_text": "// (operator)"
        },
        {
            "back_text": "Value of two operands not equal?\n-Similar to !=",
            "card_id": "92cc441f90ba4671b5786a96bcc219c8",
            "card_tags": [],
            "front_text": "<>"
        },
        {
            "back_text": "Add AND. Adds right operand to the left and assigns the result to the left.\nA += B ~ A = A + B",
            "card_id": "5ffe4b260ed34a098492e2a82a219025",
            "card_tags": [],
            "front_text": "+="
        },
        {
            "back_text": "Subtract AND. Subtracts right operand from left and assigns the result to the left.\nA-=B ~ A = A - b",
            "card_id": "c29ff60f2b764bd79d465d12f5b1839f",
            "card_tags": [],
            "front_text": "-="
        },
        {
            "back_text": "Multiply AND. Multiplies left operand by right and assigns product to left operand\nA*=B ~ A = A*B",
            "card_id": "23e524013ce24d0ab75b8bbf8fa13b19",
            "card_tags": [],
            "front_text": "*="
        },
        {
            "back_text": "Modulus AND. Takes modulus using two operands and assigns the result to left operand\nA%=B ~ A = A%B",
            "card_id": "2a87756b00ab44199e3a6dec56f1c52b",
            "card_tags": [],
            "front_text": "%="
        },
        {
            "back_text": "Exponent AND. Performs exponential calculation on operators and assigns value to left operand.\nA**=B ~ A = A**B",
            "card_id": "8da7f7b305ba4ad9bd41987cef40e608",
            "card_tags": [],
            "front_text": "**="
        },
        {
            "back_text": "A list whose objects can be accessed with a key instead of an index. Key can be any string or number.\nd = {'key1' : 1, 'key2' : 2}",
            "card_id": "1a1d44a2b9fa41d68177bef10b4ceee6",
            "card_tags": [],
            "front_text": "dictionary"
        },
        {
            "back_text": "Returns a list of a dict's tuple pairs (key, value)",
            "card_id": "e29a45799c6e464c81b0414016a7e706",
            "card_tags": [],
            "front_text": "items()"
        },
        {
            "back_text": "Returns a value for the given key. If key is not available, returns default of 'none'.",
            "card_id": "6845e7d1a7a34da4b9be043cee80c7bd",
            "card_tags": [],
            "front_text": "get()"
        },
        {
            "back_text": "passed in for function parameter\n\nfunction(argument)",
            "card_id": "12eecccbd1b64e679025c7120ba0989b",
            "card_tags": [],
            "front_text": "function argument"
        },
        {
            "back_text": "Variable name for passed in argment\n\ndef function(parameter):",
            "card_id": "8f178d8cbd3e4fb7899d0165f649ebb3",
            "card_tags": [],
            "front_text": "function parameter"
        },
        {
            "back_text": "Imports all functions and variables from a module\n- Can cause conflicts with user defined functions and vars\n- Better to import only necessary functions\n\nfrom module import *",
            "card_id": "aa3980bba485465ab27c939b4da7a6f4",
            "card_tags": [],
            "front_text": "universal import"
        },
        {
            "back_text": "sorts a list from smallest to greatest",
            "card_id": "70990804421449d4a6e1b1228fbd6ec4",
            "card_tags": [],
            "front_text": "sort()"
        },
        {
            "back_text": "can be changed after created",
            "card_id": "0d22126e25b24fd7aa8a8161f405c30f",
            "card_tags": [],
            "front_text": "\"mutable\""
        },
        {
            "back_text": "deletes key/value pairs from dict",
            "card_id": "50fae53e95334b2d937d4ea8fc4f399b",
            "card_tags": [],
            "front_text": "del keyword"
        },
        {
            "back_text": "removes items from list",
            "card_id": "294352c3c9784575b882b3fc2b9decd4",
            "card_tags": [],
            "front_text": ".remove()"
        },
        {
            "back_text": "Returns a list of numbers from start up to (but not including) stop\n\nstart defaults to 0 and step defaults to 1\nrange(stop)\nrange(start, stop)\nrange(start, stop, step)",
            "card_id": "8992820f83b54d30ac36392d3021b4ac",
            "card_tags": [],
            "front_text": "range()"
        },
        {
            "back_text": "list[x][y]",
            "card_id": "9f863f61553b43aa8949fa3ba8406105",
            "card_tags": [],
            "front_text": "Syntax to index 2 nested lists?"
        },
        {
            "back_text": "gives an index number to each element in a list",
            "card_id": "d65a48f146dd4b039bfdcd54ec0194f4",
            "card_tags": [],
            "front_text": "enumerate()"
        },
        {
            "back_text": "Combines two or 3 lists to return all values in for loops",
            "card_id": "2cd84d5863f847a8bd55343b757397b4",
            "card_tags": [],
            "front_text": "zip()"
        },
        {
            "back_text": "An immutable sequence of Python objects\n-Immutable; can't be changed\n-Similar to list, but can't be modified\n- Uses (), ends in ;\n\ntuple1 = ('word', 1, False);",
            "card_id": "d0b7297190f049d794188a8bda0ecb0b",
            "card_tags": [],
            "front_text": "tuple"
        },
        {
            "back_text": "Returns an array of dict key/value pairs",
            "card_id": "62f6e08ce6c447d1983530e7a1edbfcc",
            "card_tags": [],
            "front_text": "items()"
        },
        {
            "back_text": "Returns an array of dict's keys",
            "card_id": "89a23335d2584513bec06d8b31c7ada9",
            "card_tags": [],
            "front_text": "keys()"
        },
        {
            "back_text": "Returns an array of dict's values",
            "card_id": "a5aed7086d4c4560abf632f586d6d576",
            "card_tags": [],
            "front_text": "values()"
        },
        {
            "back_text": "Python rules for creating lists intelligently\n\ns = [x for x in range(1:51) if x%2 == 0]\n[2, 4, 6, 8, 10, 12, 14, 16, etc]",
            "card_id": "4b7addf4f44843b9ad1e0dd8b61d20c1",
            "card_tags": [],
            "front_text": "list comprehension"
        },
        {
            "back_text": "Way to access elements\n\nlist[start:end:stride]\n-stride = count by __'s\n-any term can be omitted, will be set to default\n- a negative stride progresses through list backwards",
            "card_id": "873cc028a8fd4c7f9fec731263ea545c",
            "card_tags": [],
            "front_text": "list slicing"
        },
        {
            "back_text": "-filters a list for terms that make the function true\nfilter(function, list)\nfilter(lambda x: x%3 ==0, my_list)\n\n-for anonymous (throwaway) functions",
            "card_id": "be6e6dac494b4c0b88c8d536a5433913",
            "card_tags": [],
            "front_text": "filter()"
        },
        {
            "back_text": "bitwise right shift\n-shifts turned on bits to the right\n0b010 >> 1 = 0b001",
            "card_id": "6778c8f84d2148f9a8e98c4ee42e6686",
            "card_tags": [],
            "front_text": "5 >> 4"
        },
        {
            "back_text": "bitwise left shift\n-shifts turned on bits to the left\n0b001 << 1 = 0b010",
            "card_id": "9be960a88cd24d07a07c20e15622785f",
            "card_tags": [],
            "front_text": "5 << 1"
        },
        {
            "back_text": "bitwise AND\nTurns on bits turned on in BOTH inputs\n0b100 & 0b101 = 0b100",
            "card_id": "f4f77a57910f411b95265c3167f367ab",
            "card_tags": [],
            "front_text": "8 & 5"
        },
        {
            "back_text": "Bitwise OR\nTurns on bits if turned on in either input\n0b001 | 0b100 = 0b101",
            "card_id": "84caaffb074d424dbd25a1973c5d0dec",
            "card_tags": [],
            "front_text": "9 | 4"
        },
        {
            "back_text": "Bitwise XOR, EXCLUSIVE OR\nTurns bits on if EITHER but not BOTH bits of inputs are turned on\n0b1010 ^ 0b1101 = 0b0111",
            "card_id": "0871c6b22cfe4b168e44e828ea95d658",
            "card_tags": [],
            "front_text": "12 ^ 42"
        },
        {
            "back_text": "Bitwise NOT\nflips all bits in a number\nfor integers, effectively adds 1 and makes negative",
            "card_id": "57c6dd81e5a54d7a99b48aa9b3e4d05d",
            "card_tags": [],
            "front_text": "~88"
        },
        {
            "back_text": "variable used to determine if bits are on or off in an input\n-sort of works like a multiple choice test key\n-can be used with | to turn bits on if off\n-use with ^ and 11111111 to flip all bits\n\ndef check_bit4(input):\n mask = 0b1000\n desired = input & mask\n if desired > 0:\n return \"on\"\n return \"off\"",
            "card_id": "f6c307e47dcd43c5954580f1a2b02e06",
            "card_tags": [],
            "front_text": "bit mask"
        },
        {
            "back_text": "function of an object",
            "card_id": "843d089a7cb9471e8fc9d04afce4f772",
            "card_tags": [],
            "front_text": "method"
        },
        {
            "back_text": "available everywhere",
            "card_id": "94a7f7f8799944d1a354a7a562178d4f",
            "card_tags": [],
            "front_text": "global variable"
        },
        {
            "back_text": "variables only available to members of certain class",
            "card_id": "bd4ecc300e5c4c7d9d744b3f5266828d",
            "card_tags": [],
            "front_text": "member variables"
        },
        {
            "back_text": "variable only available to one instance of a class",
            "card_id": "b3a22382c70c477798731a907ce5e880",
            "card_tags": [],
            "front_text": "instance variable"
        },
        {
            "back_text": "assigns values from right side operands to left side operand",
            "card_id": "6c36996e94f94b58a17e5fe7e3fbf7d2",
            "card_tags": [],
            "front_text": "="
        },
        {
            "back_text": "module - contains important objects and functions",
            "card_id": "e08fadfa9114497d9064c439ccf4c5de",
            "card_tags": [],
            "front_text": "sys"
        },
        {
            "back_text": "module - OS routines for NT or POSIX",
            "card_id": "69843eff195b4d1097cc1e31f8153cbc",
            "card_tags": [],
            "front_text": "os"
        },
        {
            "back_text": "move to a new position in file, reads bytes",
            "card_id": "dcf24f536d6643ccaf989790b11a6dec",
            "card_tags": [],
            "front_text": "seek()"
        },
        {
            "back_text": "a name for a place to store strings, numbers etc.",
            "card_id": "9d7daa1eb3df467a8ffb262893fe1f25",
            "card_tags": [],
            "front_text": "variable"
        },
        {
            "back_text": "imports specific attributes from a module",
            "card_id": "c69488f2108a4a01b50a2077d55a03ee",
            "card_tags": [],
            "front_text": "from .... import ...."
        },
        {
            "back_text": "a file containing Python definitions, statements or scripts, can be user defined or from a built-in library",
            "card_id": "4b97410c6afd4cb9926b48e151ad4c61",
            "card_tags": [],
            "front_text": "module"
        },
        {
            "back_text": "Octothorpe\nuse for comments on the code, use to disable code\nplacing a # at the beginning of a line or in the middle of a line tells python to ignore whatever is written on the line after the #",
            "card_id": "6f930990c3544544b74e46f0ca626126",
            "card_tags": [],
            "front_text": "#"
        },
        {
            "back_text": "Order of Operations:\nMode of Operations:\nParentheses Exponents Multiplication Division Addition Subtraction",
            "card_id": "dd7f1adce85845a9b538448b9d1d6392",
            "card_tags": [],
            "front_text": "PEMDAS"
        },
        {
            "back_text": "any number with a decimal point showing one or more digits behind the decimal point.\ne. \"4.0\" or \"0.087\"",
            "card_id": "459f7433ce1a4219b72506f40b729793",
            "card_tags": [],
            "front_text": "Floating Point Number"
        },
        {
            "back_text": "Modulus\nis NOT used as a \"percentage\" sign in the programming language",
            "card_id": "601bf313588a4f03a069eb5cd2f8867a",
            "card_tags": [],
            "front_text": "%"
        },
        {
            "back_text": "Signed integer decimal",
            "card_id": "a1c8899f277d439fa9eff2b17c3dd546",
            "card_tags": [],
            "front_text": "%d, %i"
        },
        {
            "back_text": "Signed octal value",
            "card_id": "c5c0cacdf5b34f1895b0ebae41f1afd1",
            "card_tags": [],
            "front_text": "%o"
        },
        {
            "back_text": "Signed hexidecimal",
            "card_id": "37dd5fc7a07e41ef95279f61d9b4da30",
            "card_tags": [],
            "front_text": "%x"
        },
        {
            "back_text": "Floating point exponential format",
            "card_id": "c7ebf289cfad4930838e3dd6631ee6ed",
            "card_tags": [],
            "front_text": "%e"
        },
        {
            "back_text": "Single character",
            "card_id": "61d76e567d1c43aea1c79431ef3f8e40",
            "card_tags": [],
            "front_text": "%c"
        },
        {
            "back_text": "Free-form strings",
            "card_id": "bcf8e03a28874d28bdbe7c2b45f20474",
            "card_tags": [],
            "front_text": "''',\"\"\""
        },
        {
            "back_text": "Every time you put \" (double-quotes) around a piece of text you have been making a string. A string is how you make something that your program might give to a human. You print strings, save strings to files, send strings to web servers, and many other things.\n' (single-quotes) also work for this purpose.",
            "card_id": "ff4522421e544eecb6ea9153b8daeaf8",
            "card_tags": [],
            "front_text": "\""
        },
        {
            "back_text": "Use to make a string that needs multiple lines for the string text.",
            "card_id": "71c5a4981c3741618954de454757d35d",
            "card_tags": [],
            "front_text": "\"\"\""
        },
        {
            "back_text": "can only start with a character (not a number)",
            "card_id": "8a752eb3422947bf9665e1e928a05bdc",
            "card_tags": [],
            "front_text": "variables"
        },
        {
            "back_text": "digit",
            "card_id": "ae39394300e940d182be4a97c8fb9bf8",
            "card_tags": [],
            "front_text": "%d"
        },
        {
            "back_text": "No, you write comments only to explain difficult to understand code or why you did something. Why is usually much more important, and then you try to write the code so that it explains how something is being done on its own. However, sometimes you have to write such nasty code to solve a problem that it does need a comment on every line. In this case it's strictly for you to practice translating code to English.\nTrue",
            "card_id": "a4e034b5ea404f7580388f22130b0683",
            "card_tags": [],
            "front_text": "Write comments on code ..."
        },
        {
            "back_text": "Python recognizes True and False as keywords representing the concept of true and false. If you put quotes around them then they are turned into strings and won't work.",
            "card_id": "c9d02bda81fa462390d9437db95bb904",
            "card_tags": [],
            "front_text": "False"
        },
        {
            "back_text": "float\n\nFloating point decimal format",
            "card_id": "aae546296f9c44c19ccafe7b79068732",
            "card_tags": [],
            "front_text": "%f"
        },
        {
            "back_text": "Character with 16-bit hex value xxxx (Unicode only)",
            "card_id": "9c4b93f244c34ebd8e9b2982bc976e06",
            "card_tags": [],
            "front_text": "\\uxxxx"
        },
        {
            "back_text": "Character with octal value ooo",
            "card_id": "7fdb6151b1c04e46a8f8dee017b7a88b",
            "card_tags": [],
            "front_text": "\\ooo"
        },
        {
            "back_text": "Character with 32-bit hex value xxxxxxxx (Unicode only)",
            "card_id": "1c9d6027d21a49f398b1f9180b51c086",
            "card_tags": [],
            "front_text": "\\Uxxxxxxxx"
        },
        {
            "back_text": "That's a little advanced, but try x = int(raw_input()) which gets the number as a string from raw_input() then converts it to an integer using int()",
            "card_id": "2ef7d6c8c1ad452da3df852e47005edf",
            "card_tags": [],
            "front_text": "How do I get a number from someone so I can do math?"
        },
        {
            "back_text": "We put a , (comma) at the end of each print line. This is so print doesn't end the line with a newline character and go to the next line",
            "card_id": "15c2fddcb2234648b6668ce400ada640",
            "card_tags": [],
            "front_text": ","
        },
        {
            "back_text": "Character with hex value hh",
            "card_id": "e57e8d6be62e462095223b48a2e8c40d",
            "card_tags": [],
            "front_text": "\\xhh"
        },
        {
            "back_text": "Called an \"import.\"\n\nThis is how you add features to your script from the Python feature set. Rather than give you all the features at once, Python asks you to say what you plan to use. This keeps your programs small, but it also acts as documentation for other programmers who read your code later.\n\nMay access features other than \"argv\"",
            "card_id": "aa2fc965db1f499897a8e7abf8b1b5a0",
            "card_tags": [],
            "front_text": "from sys import argv"
        },
        {
            "back_text": "the \"argument variable,\" a very standard name in programming, that you will find used in many other languages. This variable holds the arguments you pass to your Python script when you run it.\n\nYou know how you type python ex13.py to run the ex13.py file? Well the ex13.py part of the command is called an \"argument.\" What we'll do now is write a script that also accepts arguments.\n\nWhat's the difference between argv and raw_input()?\nThe difference has to do with where the user is required to give input. If they give your script inputs on the command line, then you use argv. If you want them to input using the keyboard while the script is running, then use raw_input().\n\nLine 3:\nscript, first, second, third = argv\nLine 3 \"unpacks\" argv so that, rather than holding all the arguments, it gets assigned to four variables you can work with: script, first, second, and third. This may look strange, but \"unpack\" is probably the best word to describe what it does. It just says, \"Take whatever is in argv, unpack it, and assign it to all of these variables on the left in order.\" (ex13.py)",
            "card_id": "1db7d364d8f54dbd8ccb2645a1a9cf04",
            "card_tags": [],
            "front_text": "argv"
        },
        {
            "back_text": "A string is usually a bit of text you want to display to someone, or \"export\" out of the program you are writing. Python knows you want something to be a string when you put either \" (double-quotes) or ' (single-quotes) around the text. You saw this many times with your use of print when you put the text you want to go inside the string inside \" or ' after the print to print the string.\n\nStrings may contain the format characters you have discovered so far. You simply put the formatted variables in the string, and then a % (percent) character, followed by the variable. The only catch is that if you want multiple formats in your string to print multiple variables, you need to put them inside ( ) (parenthesis) separated by , (commas). It's as if you were telling me to buy you a list of items from the store and you said, \"I want milk, eggs, bread, and soup.\" Only as a programmer we say, \"(milk, eggs, bread, soup).\"",
            "card_id": "5357e06394c843aabc1ed90ab9e8906a",
            "card_tags": [],
            "front_text": "strings"
        },
        {
            "back_text": "This is how you add features to your script from the Python feature set. Rather than give you all the features at once, Python asks you to say what you plan to use. This keeps your programs small, but it also acts as documentation for other programmers who read your code later.",
            "card_id": "6fd593be7d274b60b3ccc2d0f798dcf1",
            "card_tags": [],
            "front_text": "import"
        },
        {
            "back_text": "reads the specified file\nuse by entering at the end of the variable used to specify the file you have 'opened'.",
            "card_id": "4f4bb0636232407f946cef5cc6687f45",
            "card_tags": [],
            "front_text": ".read()"
        },
        {
            "back_text": "A letter or word for a value that can vary or change",
            "card_id": "c00616fed86d47528514332a15d7435c",
            "card_tags": [],
            "front_text": "Variable"
        },
        {
            "back_text": "The type of data being used. Could be any of those below",
            "card_id": "61dabcd3c60d46af957e944d1c0bc35f",
            "card_tags": [],
            "front_text": "Data type"
        },
        {
            "back_text": "A whole number",
            "card_id": "5a4d6f18262f4cf38556eb42e53e880b",
            "card_tags": [],
            "front_text": "Integer"
        },
        {
            "back_text": "A decimal",
            "card_id": "0a48e13c3eb647028517dd39097a12c8",
            "card_tags": [],
            "front_text": "Floating Point"
        },
        {
            "back_text": "A text value such as a word or name",
            "card_id": "dc7c3bde9ab44e37906f14484ab2e9de",
            "card_tags": [],
            "front_text": "String"
        },
        {
            "back_text": "A choice or decision. This is where the code uses \"If\", \"else\" or \"elif\" to decide what to do.",
            "card_id": "6caa2df942be490c9482be29df6e693e",
            "card_tags": [],
            "front_text": "Selection"
        },
        {
            "back_text": "A Repeat or Loop. This is where the code uses \"while\" or \"for\" loops",
            "card_id": "ccc9b4934e404e1e837266dafb6cadce",
            "card_tags": [],
            "front_text": "Iteration"
        },
        {
            "back_text": "A list of possible values for a variable. In the fortune teller there was an array of jobs.",
            "card_id": "10c22ebb865547eaac4f202d1d8830cd",
            "card_tags": [],
            "front_text": "List/Array"
        },
        {
            "back_text": "An error in the code that means it will not run. Incorrect spelling of keywords, leaving off speech marks or brackets, not using colons for \"if\" statements.",
            "card_id": "19a45ec5826441188c47baef7978a7d3",
            "card_tags": [],
            "front_text": "Syntax error"
        },
        {
            "back_text": "An error that means the code will run, but will not do what is expected.",
            "card_id": "38fea459838b4edab6bfe87096cc45ad",
            "card_tags": [],
            "front_text": "Logic error"
        },
        {
            "back_text": "Some code that has been grouped together so that it can be reused by \"calling\" the function name. Like a mini-program within a program.",
            "card_id": "e3304796d1774e7b94c80cc2cb250a5e",
            "card_tags": [],
            "front_text": "Function"
        },
        {
            "back_text": "To repeat a commands a set number of times.",
            "card_id": "cc2b0b999279466b837fd8100c4dd852",
            "card_tags": [],
            "front_text": "FOR Loop"
        },
        {
            "back_text": "To repeat while a condition is true (e.g. while score < 100)",
            "card_id": "c3dbf01439f34c61872441b53daca12e",
            "card_tags": [],
            "front_text": "WHILE Loop"
        },
        {
            "back_text": "To test if a condition is true (e.g. if age >17)",
            "card_id": "edd2a45d9d024e5f9768f391583f4438",
            "card_tags": [],
            "front_text": "IF Statement"
        },
        {
            "back_text": "print working dictionary",
            "card_id": "be9e4b93f40740e68794f55ea2a41d31",
            "card_tags": [],
            "front_text": "pwd"
        },
        {
            "back_text": "my computer's network name",
            "card_id": "6d228659a3254f8e9093bc5701818899",
            "card_tags": [],
            "front_text": "hostname"
        },
        {
            "back_text": "make directory",
            "card_id": "593dbef19878439cb1446ad885b71348",
            "card_tags": [],
            "front_text": "mkdir"
        },
        {
            "back_text": "change directory",
            "card_id": "c74ec9b4302748a29e1f60fd401f9ab2",
            "card_tags": [],
            "front_text": "cd"
        },
        {
            "back_text": "list directory",
            "card_id": "6e478a905c8c43709b4e2031d091691b",
            "card_tags": [],
            "front_text": "ls"
        },
        {
            "back_text": "remove directory",
            "card_id": "b3fc914b751d42cc860044ac5d96ba3e",
            "card_tags": [],
            "front_text": "rmdir"
        },
        {
            "back_text": "push directory",
            "card_id": "a309735c52cf4bf49da17e41830bc8c3",
            "card_tags": [],
            "front_text": "pushd"
        },
        {
            "back_text": "pop directory",
            "card_id": "ead11eb5ce0740bca35e61280bfc82b9",
            "card_tags": [],
            "front_text": "popd"
        },
        {
            "back_text": "copy a file or directory",
            "card_id": "fabe18ae29c34b6aacccacb5a1e92a89",
            "card_tags": [],
            "front_text": "cp"
        },
        {
            "back_text": "move a file or directory",
            "card_id": "55a2d9998ebe472ba585b636e9ebe1be",
            "card_tags": [],
            "front_text": "mv"
        },
        {
            "back_text": "page through a file",
            "card_id": "227ef227ccfa49909c4a1cdbf2a708cd",
            "card_tags": [],
            "front_text": "less"
        },
        {
            "back_text": "print the whole file",
            "card_id": "2f206af515474074b079f6ce21eeba3a",
            "card_tags": [],
            "front_text": "cat"
        },
        {
            "back_text": "execute arguments",
            "card_id": "1367032adc484d4f8a478b20859cfd0f",
            "card_tags": [],
            "front_text": "xargs"
        },
        {
            "back_text": "find files",
            "card_id": "6d02fce1bd7245c09cdd9683b8d91f77",
            "card_tags": [],
            "front_text": "find"
        },
        {
            "back_text": "find things inside files",
            "card_id": "d575fb41dd1549d5ac0522cdf68c7e76",
            "card_tags": [],
            "front_text": "grep"
        },
        {
            "back_text": "read a manual page",
            "card_id": "ff0f760dfa474a9f9c2cb2e79d3cb5dd",
            "card_tags": [],
            "front_text": "man"
        },
        {
            "back_text": "find what man page is appropriate",
            "card_id": "094663203e9f45ffa968a917b0ca7676",
            "card_tags": [],
            "front_text": "apropos"
        },
        {
            "back_text": "look at your environment",
            "card_id": "a982d02cb8ba48c6abbeb8167d445de4",
            "card_tags": [],
            "front_text": "env"
        },
        {
            "back_text": "pint some arguments",
            "card_id": "e33c96c8511242c7a9e6d493b4bd2f58",
            "card_tags": [],
            "front_text": "echo"
        },
        {
            "back_text": "export/set a new environment variable",
            "card_id": "fe1cdd8a58d547788dd478e48d01f323",
            "card_tags": [],
            "front_text": "export"
        },
        {
            "back_text": "exit the shell",
            "card_id": "c4c6ceea264247afbf58e53a7edbf2a1",
            "card_tags": [],
            "front_text": "exit"
        },
        {
            "back_text": "DANGER! become super use root! DANGER!",
            "card_id": "262bcfb9c2084388ab35d20fea541b28",
            "card_tags": [],
            "front_text": "sudo"
        },
        {
            "back_text": "Order: Not, And, Or",
            "card_id": "a5d4a66523d24bd3acd36ce5ea0f07b4",
            "card_tags": [],
            "front_text": "Boolean Operators"
        },
        {
            "back_text": "if is a conditional statement that executes some specified code after checking if its expression is True.",
            "card_id": "56234bc8baf44ea99d38094b090dc79d",
            "card_tags": [],
            "front_text": "Conditional Statement: if"
        },
        {
            "back_text": "executes some specified code after finding that the original expression was False (or opposite of the if command)",
            "card_id": "120083d132534dc585bf4a7ae210f47e",
            "card_tags": [],
            "front_text": "Conditional Statement: Else"
        },
        {
            "back_text": "short for else if...otherwise, if the following expression is true, do this!",
            "card_id": "379a250bb79046489c2378dbf70af54e",
            "card_tags": [],
            "front_text": "Conditional Statement: Elif"
        },
        {
            "back_text": "<\n>\n<=\n>=\n==\n!=",
            "card_id": "8feb642258b947c2b2e9d1b067dfbef6",
            "card_tags": [],
            "front_text": "Comparators"
        },
        {
            "back_text": "accepts a string, prints it, and then waits for the user to type something and press Enter (or Return).",
            "card_id": "5c196ec1e52943f6b5e3e353751b9677",
            "card_tags": [],
            "front_text": "raw_Input"
        },
        {
            "back_text": "is a letter",
            "card_id": "dec95a681f98429b9347e25b13ecf8bf",
            "card_tags": [],
            "front_text": ".isalpha()"
        },
        {
            "back_text": "makes lowercase",
            "card_id": "ff6f2b7a904347b0b2f96b53d1dba1bf",
            "card_tags": [],
            "front_text": ".lower"
        },
        {
            "back_text": "makes uppercase",
            "card_id": "2bfddd725200431e9eee5c40f29b29f0",
            "card_tags": [],
            "front_text": ".upper"
        },
        {
            "back_text": "combine",
            "card_id": "730ba5e76f4d46a684c1e8a7c1ab8377",
            "card_tags": [],
            "front_text": "concatenation"
        },
        {
            "back_text": "1) HEADER def function and add parameters\n2) add additional \"\"\"COMMENT here\"\"\" that explains the function\n3)BODY describes procedures the function carries out, is indented",
            "card_id": "af660a93cc644b0bbd1997d9f2ea67c0",
            "card_tags": [],
            "front_text": "Functions"
        },
        {
            "back_text": "ex: import math (import module)",
            "card_id": "975410919c2d4060a1ed10f54d37e2c6",
            "card_tags": [],
            "front_text": "generic import"
        },
        {
            "back_text": "ex: math.sqrt() (module.function)",
            "card_id": "1dad22e73311445083d9bd117c8d9323",
            "card_tags": [],
            "front_text": "use imported function from module"
        },
        {
            "back_text": "import a function from a module\n(from module import function)",
            "card_id": "f3fe005670f04568bcb259c17ea61780",
            "card_tags": [],
            "front_text": "function import"
        },
        {
            "back_text": "access to all variables and functions in an import without having to type math.function constantly.\n(from module import *)\n\ncon: fill your program with a ton of variables and functions and may not link them correctly to the module (your functions and their functions may get confused)",
            "card_id": "d924489bfd54435c9c13fe3cac3009d6",
            "card_tags": [],
            "front_text": "universal import"
        },
        {
            "back_text": "takes largest out of a set of numbers and returns it",
            "card_id": "6ab81d9c450f49dea86a9c846d6acf03",
            "card_tags": [],
            "front_text": "max()"
        },
        {
            "back_text": "takes smallest out of a set of numbers and returns it",
            "card_id": "a5a7848fb0c04186822d830083f479cd",
            "card_tags": [],
            "front_text": "min()"
        },
        {
            "back_text": "gives absolute value of that number (distance from zero)",
            "card_id": "15378afd6ae34a8d91a9af116deb4eca",
            "card_tags": [],
            "front_text": "abs()"
        },
        {
            "back_text": "returns what \"type\" of data ex: int, float, str",
            "card_id": "fc264ad000ba4764835c2a885ede9b47",
            "card_tags": [],
            "front_text": "type()"
        },
        {
            "back_text": "replaces item in list\nlist_name[index number] = \"reassignment\"",
            "card_id": "1c7c8bda39224c1d906c88cd42454b19",
            "card_tags": [],
            "front_text": "assignment statement"
        },
        {
            "back_text": "add to a list by typing list_name.append()",
            "card_id": "2f22d825b9e34714989e89d0cc089f2e",
            "card_tags": [],
            "front_text": "list.append()"
        },
        {
            "back_text": "letters = ['a', 'b', 'c', 'd', 'e']\nslice = letters[1:3]\nprint slice\nprint letters\n\n**when slicing if you wanted numbers 1 and 2 you would slice [0:2] so the code would include both the index 0 and 1",
            "card_id": "f3bdb329693943c080f43e8bf41466d9",
            "card_tags": [],
            "front_text": "slicing lists"
        },
        {
            "back_text": "list of characters",
            "card_id": "d9837b03a57f4cad8920560fb84e8f4e",
            "card_tags": [],
            "front_text": "strings"
        },
        {
            "back_text": "# Grabs the first two items",
            "card_id": "2b1a5a08b18e4117b4fabe3db57706bd",
            "card_tags": [],
            "front_text": "[:2]"
        },
        {
            "back_text": "# Grabs the fourth through last items",
            "card_id": "ab542e93c81841b3a623154d8409a163",
            "card_tags": [],
            "front_text": "my_list[3:]"
        },
        {
            "back_text": "Find the index of an item",
            "card_id": "92584cc5163543fca64df48adf13b828",
            "card_tags": [],
            "front_text": ".index(item)"
        },
        {
            "back_text": "insert a certain item into a list at a certain index",
            "card_id": "4a9a96291e3148b597cc8d0459d57ad2",
            "card_tags": [],
            "front_text": ".insert(index, item)"
        },
        {
            "back_text": "applies function to every item in list\n\nfor x in a:\n print x\n\ncan sort functions\n\nfor number in my_list\n print number #prints out every number on its own line",
            "card_id": "146e252c8fd347e0aa950113b84727c4",
            "card_tags": [],
            "front_text": "for loop"
        },
        {
            "back_text": "similar to index but uses a string or number",
            "card_id": "bdaaca9620bf40a989ee69c0fa1e2252",
            "card_tags": [],
            "front_text": "key"
        },
        {
            "back_text": "similar to a list but you access values by looking at a key rather than an index\n\nuseful for information using strings and values i.e. phonebook, email databases (passwords, and usernames)",
            "card_id": "3cbc4305a69141b3bfb767a5480ba81c",
            "card_tags": [],
            "front_text": "dictionary"
        },
        {
            "back_text": "dictionary **not curly braces",
            "card_id": "23f64cab097940d49345e06e7b266e45",
            "card_tags": [],
            "front_text": "d = {'key1' : 1, 'key2' : 2, 'key3' : 3}"
        },
        {
            "back_text": "list[item]",
            "card_id": "8ce5ee981a8b4ee1badf928882a0ef98",
            "card_tags": [],
            "front_text": "access dictionary values"
        },
        {
            "back_text": "can be changed after created",
            "card_id": "071c4534f4d0436aa0a05c7f224dab66",
            "card_tags": [],
            "front_text": "mutable"
        },
        {
            "back_text": "d = {\"foo\" : \"bar\"}\n\nfor key in d:\n print d[key]",
            "card_id": "c9fb0b480972480fa79799ff6cd2aa7d",
            "card_tags": [],
            "front_text": "how to loop through dictionaries keys"
        },
        {
            "back_text": "A set of specific steps for solving a category of problems",
            "card_id": "46fdd1768d164882918a6d1a43eb533b",
            "card_tags": [],
            "front_text": "algorithm"
        },
        {
            "back_text": "in a program that is meant for other programmers (or anyone reading the source code) and has no effect on the execution of the program",
            "card_id": "df444be1cdba43c4a5122fbebbbf8c14",
            "card_tags": [],
            "front_text": "comment"
        },
        {
            "back_text": "A programming language like Python that is designed to be easy for humans to read and write.",
            "card_id": "a956540a3622498e8e3a85e95768bd16",
            "card_tags": [],
            "front_text": "high-level language"
        },
        {
            "back_text": "A function used in a program or script that causes the Python interpreter to display a value on its output device.",
            "card_id": "711336c57a0e40318cb7f88291078555",
            "card_tags": [],
            "front_text": "print"
        },
        {
            "back_text": "An error that does not occur until the program has started to execute but that prevents the program from continuing.",
            "card_id": "6ef91d84b5d94be48cb8ae4316dbd3e4",
            "card_tags": [],
            "front_text": "runtime error"
        },
        {
            "back_text": "An error in a program that makes it do something other than what the programmer intended.",
            "card_id": "4aaf0be538904a18a31023316ce0c32b",
            "card_tags": [],
            "front_text": "semantic error"
        },
        {
            "back_text": "the meaning of a program",
            "card_id": "4cccc8b3267f4d9da04fa566a37a8c97",
            "card_tags": [],
            "front_text": "semantic"
        },
        {
            "back_text": "The structure of a program",
            "card_id": "5c4d40a0df9b4462b0f723a2d5c852d2",
            "card_tags": [],
            "front_text": "syntax"
        },
        {
            "back_text": "An error in a program that makes it impossible to parse \u2014 and therefore impossible to interpret.",
            "card_id": "2a0ff454aa144ece9cc18b6aaf903fea",
            "card_tags": [],
            "front_text": "syntax error"
        },
        {
            "back_text": "converts to a string",
            "card_id": "038374973cad4b98baca0d2064f060dc",
            "card_tags": [],
            "front_text": "str"
        },
        {
            "back_text": "a value provided to a function when the function is called. This value is assigned to the corresponding parameter in the function.",
            "card_id": "a95b944c2cd14d8bab3792896d474df9",
            "card_tags": [],
            "front_text": "argument"
        },
        {
            "back_text": "An operation that divides one integer by another and yields an integer. Integer division yields only the whole number of times that the numerator is divisible by the denominator and discards any remainder.",
            "card_id": "adc8349da58943f5a21d9082508e7286",
            "card_tags": [],
            "front_text": "integer division"
        },
        {
            "back_text": "One of the values in a list (or other sequence). The bracket operator selects elements of a list.",
            "card_id": "802f7ebc08c6488c835e93d485db60e0",
            "card_tags": [],
            "front_text": "element"
        },
        {
            "back_text": "A file containing definitions and statements\nintended to be imported by other programs.",
            "card_id": "d54a5d8c57724283acde81ef71706619",
            "card_tags": [],
            "front_text": "module"
        },
        {
            "back_text": "Count-controlled loop",
            "card_id": "ec4ee59957214680a8565f3f15044ee6",
            "card_tags": [],
            "front_text": "What type of loop structure repeats the code a specific number of times"
        },
        {
            "back_text": "Condition-controlled loop",
            "card_id": "eea47d13394244e6844f35d7e800ddb8",
            "card_tags": [],
            "front_text": "What type of loop structure repeats the code based on the value of the Boolean expression"
        },
        {
            "back_text": "while condition : statement",
            "card_id": "db8da843f48c49ef977e0542d648b147",
            "card_tags": [],
            "front_text": "What is the format for the while clause in Python"
        },
        {
            "back_text": "Accumulator",
            "card_id": "1ca4b5724ab2415db64000227f946925",
            "card_tags": [],
            "front_text": "The variable used to keep the running total"
        },
        {
            "back_text": "Input validation",
            "card_id": "74d447cd2000408b9efe13d63d91736b",
            "card_tags": [],
            "front_text": "_____ is the process of inspecting data that has been input to a program to make sure it is valid before it is used in a computation."
        },
        {
            "back_text": "Repetition\nWhen will the following loop terminate?",
            "card_id": "1cc5290cd98e4279a739ed4cd4ca504e",
            "card_tags": [],
            "front_text": "What is the structure that causes a statement or a set of statements to execute repeatedly?"
        },
        {
            "back_text": "When keep_on_going refers to a value not equal to 999",
            "card_id": "b6f8c9e397d2467fb2d1a2c7a7aa02a8",
            "card_tags": [],
            "front_text": "while keep_on_going != 999 :"
        },
        {
            "back_text": "list",
            "card_id": "6059d66959b24e328ae7410683286109",
            "card_tags": [],
            "front_text": "In Python, a comma-separated sequence of data items that are enclosed in a set of brackets is called a _____."
        },
        {
            "back_text": "Target Variable",
            "card_id": "76a62a4d5b1245b1a4cae42102854acc",
            "card_tags": [],
            "front_text": "In Python, the variable in the for clause is referred to as the _____ because it is the target of an assignment at the beginning of each loop iteration."
        },
        {
            "back_text": "total += number",
            "card_id": "7bcdf494afb241439a2aed0d02a1d8a1",
            "card_tags": [],
            "front_text": "Which of the following represents an example to calculate the sum of the numbers (accumulator)?"
        },
        {
            "back_text": "True",
            "card_id": "3035c032fe4b433e983781958aa35e23",
            "card_tags": [],
            "front_text": "True/False: A better way to repeatedly perform an operation is to write the statements for the task once, and then place the statements in a loop that will repeat the statements as many times as necessary."
        },
        {
            "back_text": "True",
            "card_id": "d6b07b84f4d445d8ab0341c116e0d4e3",
            "card_tags": [],
            "front_text": "True/False: In flowcharting, the decision structure and the repetition structure both use the diamond symbol to represent the condition that is tested."
        },
        {
            "back_text": "True",
            "card_id": "22c26240990d41e4826b4d383f79fc4c",
            "card_tags": [],
            "front_text": "True/False: The first line in the while loop is referred to as the condition clause."
        },
        {
            "back_text": "False",
            "card_id": "298b075165204903851d95b4ea0145be",
            "card_tags": [],
            "front_text": "True/False: In Python, an infinite loop usually occurs when the computer accesses the wrong memory address."
        },
        {
            "back_text": "Repetition",
            "card_id": "3029e55ede7c4c7c99cd10afcd20c324",
            "card_tags": [],
            "front_text": "A(n) ?? structure causes a statement or set of statements to execute repeatedly."
        },
        {
            "back_text": "Condition",
            "card_id": "1669c9403e6e420fb46d5f48b9dacacc",
            "card_tags": [],
            "front_text": "A(n) ??-controlled loop causes a statement or set of statements to repeat as long as a condition is true."
        },
        {
            "back_text": "For",
            "card_id": "c0ef56b340874e7cb9a42edaa65abc38",
            "card_tags": [],
            "front_text": "In Python, you would use the ?? statement to write a count-controlled loop."
        },
        {
            "back_text": "Input",
            "card_id": "b5892607ca9e48f88e8b9fe6a3d65a67",
            "card_tags": [],
            "front_text": "A(n) ?? validation loop is sometimes called an error trap or an error handler."
        },
        {
            "back_text": "Range",
            "card_id": "d61330cc1d6d4729a309f502af9fe42a",
            "card_tags": [],
            "front_text": "The ?? function is a built-in function that generates a list of integer values."
        },
        {
            "back_text": "software",
            "card_id": "947e2a2a1a704add9a9e16f2d1b42f6c",
            "card_tags": [],
            "front_text": "Programs are commonly referred to as"
        },
        {
            "back_text": "ENIAC",
            "card_id": "9d41a996b2384ada9acea40c7cf92352",
            "card_tags": [],
            "front_text": "Which of the following is considered to be the world's first programmable electronic computer"
        },
        {
            "back_text": "Main memory",
            "card_id": "11f9a341d57d4d8a96b1b686a26c92e2",
            "card_tags": [],
            "front_text": "Where does a computer store a program and the data that the program is working with while the program is running?"
        },
        {
            "back_text": "RAM",
            "card_id": "051017b089d241f9a679c103b4cd52c2",
            "card_tags": [],
            "front_text": "What type of volatile memory is usually used only for temporary storage while running a program?"
        },
        {
            "back_text": "True",
            "card_id": "519db97df4014073b9832ff6f6808fea",
            "card_tags": [],
            "front_text": "True/False: The CPU understands instructions written in a binary machine language."
        },
        {
            "back_text": "True",
            "card_id": "a8fabfdf7ee94ab783b3029364623961",
            "card_tags": [],
            "front_text": "True/False: RAM is a volatile memory used for temporary storage while a program is running."
        },
        {
            "back_text": "program",
            "card_id": "262097dab48c4512952cb222a3fb1863",
            "card_tags": [],
            "front_text": "A(n) _______________ is a set of instructions that a computer follows to perform a task."
        },
        {
            "back_text": "hardware",
            "card_id": "447d181f3cd84ce497bf5f56264f19cf",
            "card_tags": [],
            "front_text": "The term _______________ refers to all of the physical devices that a computer is made of."
        },
        {
            "back_text": "cpu",
            "card_id": "03209ebe68ca44d1a907867866af6fcd",
            "card_tags": [],
            "front_text": "The _______________ is the part of a computer that actually runs programs and is the most important component in a computer."
        },
        {
            "back_text": "RAM",
            "card_id": "04e4c3be600a4e0b96a5eb4308942711",
            "card_tags": [],
            "front_text": "Main memory is commonly known as _______________."
        },
        {
            "back_text": "interpreter",
            "card_id": "1faeb230e45a44fd8b5fc70aff95b6da",
            "card_tags": [],
            "front_text": "The Python _______________ is a program that can read Python programming statements and execute them."
        },
        {
            "back_text": "script",
            "card_id": "8b84444e288f4aa18d4b4aebdafbfd4b",
            "card_tags": [],
            "front_text": "In _______________ mode, the interpreter reads the contents of a file that contains Python statements and executes each statement."
        },
        {
            "back_text": "logic",
            "card_id": "72b77235698b4798918e0ae119034fb0",
            "card_tags": [],
            "front_text": "What type of error produces incorrect results but does not prevent the program from running?"
        },
        {
            "back_text": "3",
            "card_id": "979314cdca134f32a9829e1960291d8f",
            "card_tags": [],
            "front_text": "The program development cycle is made up of _____ steps that are repeated until no errors can be found in the program."
        },
        {
            "back_text": "pseudocode",
            "card_id": "3b3390f2dc5c4a879753a1e396855402",
            "card_tags": [],
            "front_text": "What is the informal language that programmers use to create models of programs that have no syntax rules and are not meant to be compiled or executed?"
        },
        {
            "back_text": "input",
            "card_id": "2d17cfeafd604bea9f3e7c65029068d9",
            "card_tags": [],
            "front_text": "The _____ function reads a piece of data that has been entered at the keyboard and returns that piece of data, as a string, back to the program."
        },
        {
            "back_text": "\\",
            "card_id": "9bfb935b09f34716a23424b0544ecae3",
            "card_tags": [],
            "front_text": "The line continuation character is a _____."
        },
        {
            "back_text": "end",
            "card_id": "216d64bf138647afac5e0816218c4ee7",
            "card_tags": [],
            "front_text": "In a print statement, you can set the _____ argument to a space or empty string to stop the output from advancing to a new line."
        },
        {
            "back_text": "float",
            "card_id": "977157d37111447399a83013edde7d8c",
            "card_tags": [],
            "front_text": "After the execution of the following statement, the variable sold will reference the numeric literal value as a(n) _____ data type: sold = 256.752"
        },
        {
            "back_text": "68",
            "card_id": "9cca4733b2af48c3a6e323b4375d8338",
            "card_tags": [],
            "front_text": "After the execution of the following statement, the variable price will reference the value _____. price = int(68.549)"
        },
        {
            "back_text": "input()",
            "card_id": "25f86ade411c4c43a973abc084278fdf",
            "card_tags": [],
            "front_text": "The _____ built-in function is used to read a number that has been typed on the keyboard."
        },
        {
            "back_text": "True",
            "card_id": "86db761c535b4ceda351200054fa8d53",
            "card_tags": [],
            "front_text": "True/False: Python allows programmers to break a statement into multiple lines."
        },
        {
            "back_text": "False",
            "card_id": "a830c91c84614db5a5c74e6e5554dbc1",
            "card_tags": [],
            "front_text": "True/False: Python formats all floating-point numbers to two decimal places when outputting using the print statement."
        },
        {
            "back_text": "True",
            "card_id": "0fb3032376824a87bc77d4c88be4a8b0",
            "card_tags": [],
            "front_text": "True/False: Computer programs typically perform three steps: Input is received, some process is performed on the input, and output is produced."
        },
        {
            "back_text": "True",
            "card_id": "3cb0796806634321be99b9c385112c81",
            "card_tags": [],
            "front_text": "True/False: In Python, print statements written on separate lines do not necessarily output on separate lines."
        },
        {
            "back_text": "True",
            "card_id": "868258adea4f4d50abf1b334f368d8e6",
            "card_tags": [],
            "front_text": "True/False: The \\t escape character causes the output to skip over to the next horizontal tab."
        },
        {
            "back_text": "comments",
            "card_id": "ebe4a4ea4d5a4c87b9f104ee70aeec39",
            "card_tags": [],
            "front_text": "_______________ are notes of explanation that document lines or sections of a program."
        },
        {
            "back_text": "formatting",
            "card_id": "4f5d6c242a834c60901e92094dd3ed39",
            "card_tags": [],
            "front_text": "The _______________ specifier is a special set of characters that specify how a value should be formatted."
        },
        {
            "back_text": "variable",
            "card_id": "48c13132ff5745b1905703e55fbd3e8e",
            "card_tags": [],
            "front_text": "A(n) _______________ is a name that represents a value stored in the computer's memory."
        },
        {
            "back_text": "data types",
            "card_id": "9ead0caa52754c52aa8750c3be6d388f",
            "card_tags": [],
            "front_text": "Python uses _______________ to categorize values in memory."
        },
        {
            "back_text": "control",
            "card_id": "50dacfd41301486daea032a13ade8605",
            "card_tags": [],
            "front_text": "A(n) _____ structure is a logical design that controls the order in which a set of statements execute."
        },
        {
            "back_text": "Or",
            "card_id": "45c4be437cbc4c2c81236120de54c289",
            "card_tags": [],
            "front_text": "When using the _____ operator, one or both subexpressions must be true for the compound expression to be true."
        },
        {
            "back_text": "true or false",
            "card_id": "0e5f466281084229a02ba9e6c7841911",
            "card_tags": [],
            "front_text": "Boolean variable can reference one of two values: _____."
        },
        {
            "back_text": "False",
            "card_id": "9d9903e5131b483d9b750a1a06ab6d85",
            "card_tags": [],
            "front_text": "True/False: The Python language is not sensitive to block structuring of code."
        },
        {
            "back_text": "False",
            "card_id": "c2f804dc9f48435abe0092e3390b9455",
            "card_tags": [],
            "front_text": "True/False: Python allows you to compare strings, but it is not case sensitive."
        },
        {
            "back_text": "True",
            "card_id": "0926a976f4904577bb90e9d77208d293",
            "card_tags": [],
            "front_text": "True/False: Nested decision structures are one way to test more than one condition."
        },
        {
            "back_text": "True",
            "card_id": "5ab50cba979948869420a245b44b42fb",
            "card_tags": [],
            "front_text": "True/False: Expressions that are tested by the if statement are called Boolean expressions."
        },
        {
            "back_text": "True",
            "card_id": "8910e089718443c8bd53bacfd348c7ca",
            "card_tags": [],
            "front_text": "True/False: An action in a single alternative decision structure is performed only when the condition is true."
        },
        {
            "back_text": "If",
            "card_id": "19bb5665db9f40fa8c8b661de7a923a3",
            "card_tags": [],
            "front_text": "The _______________ statement is used to create a decision structure."
        },
        {
            "back_text": "diamond",
            "card_id": "420e153424a2409c94a6bc7c0857eac9",
            "card_tags": [],
            "front_text": "In flowcharting, the _______________ symbol is used to represent a Boolean expression."
        },
        {
            "back_text": "conditionally",
            "card_id": "4b76fa336a404988a5bb23c8800028e0",
            "card_tags": [],
            "front_text": "In a decision structure, the action is _______________ executed because it is performed only when a certain condition is true."
        },
        {
            "back_text": "if/else",
            "card_id": "57334194622840d98d75e36e02f8ba87",
            "card_tags": [],
            "front_text": "A(n) _______________ statement will execute one block of statements if its condition is true, or another block if its condition is false."
        },
        {
            "back_text": "if elif else",
            "card_id": "d0a1b12113b14943bf9d08d73d4cef72",
            "card_tags": [],
            "front_text": "Python provides a special version of a decision structure known as the _______________ statement, which makes the logic of the nested decision structure simpler to write"
        },
        {
            "back_text": "compound",
            "card_id": "20eff195927141d1ac8956b379d9816b",
            "card_tags": [],
            "front_text": "A(n) _______________ expression is made up of two or more Boolean expressions."
        },
        {
            "back_text": "Slash: used for division",
            "card_id": "2a916812de4546cab7057d3a0841acda",
            "card_tags": [],
            "front_text": "/"
        },
        {
            "back_text": "Percent: used for modulus.\n\nThe modulus operation finds the remainder after division of one number after another.\n\nExample: 75 % 4 = 3, because 4 * 18 is 72, with 3 remaining",
            "card_id": "e603767c1a9d436083144aff0f69535b",
            "card_tags": [],
            "front_text": "%"
        },
        {
            "back_text": "Asterisk: used for miltiplication",
            "card_id": "c2027c063415470d970fe5bbf35bad61",
            "card_tags": [],
            "front_text": "*"
        },
        {
            "back_text": "Less than or equal to",
            "card_id": "7be8f0fe630e46058864c9863ee1cdbc",
            "card_tags": [],
            "front_text": "<="
        },
        {
            "back_text": "Greater than or equal",
            "card_id": "6729ca74a4bd4f958453d36ab2a608fc",
            "card_tags": [],
            "front_text": ">="
        },
        {
            "back_text": "Order of operations: parentheses, exponents, multiplication, division, addition, subtraction",
            "card_id": "aaad63a38ede47a999236dad0d96996f",
            "card_tags": [],
            "front_text": "PEDMAS"
        },
        {
            "back_text": "Placeholders that \"punch out a hole in the code\n\n\n% is the character for this",
            "card_id": "8549ffc60bbd4aa886eb7a67bd57be22",
            "card_tags": [],
            "front_text": "Formatter"
        },
        {
            "back_text": "Pauses the script at the point it shows up, gets the answer from the keyboard, then continues the script.\n\nIt is one of python's built-in functions\n\nLooks something like:\nvar = raw_input(\"Enter_Something\")\nWhere \"Enter_Something\" is what the prompt is, asking you to enter some text, and var is where the text is stored\n\nRemember the %r in the prompt",
            "card_id": "8752be6ee74c486a9b0e1106986f9151",
            "card_tags": [],
            "front_text": "raw_input"
        },
        {
            "back_text": "Python's built-in features are called modules.\n\nAlso called \"libraries\" by some programmers.\n\nExample speech: \"you want to use the sys module.\"",
            "card_id": "e5b66017cac94127aeab23c00e80e09b",
            "card_tags": [],
            "front_text": "Modules"
        },
        {
            "back_text": "Will input the name of the script into your code when called",
            "card_id": "f2110a1a550e41969d8305c2e66f94cf",
            "card_tags": [],
            "front_text": "script"
        },
        {
            "back_text": "A formatter text that is used to give the user the ability to type in a question",
            "card_id": "6fcd7337ec91428f9c5767ff4db6eb63",
            "card_tags": [],
            "front_text": "prompt"
        },
        {
            "back_text": "A method/function/command to close the file",
            "card_id": "520ad46c6c1d4757bce8f8215a7c2c16",
            "card_tags": [],
            "front_text": "close"
        },
        {
            "back_text": "A method/function/command to read the file",
            "card_id": "a43d992e31f24c83a0ed31b21e984296",
            "card_tags": [],
            "front_text": "read"
        },
        {
            "back_text": "A method/function/command to read just one line of a text file",
            "card_id": "9ed106204b27472ea1183760b7426990",
            "card_tags": [],
            "front_text": "readline"
        },
        {
            "back_text": "A method/function/command to empty the file. Be careful if you care about the file",
            "card_id": "5db6b60bdb9348d49efb7872b7f8d0dd",
            "card_tags": [],
            "front_text": "truncate"
        },
        {
            "back_text": "Open a file with an extra parameter. Python has several open parameters that open a file different ways",
            "card_id": "61f768f97b794138bd91f99a33e21338",
            "card_tags": [],
            "front_text": "open(argument, 'w')"
        },
        {
            "back_text": "Operating system path module: allows many functions to occur on a specified path.\n\nEx: os.path exists will return a true or false if a file does or doesn't exist",
            "card_id": "3adbaaf556454e229ad6e7851becff3b",
            "card_tags": [],
            "front_text": "os.path"
        },
        {
            "back_text": "A variable is something that holds a value that may change. In simplest terms, a variable is just a box that you can put stuff in. You can use variables such as numbers.\n\nEx:\nlucky = 7\nprint(lucky)\n7",
            "card_id": "6feab51b437342d6a0032c0230d1d671",
            "card_tags": [],
            "front_text": "variable"
        },
        {
            "back_text": "A string is a list of characters inside of quotes.\n\nStrings can be made of single, double or triple quotes.",
            "card_id": "975b6fd093504374922613c5bd16a9f4",
            "card_tags": [],
            "front_text": "string"
        }
    ],
    "created_by": "",
    "deck_id": "4c8bc0ec6d8145e8a40e3e65d265c357",
    "deck_tags": [],
    "description": null,
    "editable_by": "only_me",
    "has_html": false,
    "has_media": false,
    "lang_back": "en",
    "lang_front": "en",
    "term_count": 564,
    "title": "testcards(python knowledge, quizlet export default)",
    "visibility": "public"
}